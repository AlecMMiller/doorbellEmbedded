

Microchip Technology PIC PRO Macro Assembler V1.42 build -159332390 
                                                                                               Thu Aug 10 10:46:53 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	stringtext38,global,class=STRCODE,delta=2
    45                           	psect	stringtext39,global,class=STRCODE,delta=2
    46                           	psect	cinit,global,class=CODE,merge=1,delta=2
    47                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    48                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    49                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    50                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    51                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    52                           	psect	inittext,global,class=CODE,delta=2
    53                           	psect	clrtext,global,class=CODE,delta=2
    54                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    55                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    56                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text57,local,class=CODE,merge=1,delta=2
    59                           	psect	intentry,global,class=CODE,delta=2
    60                           	psect	text59,local,class=CODE,merge=1,delta=2
    61                           	psect	text60,local,class=CODE,merge=1,delta=2
    62                           	psect	text61,local,class=CODE,merge=1,delta=2
    63                           	psect	text64,local,class=CODE,merge=1,delta=2
    64                           	psect	text65,local,class=CODE,merge=1,delta=2
    65                           	psect	text66,local,class=CODE,merge=1,delta=2
    66                           	psect	text68,local,class=CODE,merge=1,delta=2
    67                           	psect	text69,local,class=CODE,merge=1,delta=2
    68                           	psect	pa_nodes0,global,class=CODE,delta=2
    69                           	dabs	1,0x7E,2
    70  0000                     
    71                           ; Version 1.42
    72                           ; Generated 13/04/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F18855 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  001C                     	;# 
   128  001C                     	;# 
   129  001D                     	;# 
   130  001D                     	;# 
   131  001E                     	;# 
   132  001F                     	;# 
   133  008C                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0090                     	;# 
   141  0091                     	;# 
   142  0093                     	;# 
   143  0094                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  0110                     	;# 
   160  0110                     	;# 
   161  0111                     	;# 
   162  0112                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0114                     	;# 
   167  0115                     	;# 
   168  0116                     	;# 
   169  0116                     	;# 
   170  0117                     	;# 
   171  0119                     	;# 
   172  0119                     	;# 
   173  0119                     	;# 
   174  011A                     	;# 
   175  011A                     	;# 
   176  011A                     	;# 
   177  011B                     	;# 
   178  011B                     	;# 
   179  011B                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011C                     	;# 
   183  011C                     	;# 
   184  011C                     	;# 
   185  011D                     	;# 
   186  011D                     	;# 
   187  011D                     	;# 
   188  011E                     	;# 
   189  011E                     	;# 
   190  011E                     	;# 
   191  011F                     	;# 
   192  011F                     	;# 
   193  011F                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  018F                     	;# 
   200  0190                     	;# 
   201  0191                     	;# 
   202  0192                     	;# 
   203  0196                     	;# 
   204  0197                     	;# 
   205  0198                     	;# 
   206  0199                     	;# 
   207  019A                     	;# 
   208  019B                     	;# 
   209  019C                     	;# 
   210  020C                     	;# 
   211  020C                     	;# 
   212  020D                     	;# 
   213  020E                     	;# 
   214  020F                     	;# 
   215  020F                     	;# 
   216  0210                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0215                     	;# 
   225  0215                     	;# 
   226  0216                     	;# 
   227  0216                     	;# 
   228  0217                     	;# 
   229  0217                     	;# 
   230  0218                     	;# 
   231  0218                     	;# 
   232  0219                     	;# 
   233  021A                     	;# 
   234  021B                     	;# 
   235  021B                     	;# 
   236  021C                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021D                     	;# 
   240  021E                     	;# 
   241  021F                     	;# 
   242  028C                     	;# 
   243  028C                     	;# 
   244  028D                     	;# 
   245  028D                     	;# 
   246  028E                     	;# 
   247  028F                     	;# 
   248  0290                     	;# 
   249  0290                     	;# 
   250  0291                     	;# 
   251  0292                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0293                     	;# 
   255  0294                     	;# 
   256  0295                     	;# 
   257  0296                     	;# 
   258  0296                     	;# 
   259  0297                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  029B                     	;# 
   266  029C                     	;# 
   267  029C                     	;# 
   268  029D                     	;# 
   269  030C                     	;# 
   270  030C                     	;# 
   271  030D                     	;# 
   272  030E                     	;# 
   273  030F                     	;# 
   274  0310                     	;# 
   275  0310                     	;# 
   276  0311                     	;# 
   277  0312                     	;# 
   278  0313                     	;# 
   279  0314                     	;# 
   280  0314                     	;# 
   281  0315                     	;# 
   282  0316                     	;# 
   283  0317                     	;# 
   284  0318                     	;# 
   285  0318                     	;# 
   286  0319                     	;# 
   287  031A                     	;# 
   288  031B                     	;# 
   289  031C                     	;# 
   290  031C                     	;# 
   291  031D                     	;# 
   292  031E                     	;# 
   293  031F                     	;# 
   294  038C                     	;# 
   295  038D                     	;# 
   296  038E                     	;# 
   297  0390                     	;# 
   298  0391                     	;# 
   299  0392                     	;# 
   300  040C                     	;# 
   301  040D                     	;# 
   302  040E                     	;# 
   303  040F                     	;# 
   304  0410                     	;# 
   305  0411                     	;# 
   306  0416                     	;# 
   307  0416                     	;# 
   308  0417                     	;# 
   309  0418                     	;# 
   310  0418                     	;# 
   311  0419                     	;# 
   312  041A                     	;# 
   313  041A                     	;# 
   314  041B                     	;# 
   315  041C                     	;# 
   316  041C                     	;# 
   317  041D                     	;# 
   318  041E                     	;# 
   319  041F                     	;# 
   320  048C                     	;# 
   321  048C                     	;# 
   322  048D                     	;# 
   323  048E                     	;# 
   324  048F                     	;# 
   325  048F                     	;# 
   326  0490                     	;# 
   327  0491                     	;# 
   328  0492                     	;# 
   329  0492                     	;# 
   330  0493                     	;# 
   331  0494                     	;# 
   332  0495                     	;# 
   333  0495                     	;# 
   334  0496                     	;# 
   335  0497                     	;# 
   336  0498                     	;# 
   337  0499                     	;# 
   338  049A                     	;# 
   339  049B                     	;# 
   340  049C                     	;# 
   341  049D                     	;# 
   342  050C                     	;# 
   343  050C                     	;# 
   344  050D                     	;# 
   345  050E                     	;# 
   346  050F                     	;# 
   347  050F                     	;# 
   348  0510                     	;# 
   349  0511                     	;# 
   350  0512                     	;# 
   351  0512                     	;# 
   352  0513                     	;# 
   353  0514                     	;# 
   354  0515                     	;# 
   355  0515                     	;# 
   356  0516                     	;# 
   357  0517                     	;# 
   358  0518                     	;# 
   359  0519                     	;# 
   360  051A                     	;# 
   361  051B                     	;# 
   362  051C                     	;# 
   363  051D                     	;# 
   364  058C                     	;# 
   365  058C                     	;# 
   366  058D                     	;# 
   367  058E                     	;# 
   368  058F                     	;# 
   369  058F                     	;# 
   370  0590                     	;# 
   371  0591                     	;# 
   372  0592                     	;# 
   373  0593                     	;# 
   374  060C                     	;# 
   375  060D                     	;# 
   376  060E                     	;# 
   377  060F                     	;# 
   378  0610                     	;# 
   379  0611                     	;# 
   380  0612                     	;# 
   381  0613                     	;# 
   382  0614                     	;# 
   383  0616                     	;# 
   384  0617                     	;# 
   385  0618                     	;# 
   386  0619                     	;# 
   387  061A                     	;# 
   388  061B                     	;# 
   389  061C                     	;# 
   390  061D                     	;# 
   391  061E                     	;# 
   392  068C                     	;# 
   393  068D                     	;# 
   394  068E                     	;# 
   395  068F                     	;# 
   396  0690                     	;# 
   397  0691                     	;# 
   398  0692                     	;# 
   399  0693                     	;# 
   400  0694                     	;# 
   401  070C                     	;# 
   402  070D                     	;# 
   403  070E                     	;# 
   404  070F                     	;# 
   405  0710                     	;# 
   406  0711                     	;# 
   407  0712                     	;# 
   408  0713                     	;# 
   409  0714                     	;# 
   410  0716                     	;# 
   411  0717                     	;# 
   412  0718                     	;# 
   413  0719                     	;# 
   414  071A                     	;# 
   415  071B                     	;# 
   416  071C                     	;# 
   417  071D                     	;# 
   418  071E                     	;# 
   419  0796                     	;# 
   420  0797                     	;# 
   421  0798                     	;# 
   422  0799                     	;# 
   423  079A                     	;# 
   424  079B                     	;# 
   425  080C                     	;# 
   426  080D                     	;# 
   427  080E                     	;# 
   428  080F                     	;# 
   429  0810                     	;# 
   430  0811                     	;# 
   431  0812                     	;# 
   432  0813                     	;# 
   433  0814                     	;# 
   434  081A                     	;# 
   435  081B                     	;# 
   436  081C                     	;# 
   437  081D                     	;# 
   438  081E                     	;# 
   439  081F                     	;# 
   440  088C                     	;# 
   441  088D                     	;# 
   442  088E                     	;# 
   443  088F                     	;# 
   444  0890                     	;# 
   445  0891                     	;# 
   446  0892                     	;# 
   447  0893                     	;# 
   448  0895                     	;# 
   449  0896                     	;# 
   450  0897                     	;# 
   451  0898                     	;# 
   452  0899                     	;# 
   453  089A                     	;# 
   454  089B                     	;# 
   455  090C                     	;# 
   456  090E                     	;# 
   457  090F                     	;# 
   458  091F                     	;# 
   459  091F                     	;# 
   460  098F                     	;# 
   461  098F                     	;# 
   462  0990                     	;# 
   463  0991                     	;# 
   464  0992                     	;# 
   465  0993                     	;# 
   466  0994                     	;# 
   467  0995                     	;# 
   468  0996                     	;# 
   469  0997                     	;# 
   470  0E0F                     	;# 
   471  0E10                     	;# 
   472  0E11                     	;# 
   473  0E12                     	;# 
   474  0E13                     	;# 
   475  0E14                     	;# 
   476  0E15                     	;# 
   477  0E16                     	;# 
   478  0E17                     	;# 
   479  0E18                     	;# 
   480  0E19                     	;# 
   481  0E1A                     	;# 
   482  0E1B                     	;# 
   483  0E1C                     	;# 
   484  0E1D                     	;# 
   485  0E1E                     	;# 
   486  0E1F                     	;# 
   487  0E20                     	;# 
   488  0E21                     	;# 
   489  0E22                     	;# 
   490  0E23                     	;# 
   491  0E24                     	;# 
   492  0E25                     	;# 
   493  0E26                     	;# 
   494  0E27                     	;# 
   495  0E28                     	;# 
   496  0E29                     	;# 
   497  0E2A                     	;# 
   498  0E2B                     	;# 
   499  0E2C                     	;# 
   500  0E2D                     	;# 
   501  0E2E                     	;# 
   502  0E2F                     	;# 
   503  0E30                     	;# 
   504  0E31                     	;# 
   505  0E32                     	;# 
   506  0E33                     	;# 
   507  0E34                     	;# 
   508  0E35                     	;# 
   509  0E36                     	;# 
   510  0E37                     	;# 
   511  0E8F                     	;# 
   512  0E90                     	;# 
   513  0E91                     	;# 
   514  0E92                     	;# 
   515  0E93                     	;# 
   516  0E94                     	;# 
   517  0E95                     	;# 
   518  0E96                     	;# 
   519  0E97                     	;# 
   520  0E9C                     	;# 
   521  0E9D                     	;# 
   522  0E9E                     	;# 
   523  0EA1                     	;# 
   524  0EA2                     	;# 
   525  0EA3                     	;# 
   526  0EA4                     	;# 
   527  0EA5                     	;# 
   528  0EA9                     	;# 
   529  0EAA                     	;# 
   530  0EAB                     	;# 
   531  0EAC                     	;# 
   532  0EB1                     	;# 
   533  0EB2                     	;# 
   534  0EB3                     	;# 
   535  0EB8                     	;# 
   536  0EB9                     	;# 
   537  0EBA                     	;# 
   538  0EBB                     	;# 
   539  0EBC                     	;# 
   540  0EBD                     	;# 
   541  0EBE                     	;# 
   542  0EC3                     	;# 
   543  0EC5                     	;# 
   544  0EC6                     	;# 
   545  0EC7                     	;# 
   546  0EC8                     	;# 
   547  0EC9                     	;# 
   548  0ECA                     	;# 
   549  0ECB                     	;# 
   550  0ECC                     	;# 
   551  0F10                     	;# 
   552  0F11                     	;# 
   553  0F12                     	;# 
   554  0F13                     	;# 
   555  0F14                     	;# 
   556  0F15                     	;# 
   557  0F16                     	;# 
   558  0F17                     	;# 
   559  0F18                     	;# 
   560  0F19                     	;# 
   561  0F1A                     	;# 
   562  0F1B                     	;# 
   563  0F1C                     	;# 
   564  0F1D                     	;# 
   565  0F1E                     	;# 
   566  0F1F                     	;# 
   567  0F20                     	;# 
   568  0F21                     	;# 
   569  0F22                     	;# 
   570  0F23                     	;# 
   571  0F24                     	;# 
   572  0F25                     	;# 
   573  0F26                     	;# 
   574  0F27                     	;# 
   575  0F38                     	;# 
   576  0F39                     	;# 
   577  0F3A                     	;# 
   578  0F3B                     	;# 
   579  0F3C                     	;# 
   580  0F3D                     	;# 
   581  0F3E                     	;# 
   582  0F3F                     	;# 
   583  0F40                     	;# 
   584  0F41                     	;# 
   585  0F43                     	;# 
   586  0F44                     	;# 
   587  0F45                     	;# 
   588  0F46                     	;# 
   589  0F47                     	;# 
   590  0F48                     	;# 
   591  0F49                     	;# 
   592  0F4A                     	;# 
   593  0F4B                     	;# 
   594  0F4C                     	;# 
   595  0F4E                     	;# 
   596  0F4F                     	;# 
   597  0F50                     	;# 
   598  0F51                     	;# 
   599  0F52                     	;# 
   600  0F53                     	;# 
   601  0F54                     	;# 
   602  0F55                     	;# 
   603  0F56                     	;# 
   604  0F57                     	;# 
   605  0F65                     	;# 
   606  0F68                     	;# 
   607  0F69                     	;# 
   608  0F6A                     	;# 
   609  0F6B                     	;# 
   610  0FE4                     	;# 
   611  0FE5                     	;# 
   612  0FE6                     	;# 
   613  0FE7                     	;# 
   614  0FE8                     	;# 
   615  0FE9                     	;# 
   616  0FEA                     	;# 
   617  0FEB                     	;# 
   618  0FED                     	;# 
   619  0FEE                     	;# 
   620  0FEF                     	;# 
   621  0000                     	;# 
   622  0001                     	;# 
   623  0002                     	;# 
   624  0003                     	;# 
   625  0004                     	;# 
   626  0005                     	;# 
   627  0006                     	;# 
   628  0007                     	;# 
   629  0008                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  0010                     	;# 
   637  0011                     	;# 
   638  0012                     	;# 
   639  0013                     	;# 
   640  0016                     	;# 
   641  0017                     	;# 
   642  0018                     	;# 
   643  001C                     	;# 
   644  001C                     	;# 
   645  001D                     	;# 
   646  001D                     	;# 
   647  001E                     	;# 
   648  001F                     	;# 
   649  008C                     	;# 
   650  008C                     	;# 
   651  008D                     	;# 
   652  008E                     	;# 
   653  008E                     	;# 
   654  008F                     	;# 
   655  0090                     	;# 
   656  0090                     	;# 
   657  0091                     	;# 
   658  0093                     	;# 
   659  0094                     	;# 
   660  0095                     	;# 
   661  0096                     	;# 
   662  0097                     	;# 
   663  0098                     	;# 
   664  0099                     	;# 
   665  009A                     	;# 
   666  009B                     	;# 
   667  009C                     	;# 
   668  009D                     	;# 
   669  009E                     	;# 
   670  010C                     	;# 
   671  010D                     	;# 
   672  010E                     	;# 
   673  010E                     	;# 
   674  010F                     	;# 
   675  0110                     	;# 
   676  0110                     	;# 
   677  0111                     	;# 
   678  0112                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0114                     	;# 
   683  0115                     	;# 
   684  0116                     	;# 
   685  0116                     	;# 
   686  0117                     	;# 
   687  0119                     	;# 
   688  0119                     	;# 
   689  0119                     	;# 
   690  011A                     	;# 
   691  011A                     	;# 
   692  011A                     	;# 
   693  011B                     	;# 
   694  011B                     	;# 
   695  011B                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011C                     	;# 
   699  011C                     	;# 
   700  011C                     	;# 
   701  011D                     	;# 
   702  011D                     	;# 
   703  011D                     	;# 
   704  011E                     	;# 
   705  011E                     	;# 
   706  011E                     	;# 
   707  011F                     	;# 
   708  011F                     	;# 
   709  011F                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  018C                     	;# 
   713  018D                     	;# 
   714  018E                     	;# 
   715  018F                     	;# 
   716  0190                     	;# 
   717  0191                     	;# 
   718  0192                     	;# 
   719  0196                     	;# 
   720  0197                     	;# 
   721  0198                     	;# 
   722  0199                     	;# 
   723  019A                     	;# 
   724  019B                     	;# 
   725  019C                     	;# 
   726  020C                     	;# 
   727  020C                     	;# 
   728  020D                     	;# 
   729  020E                     	;# 
   730  020F                     	;# 
   731  020F                     	;# 
   732  0210                     	;# 
   733  0210                     	;# 
   734  0211                     	;# 
   735  0211                     	;# 
   736  0212                     	;# 
   737  0212                     	;# 
   738  0213                     	;# 
   739  0214                     	;# 
   740  0215                     	;# 
   741  0215                     	;# 
   742  0216                     	;# 
   743  0216                     	;# 
   744  0217                     	;# 
   745  0217                     	;# 
   746  0218                     	;# 
   747  0218                     	;# 
   748  0219                     	;# 
   749  021A                     	;# 
   750  021B                     	;# 
   751  021B                     	;# 
   752  021C                     	;# 
   753  021C                     	;# 
   754  021D                     	;# 
   755  021D                     	;# 
   756  021E                     	;# 
   757  021F                     	;# 
   758  028C                     	;# 
   759  028C                     	;# 
   760  028D                     	;# 
   761  028D                     	;# 
   762  028E                     	;# 
   763  028F                     	;# 
   764  0290                     	;# 
   765  0290                     	;# 
   766  0291                     	;# 
   767  0292                     	;# 
   768  0292                     	;# 
   769  0293                     	;# 
   770  0293                     	;# 
   771  0294                     	;# 
   772  0295                     	;# 
   773  0296                     	;# 
   774  0296                     	;# 
   775  0297                     	;# 
   776  0298                     	;# 
   777  0298                     	;# 
   778  0299                     	;# 
   779  0299                     	;# 
   780  029A                     	;# 
   781  029B                     	;# 
   782  029C                     	;# 
   783  029C                     	;# 
   784  029D                     	;# 
   785  030C                     	;# 
   786  030C                     	;# 
   787  030D                     	;# 
   788  030E                     	;# 
   789  030F                     	;# 
   790  0310                     	;# 
   791  0310                     	;# 
   792  0311                     	;# 
   793  0312                     	;# 
   794  0313                     	;# 
   795  0314                     	;# 
   796  0314                     	;# 
   797  0315                     	;# 
   798  0316                     	;# 
   799  0317                     	;# 
   800  0318                     	;# 
   801  0318                     	;# 
   802  0319                     	;# 
   803  031A                     	;# 
   804  031B                     	;# 
   805  031C                     	;# 
   806  031C                     	;# 
   807  031D                     	;# 
   808  031E                     	;# 
   809  031F                     	;# 
   810  038C                     	;# 
   811  038D                     	;# 
   812  038E                     	;# 
   813  0390                     	;# 
   814  0391                     	;# 
   815  0392                     	;# 
   816  040C                     	;# 
   817  040D                     	;# 
   818  040E                     	;# 
   819  040F                     	;# 
   820  0410                     	;# 
   821  0411                     	;# 
   822  0416                     	;# 
   823  0416                     	;# 
   824  0417                     	;# 
   825  0418                     	;# 
   826  0418                     	;# 
   827  0419                     	;# 
   828  041A                     	;# 
   829  041A                     	;# 
   830  041B                     	;# 
   831  041C                     	;# 
   832  041C                     	;# 
   833  041D                     	;# 
   834  041E                     	;# 
   835  041F                     	;# 
   836  048C                     	;# 
   837  048C                     	;# 
   838  048D                     	;# 
   839  048E                     	;# 
   840  048F                     	;# 
   841  048F                     	;# 
   842  0490                     	;# 
   843  0491                     	;# 
   844  0492                     	;# 
   845  0492                     	;# 
   846  0493                     	;# 
   847  0494                     	;# 
   848  0495                     	;# 
   849  0495                     	;# 
   850  0496                     	;# 
   851  0497                     	;# 
   852  0498                     	;# 
   853  0499                     	;# 
   854  049A                     	;# 
   855  049B                     	;# 
   856  049C                     	;# 
   857  049D                     	;# 
   858  050C                     	;# 
   859  050C                     	;# 
   860  050D                     	;# 
   861  050E                     	;# 
   862  050F                     	;# 
   863  050F                     	;# 
   864  0510                     	;# 
   865  0511                     	;# 
   866  0512                     	;# 
   867  0512                     	;# 
   868  0513                     	;# 
   869  0514                     	;# 
   870  0515                     	;# 
   871  0515                     	;# 
   872  0516                     	;# 
   873  0517                     	;# 
   874  0518                     	;# 
   875  0519                     	;# 
   876  051A                     	;# 
   877  051B                     	;# 
   878  051C                     	;# 
   879  051D                     	;# 
   880  058C                     	;# 
   881  058C                     	;# 
   882  058D                     	;# 
   883  058E                     	;# 
   884  058F                     	;# 
   885  058F                     	;# 
   886  0590                     	;# 
   887  0591                     	;# 
   888  0592                     	;# 
   889  0593                     	;# 
   890  060C                     	;# 
   891  060D                     	;# 
   892  060E                     	;# 
   893  060F                     	;# 
   894  0610                     	;# 
   895  0611                     	;# 
   896  0612                     	;# 
   897  0613                     	;# 
   898  0614                     	;# 
   899  0616                     	;# 
   900  0617                     	;# 
   901  0618                     	;# 
   902  0619                     	;# 
   903  061A                     	;# 
   904  061B                     	;# 
   905  061C                     	;# 
   906  061D                     	;# 
   907  061E                     	;# 
   908  068C                     	;# 
   909  068D                     	;# 
   910  068E                     	;# 
   911  068F                     	;# 
   912  0690                     	;# 
   913  0691                     	;# 
   914  0692                     	;# 
   915  0693                     	;# 
   916  0694                     	;# 
   917  070C                     	;# 
   918  070D                     	;# 
   919  070E                     	;# 
   920  070F                     	;# 
   921  0710                     	;# 
   922  0711                     	;# 
   923  0712                     	;# 
   924  0713                     	;# 
   925  0714                     	;# 
   926  0716                     	;# 
   927  0717                     	;# 
   928  0718                     	;# 
   929  0719                     	;# 
   930  071A                     	;# 
   931  071B                     	;# 
   932  071C                     	;# 
   933  071D                     	;# 
   934  071E                     	;# 
   935  0796                     	;# 
   936  0797                     	;# 
   937  0798                     	;# 
   938  0799                     	;# 
   939  079A                     	;# 
   940  079B                     	;# 
   941  080C                     	;# 
   942  080D                     	;# 
   943  080E                     	;# 
   944  080F                     	;# 
   945  0810                     	;# 
   946  0811                     	;# 
   947  0812                     	;# 
   948  0813                     	;# 
   949  0814                     	;# 
   950  081A                     	;# 
   951  081B                     	;# 
   952  081C                     	;# 
   953  081D                     	;# 
   954  081E                     	;# 
   955  081F                     	;# 
   956  088C                     	;# 
   957  088D                     	;# 
   958  088E                     	;# 
   959  088F                     	;# 
   960  0890                     	;# 
   961  0891                     	;# 
   962  0892                     	;# 
   963  0893                     	;# 
   964  0895                     	;# 
   965  0896                     	;# 
   966  0897                     	;# 
   967  0898                     	;# 
   968  0899                     	;# 
   969  089A                     	;# 
   970  089B                     	;# 
   971  090C                     	;# 
   972  090E                     	;# 
   973  090F                     	;# 
   974  091F                     	;# 
   975  091F                     	;# 
   976  098F                     	;# 
   977  098F                     	;# 
   978  0990                     	;# 
   979  0991                     	;# 
   980  0992                     	;# 
   981  0993                     	;# 
   982  0994                     	;# 
   983  0995                     	;# 
   984  0996                     	;# 
   985  0997                     	;# 
   986  0E0F                     	;# 
   987  0E10                     	;# 
   988  0E11                     	;# 
   989  0E12                     	;# 
   990  0E13                     	;# 
   991  0E14                     	;# 
   992  0E15                     	;# 
   993  0E16                     	;# 
   994  0E17                     	;# 
   995  0E18                     	;# 
   996  0E19                     	;# 
   997  0E1A                     	;# 
   998  0E1B                     	;# 
   999  0E1C                     	;# 
  1000  0E1D                     	;# 
  1001  0E1E                     	;# 
  1002  0E1F                     	;# 
  1003  0E20                     	;# 
  1004  0E21                     	;# 
  1005  0E22                     	;# 
  1006  0E23                     	;# 
  1007  0E24                     	;# 
  1008  0E25                     	;# 
  1009  0E26                     	;# 
  1010  0E27                     	;# 
  1011  0E28                     	;# 
  1012  0E29                     	;# 
  1013  0E2A                     	;# 
  1014  0E2B                     	;# 
  1015  0E2C                     	;# 
  1016  0E2D                     	;# 
  1017  0E2E                     	;# 
  1018  0E2F                     	;# 
  1019  0E30                     	;# 
  1020  0E31                     	;# 
  1021  0E32                     	;# 
  1022  0E33                     	;# 
  1023  0E34                     	;# 
  1024  0E35                     	;# 
  1025  0E36                     	;# 
  1026  0E37                     	;# 
  1027  0E8F                     	;# 
  1028  0E90                     	;# 
  1029  0E91                     	;# 
  1030  0E92                     	;# 
  1031  0E93                     	;# 
  1032  0E94                     	;# 
  1033  0E95                     	;# 
  1034  0E96                     	;# 
  1035  0E97                     	;# 
  1036  0E9C                     	;# 
  1037  0E9D                     	;# 
  1038  0E9E                     	;# 
  1039  0EA1                     	;# 
  1040  0EA2                     	;# 
  1041  0EA3                     	;# 
  1042  0EA4                     	;# 
  1043  0EA5                     	;# 
  1044  0EA9                     	;# 
  1045  0EAA                     	;# 
  1046  0EAB                     	;# 
  1047  0EAC                     	;# 
  1048  0EB1                     	;# 
  1049  0EB2                     	;# 
  1050  0EB3                     	;# 
  1051  0EB8                     	;# 
  1052  0EB9                     	;# 
  1053  0EBA                     	;# 
  1054  0EBB                     	;# 
  1055  0EBC                     	;# 
  1056  0EBD                     	;# 
  1057  0EBE                     	;# 
  1058  0EC3                     	;# 
  1059  0EC5                     	;# 
  1060  0EC6                     	;# 
  1061  0EC7                     	;# 
  1062  0EC8                     	;# 
  1063  0EC9                     	;# 
  1064  0ECA                     	;# 
  1065  0ECB                     	;# 
  1066  0ECC                     	;# 
  1067  0F10                     	;# 
  1068  0F11                     	;# 
  1069  0F12                     	;# 
  1070  0F13                     	;# 
  1071  0F14                     	;# 
  1072  0F15                     	;# 
  1073  0F16                     	;# 
  1074  0F17                     	;# 
  1075  0F18                     	;# 
  1076  0F19                     	;# 
  1077  0F1A                     	;# 
  1078  0F1B                     	;# 
  1079  0F1C                     	;# 
  1080  0F1D                     	;# 
  1081  0F1E                     	;# 
  1082  0F1F                     	;# 
  1083  0F20                     	;# 
  1084  0F21                     	;# 
  1085  0F22                     	;# 
  1086  0F23                     	;# 
  1087  0F24                     	;# 
  1088  0F25                     	;# 
  1089  0F26                     	;# 
  1090  0F27                     	;# 
  1091  0F38                     	;# 
  1092  0F39                     	;# 
  1093  0F3A                     	;# 
  1094  0F3B                     	;# 
  1095  0F3C                     	;# 
  1096  0F3D                     	;# 
  1097  0F3E                     	;# 
  1098  0F3F                     	;# 
  1099  0F40                     	;# 
  1100  0F41                     	;# 
  1101  0F43                     	;# 
  1102  0F44                     	;# 
  1103  0F45                     	;# 
  1104  0F46                     	;# 
  1105  0F47                     	;# 
  1106  0F48                     	;# 
  1107  0F49                     	;# 
  1108  0F4A                     	;# 
  1109  0F4B                     	;# 
  1110  0F4C                     	;# 
  1111  0F4E                     	;# 
  1112  0F4F                     	;# 
  1113  0F50                     	;# 
  1114  0F51                     	;# 
  1115  0F52                     	;# 
  1116  0F53                     	;# 
  1117  0F54                     	;# 
  1118  0F55                     	;# 
  1119  0F56                     	;# 
  1120  0F57                     	;# 
  1121  0F65                     	;# 
  1122  0F68                     	;# 
  1123  0F69                     	;# 
  1124  0F6A                     	;# 
  1125  0F6B                     	;# 
  1126  0FE4                     	;# 
  1127  0FE5                     	;# 
  1128  0FE6                     	;# 
  1129  0FE7                     	;# 
  1130  0FE8                     	;# 
  1131  0FE9                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0000                     	;# 
  1138  0001                     	;# 
  1139  0002                     	;# 
  1140  0003                     	;# 
  1141  0004                     	;# 
  1142  0005                     	;# 
  1143  0006                     	;# 
  1144  0007                     	;# 
  1145  0008                     	;# 
  1146  0009                     	;# 
  1147  000A                     	;# 
  1148  000B                     	;# 
  1149  000C                     	;# 
  1150  000D                     	;# 
  1151  000E                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0013                     	;# 
  1156  0016                     	;# 
  1157  0017                     	;# 
  1158  0018                     	;# 
  1159  001C                     	;# 
  1160  001C                     	;# 
  1161  001D                     	;# 
  1162  001D                     	;# 
  1163  001E                     	;# 
  1164  001F                     	;# 
  1165  008C                     	;# 
  1166  008C                     	;# 
  1167  008D                     	;# 
  1168  008E                     	;# 
  1169  008E                     	;# 
  1170  008F                     	;# 
  1171  0090                     	;# 
  1172  0090                     	;# 
  1173  0091                     	;# 
  1174  0093                     	;# 
  1175  0094                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0097                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009A                     	;# 
  1182  009B                     	;# 
  1183  009C                     	;# 
  1184  009D                     	;# 
  1185  009E                     	;# 
  1186  010C                     	;# 
  1187  010D                     	;# 
  1188  010E                     	;# 
  1189  010E                     	;# 
  1190  010F                     	;# 
  1191  0110                     	;# 
  1192  0110                     	;# 
  1193  0111                     	;# 
  1194  0112                     	;# 
  1195  0112                     	;# 
  1196  0113                     	;# 
  1197  0114                     	;# 
  1198  0114                     	;# 
  1199  0115                     	;# 
  1200  0116                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  0119                     	;# 
  1204  0119                     	;# 
  1205  0119                     	;# 
  1206  011A                     	;# 
  1207  011A                     	;# 
  1208  011A                     	;# 
  1209  011B                     	;# 
  1210  011B                     	;# 
  1211  011B                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011C                     	;# 
  1215  011C                     	;# 
  1216  011C                     	;# 
  1217  011D                     	;# 
  1218  011D                     	;# 
  1219  011D                     	;# 
  1220  011E                     	;# 
  1221  011E                     	;# 
  1222  011E                     	;# 
  1223  011F                     	;# 
  1224  011F                     	;# 
  1225  011F                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  018C                     	;# 
  1229  018D                     	;# 
  1230  018E                     	;# 
  1231  018F                     	;# 
  1232  0190                     	;# 
  1233  0191                     	;# 
  1234  0192                     	;# 
  1235  0196                     	;# 
  1236  0197                     	;# 
  1237  0198                     	;# 
  1238  0199                     	;# 
  1239  019A                     	;# 
  1240  019B                     	;# 
  1241  019C                     	;# 
  1242  020C                     	;# 
  1243  020C                     	;# 
  1244  020D                     	;# 
  1245  020E                     	;# 
  1246  020F                     	;# 
  1247  020F                     	;# 
  1248  0210                     	;# 
  1249  0210                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0214                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0216                     	;# 
  1259  0216                     	;# 
  1260  0217                     	;# 
  1261  0217                     	;# 
  1262  0218                     	;# 
  1263  0218                     	;# 
  1264  0219                     	;# 
  1265  021A                     	;# 
  1266  021B                     	;# 
  1267  021B                     	;# 
  1268  021C                     	;# 
  1269  021C                     	;# 
  1270  021D                     	;# 
  1271  021D                     	;# 
  1272  021E                     	;# 
  1273  021F                     	;# 
  1274  028C                     	;# 
  1275  028C                     	;# 
  1276  028D                     	;# 
  1277  028D                     	;# 
  1278  028E                     	;# 
  1279  028F                     	;# 
  1280  0290                     	;# 
  1281  0290                     	;# 
  1282  0291                     	;# 
  1283  0292                     	;# 
  1284  0292                     	;# 
  1285  0293                     	;# 
  1286  0293                     	;# 
  1287  0294                     	;# 
  1288  0295                     	;# 
  1289  0296                     	;# 
  1290  0296                     	;# 
  1291  0297                     	;# 
  1292  0298                     	;# 
  1293  0298                     	;# 
  1294  0299                     	;# 
  1295  0299                     	;# 
  1296  029A                     	;# 
  1297  029B                     	;# 
  1298  029C                     	;# 
  1299  029C                     	;# 
  1300  029D                     	;# 
  1301  030C                     	;# 
  1302  030C                     	;# 
  1303  030D                     	;# 
  1304  030E                     	;# 
  1305  030F                     	;# 
  1306  0310                     	;# 
  1307  0310                     	;# 
  1308  0311                     	;# 
  1309  0312                     	;# 
  1310  0313                     	;# 
  1311  0314                     	;# 
  1312  0314                     	;# 
  1313  0315                     	;# 
  1314  0316                     	;# 
  1315  0317                     	;# 
  1316  0318                     	;# 
  1317  0318                     	;# 
  1318  0319                     	;# 
  1319  031A                     	;# 
  1320  031B                     	;# 
  1321  031C                     	;# 
  1322  031C                     	;# 
  1323  031D                     	;# 
  1324  031E                     	;# 
  1325  031F                     	;# 
  1326  038C                     	;# 
  1327  038D                     	;# 
  1328  038E                     	;# 
  1329  0390                     	;# 
  1330  0391                     	;# 
  1331  0392                     	;# 
  1332  040C                     	;# 
  1333  040D                     	;# 
  1334  040E                     	;# 
  1335  040F                     	;# 
  1336  0410                     	;# 
  1337  0411                     	;# 
  1338  0416                     	;# 
  1339  0416                     	;# 
  1340  0417                     	;# 
  1341  0418                     	;# 
  1342  0418                     	;# 
  1343  0419                     	;# 
  1344  041A                     	;# 
  1345  041A                     	;# 
  1346  041B                     	;# 
  1347  041C                     	;# 
  1348  041C                     	;# 
  1349  041D                     	;# 
  1350  041E                     	;# 
  1351  041F                     	;# 
  1352  048C                     	;# 
  1353  048C                     	;# 
  1354  048D                     	;# 
  1355  048E                     	;# 
  1356  048F                     	;# 
  1357  048F                     	;# 
  1358  0490                     	;# 
  1359  0491                     	;# 
  1360  0492                     	;# 
  1361  0492                     	;# 
  1362  0493                     	;# 
  1363  0494                     	;# 
  1364  0495                     	;# 
  1365  0495                     	;# 
  1366  0496                     	;# 
  1367  0497                     	;# 
  1368  0498                     	;# 
  1369  0499                     	;# 
  1370  049A                     	;# 
  1371  049B                     	;# 
  1372  049C                     	;# 
  1373  049D                     	;# 
  1374  050C                     	;# 
  1375  050C                     	;# 
  1376  050D                     	;# 
  1377  050E                     	;# 
  1378  050F                     	;# 
  1379  050F                     	;# 
  1380  0510                     	;# 
  1381  0511                     	;# 
  1382  0512                     	;# 
  1383  0512                     	;# 
  1384  0513                     	;# 
  1385  0514                     	;# 
  1386  0515                     	;# 
  1387  0515                     	;# 
  1388  0516                     	;# 
  1389  0517                     	;# 
  1390  0518                     	;# 
  1391  0519                     	;# 
  1392  051A                     	;# 
  1393  051B                     	;# 
  1394  051C                     	;# 
  1395  051D                     	;# 
  1396  058C                     	;# 
  1397  058C                     	;# 
  1398  058D                     	;# 
  1399  058E                     	;# 
  1400  058F                     	;# 
  1401  058F                     	;# 
  1402  0590                     	;# 
  1403  0591                     	;# 
  1404  0592                     	;# 
  1405  0593                     	;# 
  1406  060C                     	;# 
  1407  060D                     	;# 
  1408  060E                     	;# 
  1409  060F                     	;# 
  1410  0610                     	;# 
  1411  0611                     	;# 
  1412  0612                     	;# 
  1413  0613                     	;# 
  1414  0614                     	;# 
  1415  0616                     	;# 
  1416  0617                     	;# 
  1417  0618                     	;# 
  1418  0619                     	;# 
  1419  061A                     	;# 
  1420  061B                     	;# 
  1421  061C                     	;# 
  1422  061D                     	;# 
  1423  061E                     	;# 
  1424  068C                     	;# 
  1425  068D                     	;# 
  1426  068E                     	;# 
  1427  068F                     	;# 
  1428  0690                     	;# 
  1429  0691                     	;# 
  1430  0692                     	;# 
  1431  0693                     	;# 
  1432  0694                     	;# 
  1433  070C                     	;# 
  1434  070D                     	;# 
  1435  070E                     	;# 
  1436  070F                     	;# 
  1437  0710                     	;# 
  1438  0711                     	;# 
  1439  0712                     	;# 
  1440  0713                     	;# 
  1441  0714                     	;# 
  1442  0716                     	;# 
  1443  0717                     	;# 
  1444  0718                     	;# 
  1445  0719                     	;# 
  1446  071A                     	;# 
  1447  071B                     	;# 
  1448  071C                     	;# 
  1449  071D                     	;# 
  1450  071E                     	;# 
  1451  0796                     	;# 
  1452  0797                     	;# 
  1453  0798                     	;# 
  1454  0799                     	;# 
  1455  079A                     	;# 
  1456  079B                     	;# 
  1457  080C                     	;# 
  1458  080D                     	;# 
  1459  080E                     	;# 
  1460  080F                     	;# 
  1461  0810                     	;# 
  1462  0811                     	;# 
  1463  0812                     	;# 
  1464  0813                     	;# 
  1465  0814                     	;# 
  1466  081A                     	;# 
  1467  081B                     	;# 
  1468  081C                     	;# 
  1469  081D                     	;# 
  1470  081E                     	;# 
  1471  081F                     	;# 
  1472  088C                     	;# 
  1473  088D                     	;# 
  1474  088E                     	;# 
  1475  088F                     	;# 
  1476  0890                     	;# 
  1477  0891                     	;# 
  1478  0892                     	;# 
  1479  0893                     	;# 
  1480  0895                     	;# 
  1481  0896                     	;# 
  1482  0897                     	;# 
  1483  0898                     	;# 
  1484  0899                     	;# 
  1485  089A                     	;# 
  1486  089B                     	;# 
  1487  090C                     	;# 
  1488  090E                     	;# 
  1489  090F                     	;# 
  1490  091F                     	;# 
  1491  091F                     	;# 
  1492  098F                     	;# 
  1493  098F                     	;# 
  1494  0990                     	;# 
  1495  0991                     	;# 
  1496  0992                     	;# 
  1497  0993                     	;# 
  1498  0994                     	;# 
  1499  0995                     	;# 
  1500  0996                     	;# 
  1501  0997                     	;# 
  1502  0E0F                     	;# 
  1503  0E10                     	;# 
  1504  0E11                     	;# 
  1505  0E12                     	;# 
  1506  0E13                     	;# 
  1507  0E14                     	;# 
  1508  0E15                     	;# 
  1509  0E16                     	;# 
  1510  0E17                     	;# 
  1511  0E18                     	;# 
  1512  0E19                     	;# 
  1513  0E1A                     	;# 
  1514  0E1B                     	;# 
  1515  0E1C                     	;# 
  1516  0E1D                     	;# 
  1517  0E1E                     	;# 
  1518  0E1F                     	;# 
  1519  0E20                     	;# 
  1520  0E21                     	;# 
  1521  0E22                     	;# 
  1522  0E23                     	;# 
  1523  0E24                     	;# 
  1524  0E25                     	;# 
  1525  0E26                     	;# 
  1526  0E27                     	;# 
  1527  0E28                     	;# 
  1528  0E29                     	;# 
  1529  0E2A                     	;# 
  1530  0E2B                     	;# 
  1531  0E2C                     	;# 
  1532  0E2D                     	;# 
  1533  0E2E                     	;# 
  1534  0E2F                     	;# 
  1535  0E30                     	;# 
  1536  0E31                     	;# 
  1537  0E32                     	;# 
  1538  0E33                     	;# 
  1539  0E34                     	;# 
  1540  0E35                     	;# 
  1541  0E36                     	;# 
  1542  0E37                     	;# 
  1543  0E8F                     	;# 
  1544  0E90                     	;# 
  1545  0E91                     	;# 
  1546  0E92                     	;# 
  1547  0E93                     	;# 
  1548  0E94                     	;# 
  1549  0E95                     	;# 
  1550  0E96                     	;# 
  1551  0E97                     	;# 
  1552  0E9C                     	;# 
  1553  0E9D                     	;# 
  1554  0E9E                     	;# 
  1555  0EA1                     	;# 
  1556  0EA2                     	;# 
  1557  0EA3                     	;# 
  1558  0EA4                     	;# 
  1559  0EA5                     	;# 
  1560  0EA9                     	;# 
  1561  0EAA                     	;# 
  1562  0EAB                     	;# 
  1563  0EAC                     	;# 
  1564  0EB1                     	;# 
  1565  0EB2                     	;# 
  1566  0EB3                     	;# 
  1567  0EB8                     	;# 
  1568  0EB9                     	;# 
  1569  0EBA                     	;# 
  1570  0EBB                     	;# 
  1571  0EBC                     	;# 
  1572  0EBD                     	;# 
  1573  0EBE                     	;# 
  1574  0EC3                     	;# 
  1575  0EC5                     	;# 
  1576  0EC6                     	;# 
  1577  0EC7                     	;# 
  1578  0EC8                     	;# 
  1579  0EC9                     	;# 
  1580  0ECA                     	;# 
  1581  0ECB                     	;# 
  1582  0ECC                     	;# 
  1583  0F10                     	;# 
  1584  0F11                     	;# 
  1585  0F12                     	;# 
  1586  0F13                     	;# 
  1587  0F14                     	;# 
  1588  0F15                     	;# 
  1589  0F16                     	;# 
  1590  0F17                     	;# 
  1591  0F18                     	;# 
  1592  0F19                     	;# 
  1593  0F1A                     	;# 
  1594  0F1B                     	;# 
  1595  0F1C                     	;# 
  1596  0F1D                     	;# 
  1597  0F1E                     	;# 
  1598  0F1F                     	;# 
  1599  0F20                     	;# 
  1600  0F21                     	;# 
  1601  0F22                     	;# 
  1602  0F23                     	;# 
  1603  0F24                     	;# 
  1604  0F25                     	;# 
  1605  0F26                     	;# 
  1606  0F27                     	;# 
  1607  0F38                     	;# 
  1608  0F39                     	;# 
  1609  0F3A                     	;# 
  1610  0F3B                     	;# 
  1611  0F3C                     	;# 
  1612  0F3D                     	;# 
  1613  0F3E                     	;# 
  1614  0F3F                     	;# 
  1615  0F40                     	;# 
  1616  0F41                     	;# 
  1617  0F43                     	;# 
  1618  0F44                     	;# 
  1619  0F45                     	;# 
  1620  0F46                     	;# 
  1621  0F47                     	;# 
  1622  0F48                     	;# 
  1623  0F49                     	;# 
  1624  0F4A                     	;# 
  1625  0F4B                     	;# 
  1626  0F4C                     	;# 
  1627  0F4E                     	;# 
  1628  0F4F                     	;# 
  1629  0F50                     	;# 
  1630  0F51                     	;# 
  1631  0F52                     	;# 
  1632  0F53                     	;# 
  1633  0F54                     	;# 
  1634  0F55                     	;# 
  1635  0F56                     	;# 
  1636  0F57                     	;# 
  1637  0F65                     	;# 
  1638  0F68                     	;# 
  1639  0F69                     	;# 
  1640  0F6A                     	;# 
  1641  0F6B                     	;# 
  1642  0FE4                     	;# 
  1643  0FE5                     	;# 
  1644  0FE6                     	;# 
  1645  0FE7                     	;# 
  1646  0FE8                     	;# 
  1647  0FE9                     	;# 
  1648  0FEA                     	;# 
  1649  0FEB                     	;# 
  1650  0FED                     	;# 
  1651  0FEE                     	;# 
  1652  0FEF                     	;# 
  1653  0000                     	;# 
  1654  0001                     	;# 
  1655  0002                     	;# 
  1656  0003                     	;# 
  1657  0004                     	;# 
  1658  0005                     	;# 
  1659  0006                     	;# 
  1660  0007                     	;# 
  1661  0008                     	;# 
  1662  0009                     	;# 
  1663  000A                     	;# 
  1664  000B                     	;# 
  1665  000C                     	;# 
  1666  000D                     	;# 
  1667  000E                     	;# 
  1668  0010                     	;# 
  1669  0011                     	;# 
  1670  0012                     	;# 
  1671  0013                     	;# 
  1672  0016                     	;# 
  1673  0017                     	;# 
  1674  0018                     	;# 
  1675  001C                     	;# 
  1676  001C                     	;# 
  1677  001D                     	;# 
  1678  001D                     	;# 
  1679  001E                     	;# 
  1680  001F                     	;# 
  1681  008C                     	;# 
  1682  008C                     	;# 
  1683  008D                     	;# 
  1684  008E                     	;# 
  1685  008E                     	;# 
  1686  008F                     	;# 
  1687  0090                     	;# 
  1688  0090                     	;# 
  1689  0091                     	;# 
  1690  0093                     	;# 
  1691  0094                     	;# 
  1692  0095                     	;# 
  1693  0096                     	;# 
  1694  0097                     	;# 
  1695  0098                     	;# 
  1696  0099                     	;# 
  1697  009A                     	;# 
  1698  009B                     	;# 
  1699  009C                     	;# 
  1700  009D                     	;# 
  1701  009E                     	;# 
  1702  010C                     	;# 
  1703  010D                     	;# 
  1704  010E                     	;# 
  1705  010E                     	;# 
  1706  010F                     	;# 
  1707  0110                     	;# 
  1708  0110                     	;# 
  1709  0111                     	;# 
  1710  0112                     	;# 
  1711  0112                     	;# 
  1712  0113                     	;# 
  1713  0114                     	;# 
  1714  0114                     	;# 
  1715  0115                     	;# 
  1716  0116                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  0119                     	;# 
  1720  0119                     	;# 
  1721  0119                     	;# 
  1722  011A                     	;# 
  1723  011A                     	;# 
  1724  011A                     	;# 
  1725  011B                     	;# 
  1726  011B                     	;# 
  1727  011B                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011C                     	;# 
  1731  011C                     	;# 
  1732  011C                     	;# 
  1733  011D                     	;# 
  1734  011D                     	;# 
  1735  011D                     	;# 
  1736  011E                     	;# 
  1737  011E                     	;# 
  1738  011E                     	;# 
  1739  011F                     	;# 
  1740  011F                     	;# 
  1741  011F                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  018C                     	;# 
  1745  018D                     	;# 
  1746  018E                     	;# 
  1747  018F                     	;# 
  1748  0190                     	;# 
  1749  0191                     	;# 
  1750  0192                     	;# 
  1751  0196                     	;# 
  1752  0197                     	;# 
  1753  0198                     	;# 
  1754  0199                     	;# 
  1755  019A                     	;# 
  1756  019B                     	;# 
  1757  019C                     	;# 
  1758  020C                     	;# 
  1759  020C                     	;# 
  1760  020D                     	;# 
  1761  020E                     	;# 
  1762  020F                     	;# 
  1763  020F                     	;# 
  1764  0210                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0216                     	;# 
  1775  0216                     	;# 
  1776  0217                     	;# 
  1777  0217                     	;# 
  1778  0218                     	;# 
  1779  0218                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021C                     	;# 
  1786  021D                     	;# 
  1787  021D                     	;# 
  1788  021E                     	;# 
  1789  021F                     	;# 
  1790  028C                     	;# 
  1791  028C                     	;# 
  1792  028D                     	;# 
  1793  028D                     	;# 
  1794  028E                     	;# 
  1795  028F                     	;# 
  1796  0290                     	;# 
  1797  0290                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0293                     	;# 
  1803  0294                     	;# 
  1804  0295                     	;# 
  1805  0296                     	;# 
  1806  0296                     	;# 
  1807  0297                     	;# 
  1808  0298                     	;# 
  1809  0298                     	;# 
  1810  0299                     	;# 
  1811  0299                     	;# 
  1812  029A                     	;# 
  1813  029B                     	;# 
  1814  029C                     	;# 
  1815  029C                     	;# 
  1816  029D                     	;# 
  1817  030C                     	;# 
  1818  030C                     	;# 
  1819  030D                     	;# 
  1820  030E                     	;# 
  1821  030F                     	;# 
  1822  0310                     	;# 
  1823  0310                     	;# 
  1824  0311                     	;# 
  1825  0312                     	;# 
  1826  0313                     	;# 
  1827  0314                     	;# 
  1828  0314                     	;# 
  1829  0315                     	;# 
  1830  0316                     	;# 
  1831  0317                     	;# 
  1832  0318                     	;# 
  1833  0318                     	;# 
  1834  0319                     	;# 
  1835  031A                     	;# 
  1836  031B                     	;# 
  1837  031C                     	;# 
  1838  031C                     	;# 
  1839  031D                     	;# 
  1840  031E                     	;# 
  1841  031F                     	;# 
  1842  038C                     	;# 
  1843  038D                     	;# 
  1844  038E                     	;# 
  1845  0390                     	;# 
  1846  0391                     	;# 
  1847  0392                     	;# 
  1848  040C                     	;# 
  1849  040D                     	;# 
  1850  040E                     	;# 
  1851  040F                     	;# 
  1852  0410                     	;# 
  1853  0411                     	;# 
  1854  0416                     	;# 
  1855  0416                     	;# 
  1856  0417                     	;# 
  1857  0418                     	;# 
  1858  0418                     	;# 
  1859  0419                     	;# 
  1860  041A                     	;# 
  1861  041A                     	;# 
  1862  041B                     	;# 
  1863  041C                     	;# 
  1864  041C                     	;# 
  1865  041D                     	;# 
  1866  041E                     	;# 
  1867  041F                     	;# 
  1868  048C                     	;# 
  1869  048C                     	;# 
  1870  048D                     	;# 
  1871  048E                     	;# 
  1872  048F                     	;# 
  1873  048F                     	;# 
  1874  0490                     	;# 
  1875  0491                     	;# 
  1876  0492                     	;# 
  1877  0492                     	;# 
  1878  0493                     	;# 
  1879  0494                     	;# 
  1880  0495                     	;# 
  1881  0495                     	;# 
  1882  0496                     	;# 
  1883  0497                     	;# 
  1884  0498                     	;# 
  1885  0499                     	;# 
  1886  049A                     	;# 
  1887  049B                     	;# 
  1888  049C                     	;# 
  1889  049D                     	;# 
  1890  050C                     	;# 
  1891  050C                     	;# 
  1892  050D                     	;# 
  1893  050E                     	;# 
  1894  050F                     	;# 
  1895  050F                     	;# 
  1896  0510                     	;# 
  1897  0511                     	;# 
  1898  0512                     	;# 
  1899  0512                     	;# 
  1900  0513                     	;# 
  1901  0514                     	;# 
  1902  0515                     	;# 
  1903  0515                     	;# 
  1904  0516                     	;# 
  1905  0517                     	;# 
  1906  0518                     	;# 
  1907  0519                     	;# 
  1908  051A                     	;# 
  1909  051B                     	;# 
  1910  051C                     	;# 
  1911  051D                     	;# 
  1912  058C                     	;# 
  1913  058C                     	;# 
  1914  058D                     	;# 
  1915  058E                     	;# 
  1916  058F                     	;# 
  1917  058F                     	;# 
  1918  0590                     	;# 
  1919  0591                     	;# 
  1920  0592                     	;# 
  1921  0593                     	;# 
  1922  060C                     	;# 
  1923  060D                     	;# 
  1924  060E                     	;# 
  1925  060F                     	;# 
  1926  0610                     	;# 
  1927  0611                     	;# 
  1928  0612                     	;# 
  1929  0613                     	;# 
  1930  0614                     	;# 
  1931  0616                     	;# 
  1932  0617                     	;# 
  1933  0618                     	;# 
  1934  0619                     	;# 
  1935  061A                     	;# 
  1936  061B                     	;# 
  1937  061C                     	;# 
  1938  061D                     	;# 
  1939  061E                     	;# 
  1940  068C                     	;# 
  1941  068D                     	;# 
  1942  068E                     	;# 
  1943  068F                     	;# 
  1944  0690                     	;# 
  1945  0691                     	;# 
  1946  0692                     	;# 
  1947  0693                     	;# 
  1948  0694                     	;# 
  1949  070C                     	;# 
  1950  070D                     	;# 
  1951  070E                     	;# 
  1952  070F                     	;# 
  1953  0710                     	;# 
  1954  0711                     	;# 
  1955  0712                     	;# 
  1956  0713                     	;# 
  1957  0714                     	;# 
  1958  0716                     	;# 
  1959  0717                     	;# 
  1960  0718                     	;# 
  1961  0719                     	;# 
  1962  071A                     	;# 
  1963  071B                     	;# 
  1964  071C                     	;# 
  1965  071D                     	;# 
  1966  071E                     	;# 
  1967  0796                     	;# 
  1968  0797                     	;# 
  1969  0798                     	;# 
  1970  0799                     	;# 
  1971  079A                     	;# 
  1972  079B                     	;# 
  1973  080C                     	;# 
  1974  080D                     	;# 
  1975  080E                     	;# 
  1976  080F                     	;# 
  1977  0810                     	;# 
  1978  0811                     	;# 
  1979  0812                     	;# 
  1980  0813                     	;# 
  1981  0814                     	;# 
  1982  081A                     	;# 
  1983  081B                     	;# 
  1984  081C                     	;# 
  1985  081D                     	;# 
  1986  081E                     	;# 
  1987  081F                     	;# 
  1988  088C                     	;# 
  1989  088D                     	;# 
  1990  088E                     	;# 
  1991  088F                     	;# 
  1992  0890                     	;# 
  1993  0891                     	;# 
  1994  0892                     	;# 
  1995  0893                     	;# 
  1996  0895                     	;# 
  1997  0896                     	;# 
  1998  0897                     	;# 
  1999  0898                     	;# 
  2000  0899                     	;# 
  2001  089A                     	;# 
  2002  089B                     	;# 
  2003  090C                     	;# 
  2004  090E                     	;# 
  2005  090F                     	;# 
  2006  091F                     	;# 
  2007  091F                     	;# 
  2008  098F                     	;# 
  2009  098F                     	;# 
  2010  0990                     	;# 
  2011  0991                     	;# 
  2012  0992                     	;# 
  2013  0993                     	;# 
  2014  0994                     	;# 
  2015  0995                     	;# 
  2016  0996                     	;# 
  2017  0997                     	;# 
  2018  0E0F                     	;# 
  2019  0E10                     	;# 
  2020  0E11                     	;# 
  2021  0E12                     	;# 
  2022  0E13                     	;# 
  2023  0E14                     	;# 
  2024  0E15                     	;# 
  2025  0E16                     	;# 
  2026  0E17                     	;# 
  2027  0E18                     	;# 
  2028  0E19                     	;# 
  2029  0E1A                     	;# 
  2030  0E1B                     	;# 
  2031  0E1C                     	;# 
  2032  0E1D                     	;# 
  2033  0E1E                     	;# 
  2034  0E1F                     	;# 
  2035  0E20                     	;# 
  2036  0E21                     	;# 
  2037  0E22                     	;# 
  2038  0E23                     	;# 
  2039  0E24                     	;# 
  2040  0E25                     	;# 
  2041  0E26                     	;# 
  2042  0E27                     	;# 
  2043  0E28                     	;# 
  2044  0E29                     	;# 
  2045  0E2A                     	;# 
  2046  0E2B                     	;# 
  2047  0E2C                     	;# 
  2048  0E2D                     	;# 
  2049  0E2E                     	;# 
  2050  0E2F                     	;# 
  2051  0E30                     	;# 
  2052  0E31                     	;# 
  2053  0E32                     	;# 
  2054  0E33                     	;# 
  2055  0E34                     	;# 
  2056  0E35                     	;# 
  2057  0E36                     	;# 
  2058  0E37                     	;# 
  2059  0E8F                     	;# 
  2060  0E90                     	;# 
  2061  0E91                     	;# 
  2062  0E92                     	;# 
  2063  0E93                     	;# 
  2064  0E94                     	;# 
  2065  0E95                     	;# 
  2066  0E96                     	;# 
  2067  0E97                     	;# 
  2068  0E9C                     	;# 
  2069  0E9D                     	;# 
  2070  0E9E                     	;# 
  2071  0EA1                     	;# 
  2072  0EA2                     	;# 
  2073  0EA3                     	;# 
  2074  0EA4                     	;# 
  2075  0EA5                     	;# 
  2076  0EA9                     	;# 
  2077  0EAA                     	;# 
  2078  0EAB                     	;# 
  2079  0EAC                     	;# 
  2080  0EB1                     	;# 
  2081  0EB2                     	;# 
  2082  0EB3                     	;# 
  2083  0EB8                     	;# 
  2084  0EB9                     	;# 
  2085  0EBA                     	;# 
  2086  0EBB                     	;# 
  2087  0EBC                     	;# 
  2088  0EBD                     	;# 
  2089  0EBE                     	;# 
  2090  0EC3                     	;# 
  2091  0EC5                     	;# 
  2092  0EC6                     	;# 
  2093  0EC7                     	;# 
  2094  0EC8                     	;# 
  2095  0EC9                     	;# 
  2096  0ECA                     	;# 
  2097  0ECB                     	;# 
  2098  0ECC                     	;# 
  2099  0F10                     	;# 
  2100  0F11                     	;# 
  2101  0F12                     	;# 
  2102  0F13                     	;# 
  2103  0F14                     	;# 
  2104  0F15                     	;# 
  2105  0F16                     	;# 
  2106  0F17                     	;# 
  2107  0F18                     	;# 
  2108  0F19                     	;# 
  2109  0F1A                     	;# 
  2110  0F1B                     	;# 
  2111  0F1C                     	;# 
  2112  0F1D                     	;# 
  2113  0F1E                     	;# 
  2114  0F1F                     	;# 
  2115  0F20                     	;# 
  2116  0F21                     	;# 
  2117  0F22                     	;# 
  2118  0F23                     	;# 
  2119  0F24                     	;# 
  2120  0F25                     	;# 
  2121  0F26                     	;# 
  2122  0F27                     	;# 
  2123  0F38                     	;# 
  2124  0F39                     	;# 
  2125  0F3A                     	;# 
  2126  0F3B                     	;# 
  2127  0F3C                     	;# 
  2128  0F3D                     	;# 
  2129  0F3E                     	;# 
  2130  0F3F                     	;# 
  2131  0F40                     	;# 
  2132  0F41                     	;# 
  2133  0F43                     	;# 
  2134  0F44                     	;# 
  2135  0F45                     	;# 
  2136  0F46                     	;# 
  2137  0F47                     	;# 
  2138  0F48                     	;# 
  2139  0F49                     	;# 
  2140  0F4A                     	;# 
  2141  0F4B                     	;# 
  2142  0F4C                     	;# 
  2143  0F4E                     	;# 
  2144  0F4F                     	;# 
  2145  0F50                     	;# 
  2146  0F51                     	;# 
  2147  0F52                     	;# 
  2148  0F53                     	;# 
  2149  0F54                     	;# 
  2150  0F55                     	;# 
  2151  0F56                     	;# 
  2152  0F57                     	;# 
  2153  0F65                     	;# 
  2154  0F68                     	;# 
  2155  0F69                     	;# 
  2156  0F6A                     	;# 
  2157  0F6B                     	;# 
  2158  0FE4                     	;# 
  2159  0FE5                     	;# 
  2160  0FE6                     	;# 
  2161  0FE7                     	;# 
  2162  0FE8                     	;# 
  2163  0FE9                     	;# 
  2164  0FEA                     	;# 
  2165  0FEB                     	;# 
  2166  0FED                     	;# 
  2167  0FEE                     	;# 
  2168  0FEF                     	;# 
  2169  0000                     	;# 
  2170  0001                     	;# 
  2171  0002                     	;# 
  2172  0003                     	;# 
  2173  0004                     	;# 
  2174  0005                     	;# 
  2175  0006                     	;# 
  2176  0007                     	;# 
  2177  0008                     	;# 
  2178  0009                     	;# 
  2179  000A                     	;# 
  2180  000B                     	;# 
  2181  000C                     	;# 
  2182  000D                     	;# 
  2183  000E                     	;# 
  2184  0010                     	;# 
  2185  0011                     	;# 
  2186  0012                     	;# 
  2187  0013                     	;# 
  2188  0016                     	;# 
  2189  0017                     	;# 
  2190  0018                     	;# 
  2191  001C                     	;# 
  2192  001C                     	;# 
  2193  001D                     	;# 
  2194  001D                     	;# 
  2195  001E                     	;# 
  2196  001F                     	;# 
  2197  008C                     	;# 
  2198  008C                     	;# 
  2199  008D                     	;# 
  2200  008E                     	;# 
  2201  008E                     	;# 
  2202  008F                     	;# 
  2203  0090                     	;# 
  2204  0090                     	;# 
  2205  0091                     	;# 
  2206  0093                     	;# 
  2207  0094                     	;# 
  2208  0095                     	;# 
  2209  0096                     	;# 
  2210  0097                     	;# 
  2211  0098                     	;# 
  2212  0099                     	;# 
  2213  009A                     	;# 
  2214  009B                     	;# 
  2215  009C                     	;# 
  2216  009D                     	;# 
  2217  009E                     	;# 
  2218  010C                     	;# 
  2219  010D                     	;# 
  2220  010E                     	;# 
  2221  010E                     	;# 
  2222  010F                     	;# 
  2223  0110                     	;# 
  2224  0110                     	;# 
  2225  0111                     	;# 
  2226  0112                     	;# 
  2227  0112                     	;# 
  2228  0113                     	;# 
  2229  0114                     	;# 
  2230  0114                     	;# 
  2231  0115                     	;# 
  2232  0116                     	;# 
  2233  0116                     	;# 
  2234  0117                     	;# 
  2235  0119                     	;# 
  2236  0119                     	;# 
  2237  0119                     	;# 
  2238  011A                     	;# 
  2239  011A                     	;# 
  2240  011A                     	;# 
  2241  011B                     	;# 
  2242  011B                     	;# 
  2243  011B                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011C                     	;# 
  2247  011C                     	;# 
  2248  011C                     	;# 
  2249  011D                     	;# 
  2250  011D                     	;# 
  2251  011D                     	;# 
  2252  011E                     	;# 
  2253  011E                     	;# 
  2254  011E                     	;# 
  2255  011F                     	;# 
  2256  011F                     	;# 
  2257  011F                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  018C                     	;# 
  2261  018D                     	;# 
  2262  018E                     	;# 
  2263  018F                     	;# 
  2264  0190                     	;# 
  2265  0191                     	;# 
  2266  0192                     	;# 
  2267  0196                     	;# 
  2268  0197                     	;# 
  2269  0198                     	;# 
  2270  0199                     	;# 
  2271  019A                     	;# 
  2272  019B                     	;# 
  2273  019C                     	;# 
  2274  020C                     	;# 
  2275  020C                     	;# 
  2276  020D                     	;# 
  2277  020E                     	;# 
  2278  020F                     	;# 
  2279  020F                     	;# 
  2280  0210                     	;# 
  2281  0210                     	;# 
  2282  0211                     	;# 
  2283  0211                     	;# 
  2284  0212                     	;# 
  2285  0212                     	;# 
  2286  0213                     	;# 
  2287  0214                     	;# 
  2288  0215                     	;# 
  2289  0215                     	;# 
  2290  0216                     	;# 
  2291  0216                     	;# 
  2292  0217                     	;# 
  2293  0217                     	;# 
  2294  0218                     	;# 
  2295  0218                     	;# 
  2296  0219                     	;# 
  2297  021A                     	;# 
  2298  021B                     	;# 
  2299  021B                     	;# 
  2300  021C                     	;# 
  2301  021C                     	;# 
  2302  021D                     	;# 
  2303  021D                     	;# 
  2304  021E                     	;# 
  2305  021F                     	;# 
  2306  028C                     	;# 
  2307  028C                     	;# 
  2308  028D                     	;# 
  2309  028D                     	;# 
  2310  028E                     	;# 
  2311  028F                     	;# 
  2312  0290                     	;# 
  2313  0290                     	;# 
  2314  0291                     	;# 
  2315  0292                     	;# 
  2316  0292                     	;# 
  2317  0293                     	;# 
  2318  0293                     	;# 
  2319  0294                     	;# 
  2320  0295                     	;# 
  2321  0296                     	;# 
  2322  0296                     	;# 
  2323  0297                     	;# 
  2324  0298                     	;# 
  2325  0298                     	;# 
  2326  0299                     	;# 
  2327  0299                     	;# 
  2328  029A                     	;# 
  2329  029B                     	;# 
  2330  029C                     	;# 
  2331  029C                     	;# 
  2332  029D                     	;# 
  2333  030C                     	;# 
  2334  030C                     	;# 
  2335  030D                     	;# 
  2336  030E                     	;# 
  2337  030F                     	;# 
  2338  0310                     	;# 
  2339  0310                     	;# 
  2340  0311                     	;# 
  2341  0312                     	;# 
  2342  0313                     	;# 
  2343  0314                     	;# 
  2344  0314                     	;# 
  2345  0315                     	;# 
  2346  0316                     	;# 
  2347  0317                     	;# 
  2348  0318                     	;# 
  2349  0318                     	;# 
  2350  0319                     	;# 
  2351  031A                     	;# 
  2352  031B                     	;# 
  2353  031C                     	;# 
  2354  031C                     	;# 
  2355  031D                     	;# 
  2356  031E                     	;# 
  2357  031F                     	;# 
  2358  038C                     	;# 
  2359  038D                     	;# 
  2360  038E                     	;# 
  2361  0390                     	;# 
  2362  0391                     	;# 
  2363  0392                     	;# 
  2364  040C                     	;# 
  2365  040D                     	;# 
  2366  040E                     	;# 
  2367  040F                     	;# 
  2368  0410                     	;# 
  2369  0411                     	;# 
  2370  0416                     	;# 
  2371  0416                     	;# 
  2372  0417                     	;# 
  2373  0418                     	;# 
  2374  0418                     	;# 
  2375  0419                     	;# 
  2376  041A                     	;# 
  2377  041A                     	;# 
  2378  041B                     	;# 
  2379  041C                     	;# 
  2380  041C                     	;# 
  2381  041D                     	;# 
  2382  041E                     	;# 
  2383  041F                     	;# 
  2384  048C                     	;# 
  2385  048C                     	;# 
  2386  048D                     	;# 
  2387  048E                     	;# 
  2388  048F                     	;# 
  2389  048F                     	;# 
  2390  0490                     	;# 
  2391  0491                     	;# 
  2392  0492                     	;# 
  2393  0492                     	;# 
  2394  0493                     	;# 
  2395  0494                     	;# 
  2396  0495                     	;# 
  2397  0495                     	;# 
  2398  0496                     	;# 
  2399  0497                     	;# 
  2400  0498                     	;# 
  2401  0499                     	;# 
  2402  049A                     	;# 
  2403  049B                     	;# 
  2404  049C                     	;# 
  2405  049D                     	;# 
  2406  050C                     	;# 
  2407  050C                     	;# 
  2408  050D                     	;# 
  2409  050E                     	;# 
  2410  050F                     	;# 
  2411  050F                     	;# 
  2412  0510                     	;# 
  2413  0511                     	;# 
  2414  0512                     	;# 
  2415  0512                     	;# 
  2416  0513                     	;# 
  2417  0514                     	;# 
  2418  0515                     	;# 
  2419  0515                     	;# 
  2420  0516                     	;# 
  2421  0517                     	;# 
  2422  0518                     	;# 
  2423  0519                     	;# 
  2424  051A                     	;# 
  2425  051B                     	;# 
  2426  051C                     	;# 
  2427  051D                     	;# 
  2428  058C                     	;# 
  2429  058C                     	;# 
  2430  058D                     	;# 
  2431  058E                     	;# 
  2432  058F                     	;# 
  2433  058F                     	;# 
  2434  0590                     	;# 
  2435  0591                     	;# 
  2436  0592                     	;# 
  2437  0593                     	;# 
  2438  060C                     	;# 
  2439  060D                     	;# 
  2440  060E                     	;# 
  2441  060F                     	;# 
  2442  0610                     	;# 
  2443  0611                     	;# 
  2444  0612                     	;# 
  2445  0613                     	;# 
  2446  0614                     	;# 
  2447  0616                     	;# 
  2448  0617                     	;# 
  2449  0618                     	;# 
  2450  0619                     	;# 
  2451  061A                     	;# 
  2452  061B                     	;# 
  2453  061C                     	;# 
  2454  061D                     	;# 
  2455  061E                     	;# 
  2456  068C                     	;# 
  2457  068D                     	;# 
  2458  068E                     	;# 
  2459  068F                     	;# 
  2460  0690                     	;# 
  2461  0691                     	;# 
  2462  0692                     	;# 
  2463  0693                     	;# 
  2464  0694                     	;# 
  2465  070C                     	;# 
  2466  070D                     	;# 
  2467  070E                     	;# 
  2468  070F                     	;# 
  2469  0710                     	;# 
  2470  0711                     	;# 
  2471  0712                     	;# 
  2472  0713                     	;# 
  2473  0714                     	;# 
  2474  0716                     	;# 
  2475  0717                     	;# 
  2476  0718                     	;# 
  2477  0719                     	;# 
  2478  071A                     	;# 
  2479  071B                     	;# 
  2480  071C                     	;# 
  2481  071D                     	;# 
  2482  071E                     	;# 
  2483  0796                     	;# 
  2484  0797                     	;# 
  2485  0798                     	;# 
  2486  0799                     	;# 
  2487  079A                     	;# 
  2488  079B                     	;# 
  2489  080C                     	;# 
  2490  080D                     	;# 
  2491  080E                     	;# 
  2492  080F                     	;# 
  2493  0810                     	;# 
  2494  0811                     	;# 
  2495  0812                     	;# 
  2496  0813                     	;# 
  2497  0814                     	;# 
  2498  081A                     	;# 
  2499  081B                     	;# 
  2500  081C                     	;# 
  2501  081D                     	;# 
  2502  081E                     	;# 
  2503  081F                     	;# 
  2504  088C                     	;# 
  2505  088D                     	;# 
  2506  088E                     	;# 
  2507  088F                     	;# 
  2508  0890                     	;# 
  2509  0891                     	;# 
  2510  0892                     	;# 
  2511  0893                     	;# 
  2512  0895                     	;# 
  2513  0896                     	;# 
  2514  0897                     	;# 
  2515  0898                     	;# 
  2516  0899                     	;# 
  2517  089A                     	;# 
  2518  089B                     	;# 
  2519  090C                     	;# 
  2520  090E                     	;# 
  2521  090F                     	;# 
  2522  091F                     	;# 
  2523  091F                     	;# 
  2524  098F                     	;# 
  2525  098F                     	;# 
  2526  0990                     	;# 
  2527  0991                     	;# 
  2528  0992                     	;# 
  2529  0993                     	;# 
  2530  0994                     	;# 
  2531  0995                     	;# 
  2532  0996                     	;# 
  2533  0997                     	;# 
  2534  0E0F                     	;# 
  2535  0E10                     	;# 
  2536  0E11                     	;# 
  2537  0E12                     	;# 
  2538  0E13                     	;# 
  2539  0E14                     	;# 
  2540  0E15                     	;# 
  2541  0E16                     	;# 
  2542  0E17                     	;# 
  2543  0E18                     	;# 
  2544  0E19                     	;# 
  2545  0E1A                     	;# 
  2546  0E1B                     	;# 
  2547  0E1C                     	;# 
  2548  0E1D                     	;# 
  2549  0E1E                     	;# 
  2550  0E1F                     	;# 
  2551  0E20                     	;# 
  2552  0E21                     	;# 
  2553  0E22                     	;# 
  2554  0E23                     	;# 
  2555  0E24                     	;# 
  2556  0E25                     	;# 
  2557  0E26                     	;# 
  2558  0E27                     	;# 
  2559  0E28                     	;# 
  2560  0E29                     	;# 
  2561  0E2A                     	;# 
  2562  0E2B                     	;# 
  2563  0E2C                     	;# 
  2564  0E2D                     	;# 
  2565  0E2E                     	;# 
  2566  0E2F                     	;# 
  2567  0E30                     	;# 
  2568  0E31                     	;# 
  2569  0E32                     	;# 
  2570  0E33                     	;# 
  2571  0E34                     	;# 
  2572  0E35                     	;# 
  2573  0E36                     	;# 
  2574  0E37                     	;# 
  2575  0E8F                     	;# 
  2576  0E90                     	;# 
  2577  0E91                     	;# 
  2578  0E92                     	;# 
  2579  0E93                     	;# 
  2580  0E94                     	;# 
  2581  0E95                     	;# 
  2582  0E96                     	;# 
  2583  0E97                     	;# 
  2584  0E9C                     	;# 
  2585  0E9D                     	;# 
  2586  0E9E                     	;# 
  2587  0EA1                     	;# 
  2588  0EA2                     	;# 
  2589  0EA3                     	;# 
  2590  0EA4                     	;# 
  2591  0EA5                     	;# 
  2592  0EA9                     	;# 
  2593  0EAA                     	;# 
  2594  0EAB                     	;# 
  2595  0EAC                     	;# 
  2596  0EB1                     	;# 
  2597  0EB2                     	;# 
  2598  0EB3                     	;# 
  2599  0EB8                     	;# 
  2600  0EB9                     	;# 
  2601  0EBA                     	;# 
  2602  0EBB                     	;# 
  2603  0EBC                     	;# 
  2604  0EBD                     	;# 
  2605  0EBE                     	;# 
  2606  0EC3                     	;# 
  2607  0EC5                     	;# 
  2608  0EC6                     	;# 
  2609  0EC7                     	;# 
  2610  0EC8                     	;# 
  2611  0EC9                     	;# 
  2612  0ECA                     	;# 
  2613  0ECB                     	;# 
  2614  0ECC                     	;# 
  2615  0F10                     	;# 
  2616  0F11                     	;# 
  2617  0F12                     	;# 
  2618  0F13                     	;# 
  2619  0F14                     	;# 
  2620  0F15                     	;# 
  2621  0F16                     	;# 
  2622  0F17                     	;# 
  2623  0F18                     	;# 
  2624  0F19                     	;# 
  2625  0F1A                     	;# 
  2626  0F1B                     	;# 
  2627  0F1C                     	;# 
  2628  0F1D                     	;# 
  2629  0F1E                     	;# 
  2630  0F1F                     	;# 
  2631  0F20                     	;# 
  2632  0F21                     	;# 
  2633  0F22                     	;# 
  2634  0F23                     	;# 
  2635  0F24                     	;# 
  2636  0F25                     	;# 
  2637  0F26                     	;# 
  2638  0F27                     	;# 
  2639  0F38                     	;# 
  2640  0F39                     	;# 
  2641  0F3A                     	;# 
  2642  0F3B                     	;# 
  2643  0F3C                     	;# 
  2644  0F3D                     	;# 
  2645  0F3E                     	;# 
  2646  0F3F                     	;# 
  2647  0F40                     	;# 
  2648  0F41                     	;# 
  2649  0F43                     	;# 
  2650  0F44                     	;# 
  2651  0F45                     	;# 
  2652  0F46                     	;# 
  2653  0F47                     	;# 
  2654  0F48                     	;# 
  2655  0F49                     	;# 
  2656  0F4A                     	;# 
  2657  0F4B                     	;# 
  2658  0F4C                     	;# 
  2659  0F4E                     	;# 
  2660  0F4F                     	;# 
  2661  0F50                     	;# 
  2662  0F51                     	;# 
  2663  0F52                     	;# 
  2664  0F53                     	;# 
  2665  0F54                     	;# 
  2666  0F55                     	;# 
  2667  0F56                     	;# 
  2668  0F57                     	;# 
  2669  0F65                     	;# 
  2670  0F68                     	;# 
  2671  0F69                     	;# 
  2672  0F6A                     	;# 
  2673  0F6B                     	;# 
  2674  0FE4                     	;# 
  2675  0FE5                     	;# 
  2676  0FE6                     	;# 
  2677  0FE7                     	;# 
  2678  0FE8                     	;# 
  2679  0FE9                     	;# 
  2680  0FEA                     	;# 
  2681  0FEB                     	;# 
  2682  0FED                     	;# 
  2683  0FEE                     	;# 
  2684  0FEF                     	;# 
  2685  0000                     	;# 
  2686  0001                     	;# 
  2687  0002                     	;# 
  2688  0003                     	;# 
  2689  0004                     	;# 
  2690  0005                     	;# 
  2691  0006                     	;# 
  2692  0007                     	;# 
  2693  0008                     	;# 
  2694  0009                     	;# 
  2695  000A                     	;# 
  2696  000B                     	;# 
  2697  000C                     	;# 
  2698  000D                     	;# 
  2699  000E                     	;# 
  2700  0010                     	;# 
  2701  0011                     	;# 
  2702  0012                     	;# 
  2703  0013                     	;# 
  2704  0016                     	;# 
  2705  0017                     	;# 
  2706  0018                     	;# 
  2707  001C                     	;# 
  2708  001C                     	;# 
  2709  001D                     	;# 
  2710  001D                     	;# 
  2711  001E                     	;# 
  2712  001F                     	;# 
  2713  008C                     	;# 
  2714  008C                     	;# 
  2715  008D                     	;# 
  2716  008E                     	;# 
  2717  008E                     	;# 
  2718  008F                     	;# 
  2719  0090                     	;# 
  2720  0090                     	;# 
  2721  0091                     	;# 
  2722  0093                     	;# 
  2723  0094                     	;# 
  2724  0095                     	;# 
  2725  0096                     	;# 
  2726  0097                     	;# 
  2727  0098                     	;# 
  2728  0099                     	;# 
  2729  009A                     	;# 
  2730  009B                     	;# 
  2731  009C                     	;# 
  2732  009D                     	;# 
  2733  009E                     	;# 
  2734  010C                     	;# 
  2735  010D                     	;# 
  2736  010E                     	;# 
  2737  010E                     	;# 
  2738  010F                     	;# 
  2739  0110                     	;# 
  2740  0110                     	;# 
  2741  0111                     	;# 
  2742  0112                     	;# 
  2743  0112                     	;# 
  2744  0113                     	;# 
  2745  0114                     	;# 
  2746  0114                     	;# 
  2747  0115                     	;# 
  2748  0116                     	;# 
  2749  0116                     	;# 
  2750  0117                     	;# 
  2751  0119                     	;# 
  2752  0119                     	;# 
  2753  0119                     	;# 
  2754  011A                     	;# 
  2755  011A                     	;# 
  2756  011A                     	;# 
  2757  011B                     	;# 
  2758  011B                     	;# 
  2759  011B                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011C                     	;# 
  2763  011C                     	;# 
  2764  011C                     	;# 
  2765  011D                     	;# 
  2766  011D                     	;# 
  2767  011D                     	;# 
  2768  011E                     	;# 
  2769  011E                     	;# 
  2770  011E                     	;# 
  2771  011F                     	;# 
  2772  011F                     	;# 
  2773  011F                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  018C                     	;# 
  2777  018D                     	;# 
  2778  018E                     	;# 
  2779  018F                     	;# 
  2780  0190                     	;# 
  2781  0191                     	;# 
  2782  0192                     	;# 
  2783  0196                     	;# 
  2784  0197                     	;# 
  2785  0198                     	;# 
  2786  0199                     	;# 
  2787  019A                     	;# 
  2788  019B                     	;# 
  2789  019C                     	;# 
  2790  020C                     	;# 
  2791  020C                     	;# 
  2792  020D                     	;# 
  2793  020E                     	;# 
  2794  020F                     	;# 
  2795  020F                     	;# 
  2796  0210                     	;# 
  2797  0210                     	;# 
  2798  0211                     	;# 
  2799  0211                     	;# 
  2800  0212                     	;# 
  2801  0212                     	;# 
  2802  0213                     	;# 
  2803  0214                     	;# 
  2804  0215                     	;# 
  2805  0215                     	;# 
  2806  0216                     	;# 
  2807  0216                     	;# 
  2808  0217                     	;# 
  2809  0217                     	;# 
  2810  0218                     	;# 
  2811  0218                     	;# 
  2812  0219                     	;# 
  2813  021A                     	;# 
  2814  021B                     	;# 
  2815  021B                     	;# 
  2816  021C                     	;# 
  2817  021C                     	;# 
  2818  021D                     	;# 
  2819  021D                     	;# 
  2820  021E                     	;# 
  2821  021F                     	;# 
  2822  028C                     	;# 
  2823  028C                     	;# 
  2824  028D                     	;# 
  2825  028D                     	;# 
  2826  028E                     	;# 
  2827  028F                     	;# 
  2828  0290                     	;# 
  2829  0290                     	;# 
  2830  0291                     	;# 
  2831  0292                     	;# 
  2832  0292                     	;# 
  2833  0293                     	;# 
  2834  0293                     	;# 
  2835  0294                     	;# 
  2836  0295                     	;# 
  2837  0296                     	;# 
  2838  0296                     	;# 
  2839  0297                     	;# 
  2840  0298                     	;# 
  2841  0298                     	;# 
  2842  0299                     	;# 
  2843  0299                     	;# 
  2844  029A                     	;# 
  2845  029B                     	;# 
  2846  029C                     	;# 
  2847  029C                     	;# 
  2848  029D                     	;# 
  2849  030C                     	;# 
  2850  030C                     	;# 
  2851  030D                     	;# 
  2852  030E                     	;# 
  2853  030F                     	;# 
  2854  0310                     	;# 
  2855  0310                     	;# 
  2856  0311                     	;# 
  2857  0312                     	;# 
  2858  0313                     	;# 
  2859  0314                     	;# 
  2860  0314                     	;# 
  2861  0315                     	;# 
  2862  0316                     	;# 
  2863  0317                     	;# 
  2864  0318                     	;# 
  2865  0318                     	;# 
  2866  0319                     	;# 
  2867  031A                     	;# 
  2868  031B                     	;# 
  2869  031C                     	;# 
  2870  031C                     	;# 
  2871  031D                     	;# 
  2872  031E                     	;# 
  2873  031F                     	;# 
  2874  038C                     	;# 
  2875  038D                     	;# 
  2876  038E                     	;# 
  2877  0390                     	;# 
  2878  0391                     	;# 
  2879  0392                     	;# 
  2880  040C                     	;# 
  2881  040D                     	;# 
  2882  040E                     	;# 
  2883  040F                     	;# 
  2884  0410                     	;# 
  2885  0411                     	;# 
  2886  0416                     	;# 
  2887  0416                     	;# 
  2888  0417                     	;# 
  2889  0418                     	;# 
  2890  0418                     	;# 
  2891  0419                     	;# 
  2892  041A                     	;# 
  2893  041A                     	;# 
  2894  041B                     	;# 
  2895  041C                     	;# 
  2896  041C                     	;# 
  2897  041D                     	;# 
  2898  041E                     	;# 
  2899  041F                     	;# 
  2900  048C                     	;# 
  2901  048C                     	;# 
  2902  048D                     	;# 
  2903  048E                     	;# 
  2904  048F                     	;# 
  2905  048F                     	;# 
  2906  0490                     	;# 
  2907  0491                     	;# 
  2908  0492                     	;# 
  2909  0492                     	;# 
  2910  0493                     	;# 
  2911  0494                     	;# 
  2912  0495                     	;# 
  2913  0495                     	;# 
  2914  0496                     	;# 
  2915  0497                     	;# 
  2916  0498                     	;# 
  2917  0499                     	;# 
  2918  049A                     	;# 
  2919  049B                     	;# 
  2920  049C                     	;# 
  2921  049D                     	;# 
  2922  050C                     	;# 
  2923  050C                     	;# 
  2924  050D                     	;# 
  2925  050E                     	;# 
  2926  050F                     	;# 
  2927  050F                     	;# 
  2928  0510                     	;# 
  2929  0511                     	;# 
  2930  0512                     	;# 
  2931  0512                     	;# 
  2932  0513                     	;# 
  2933  0514                     	;# 
  2934  0515                     	;# 
  2935  0515                     	;# 
  2936  0516                     	;# 
  2937  0517                     	;# 
  2938  0518                     	;# 
  2939  0519                     	;# 
  2940  051A                     	;# 
  2941  051B                     	;# 
  2942  051C                     	;# 
  2943  051D                     	;# 
  2944  058C                     	;# 
  2945  058C                     	;# 
  2946  058D                     	;# 
  2947  058E                     	;# 
  2948  058F                     	;# 
  2949  058F                     	;# 
  2950  0590                     	;# 
  2951  0591                     	;# 
  2952  0592                     	;# 
  2953  0593                     	;# 
  2954  060C                     	;# 
  2955  060D                     	;# 
  2956  060E                     	;# 
  2957  060F                     	;# 
  2958  0610                     	;# 
  2959  0611                     	;# 
  2960  0612                     	;# 
  2961  0613                     	;# 
  2962  0614                     	;# 
  2963  0616                     	;# 
  2964  0617                     	;# 
  2965  0618                     	;# 
  2966  0619                     	;# 
  2967  061A                     	;# 
  2968  061B                     	;# 
  2969  061C                     	;# 
  2970  061D                     	;# 
  2971  061E                     	;# 
  2972  068C                     	;# 
  2973  068D                     	;# 
  2974  068E                     	;# 
  2975  068F                     	;# 
  2976  0690                     	;# 
  2977  0691                     	;# 
  2978  0692                     	;# 
  2979  0693                     	;# 
  2980  0694                     	;# 
  2981  070C                     	;# 
  2982  070D                     	;# 
  2983  070E                     	;# 
  2984  070F                     	;# 
  2985  0710                     	;# 
  2986  0711                     	;# 
  2987  0712                     	;# 
  2988  0713                     	;# 
  2989  0714                     	;# 
  2990  0716                     	;# 
  2991  0717                     	;# 
  2992  0718                     	;# 
  2993  0719                     	;# 
  2994  071A                     	;# 
  2995  071B                     	;# 
  2996  071C                     	;# 
  2997  071D                     	;# 
  2998  071E                     	;# 
  2999  0796                     	;# 
  3000  0797                     	;# 
  3001  0798                     	;# 
  3002  0799                     	;# 
  3003  079A                     	;# 
  3004  079B                     	;# 
  3005  080C                     	;# 
  3006  080D                     	;# 
  3007  080E                     	;# 
  3008  080F                     	;# 
  3009  0810                     	;# 
  3010  0811                     	;# 
  3011  0812                     	;# 
  3012  0813                     	;# 
  3013  0814                     	;# 
  3014  081A                     	;# 
  3015  081B                     	;# 
  3016  081C                     	;# 
  3017  081D                     	;# 
  3018  081E                     	;# 
  3019  081F                     	;# 
  3020  088C                     	;# 
  3021  088D                     	;# 
  3022  088E                     	;# 
  3023  088F                     	;# 
  3024  0890                     	;# 
  3025  0891                     	;# 
  3026  0892                     	;# 
  3027  0893                     	;# 
  3028  0895                     	;# 
  3029  0896                     	;# 
  3030  0897                     	;# 
  3031  0898                     	;# 
  3032  0899                     	;# 
  3033  089A                     	;# 
  3034  089B                     	;# 
  3035  090C                     	;# 
  3036  090E                     	;# 
  3037  090F                     	;# 
  3038  091F                     	;# 
  3039  091F                     	;# 
  3040  098F                     	;# 
  3041  098F                     	;# 
  3042  0990                     	;# 
  3043  0991                     	;# 
  3044  0992                     	;# 
  3045  0993                     	;# 
  3046  0994                     	;# 
  3047  0995                     	;# 
  3048  0996                     	;# 
  3049  0997                     	;# 
  3050  0E0F                     	;# 
  3051  0E10                     	;# 
  3052  0E11                     	;# 
  3053  0E12                     	;# 
  3054  0E13                     	;# 
  3055  0E14                     	;# 
  3056  0E15                     	;# 
  3057  0E16                     	;# 
  3058  0E17                     	;# 
  3059  0E18                     	;# 
  3060  0E19                     	;# 
  3061  0E1A                     	;# 
  3062  0E1B                     	;# 
  3063  0E1C                     	;# 
  3064  0E1D                     	;# 
  3065  0E1E                     	;# 
  3066  0E1F                     	;# 
  3067  0E20                     	;# 
  3068  0E21                     	;# 
  3069  0E22                     	;# 
  3070  0E23                     	;# 
  3071  0E24                     	;# 
  3072  0E25                     	;# 
  3073  0E26                     	;# 
  3074  0E27                     	;# 
  3075  0E28                     	;# 
  3076  0E29                     	;# 
  3077  0E2A                     	;# 
  3078  0E2B                     	;# 
  3079  0E2C                     	;# 
  3080  0E2D                     	;# 
  3081  0E2E                     	;# 
  3082  0E2F                     	;# 
  3083  0E30                     	;# 
  3084  0E31                     	;# 
  3085  0E32                     	;# 
  3086  0E33                     	;# 
  3087  0E34                     	;# 
  3088  0E35                     	;# 
  3089  0E36                     	;# 
  3090  0E37                     	;# 
  3091  0E8F                     	;# 
  3092  0E90                     	;# 
  3093  0E91                     	;# 
  3094  0E92                     	;# 
  3095  0E93                     	;# 
  3096  0E94                     	;# 
  3097  0E95                     	;# 
  3098  0E96                     	;# 
  3099  0E97                     	;# 
  3100  0E9C                     	;# 
  3101  0E9D                     	;# 
  3102  0E9E                     	;# 
  3103  0EA1                     	;# 
  3104  0EA2                     	;# 
  3105  0EA3                     	;# 
  3106  0EA4                     	;# 
  3107  0EA5                     	;# 
  3108  0EA9                     	;# 
  3109  0EAA                     	;# 
  3110  0EAB                     	;# 
  3111  0EAC                     	;# 
  3112  0EB1                     	;# 
  3113  0EB2                     	;# 
  3114  0EB3                     	;# 
  3115  0EB8                     	;# 
  3116  0EB9                     	;# 
  3117  0EBA                     	;# 
  3118  0EBB                     	;# 
  3119  0EBC                     	;# 
  3120  0EBD                     	;# 
  3121  0EBE                     	;# 
  3122  0EC3                     	;# 
  3123  0EC5                     	;# 
  3124  0EC6                     	;# 
  3125  0EC7                     	;# 
  3126  0EC8                     	;# 
  3127  0EC9                     	;# 
  3128  0ECA                     	;# 
  3129  0ECB                     	;# 
  3130  0ECC                     	;# 
  3131  0F10                     	;# 
  3132  0F11                     	;# 
  3133  0F12                     	;# 
  3134  0F13                     	;# 
  3135  0F14                     	;# 
  3136  0F15                     	;# 
  3137  0F16                     	;# 
  3138  0F17                     	;# 
  3139  0F18                     	;# 
  3140  0F19                     	;# 
  3141  0F1A                     	;# 
  3142  0F1B                     	;# 
  3143  0F1C                     	;# 
  3144  0F1D                     	;# 
  3145  0F1E                     	;# 
  3146  0F1F                     	;# 
  3147  0F20                     	;# 
  3148  0F21                     	;# 
  3149  0F22                     	;# 
  3150  0F23                     	;# 
  3151  0F24                     	;# 
  3152  0F25                     	;# 
  3153  0F26                     	;# 
  3154  0F27                     	;# 
  3155  0F38                     	;# 
  3156  0F39                     	;# 
  3157  0F3A                     	;# 
  3158  0F3B                     	;# 
  3159  0F3C                     	;# 
  3160  0F3D                     	;# 
  3161  0F3E                     	;# 
  3162  0F3F                     	;# 
  3163  0F40                     	;# 
  3164  0F41                     	;# 
  3165  0F43                     	;# 
  3166  0F44                     	;# 
  3167  0F45                     	;# 
  3168  0F46                     	;# 
  3169  0F47                     	;# 
  3170  0F48                     	;# 
  3171  0F49                     	;# 
  3172  0F4A                     	;# 
  3173  0F4B                     	;# 
  3174  0F4C                     	;# 
  3175  0F4E                     	;# 
  3176  0F4F                     	;# 
  3177  0F50                     	;# 
  3178  0F51                     	;# 
  3179  0F52                     	;# 
  3180  0F53                     	;# 
  3181  0F54                     	;# 
  3182  0F55                     	;# 
  3183  0F56                     	;# 
  3184  0F57                     	;# 
  3185  0F65                     	;# 
  3186  0F68                     	;# 
  3187  0F69                     	;# 
  3188  0F6A                     	;# 
  3189  0F6B                     	;# 
  3190  0FE4                     	;# 
  3191  0FE5                     	;# 
  3192  0FE6                     	;# 
  3193  0FE7                     	;# 
  3194  0FE8                     	;# 
  3195  0FE9                     	;# 
  3196  0FEA                     	;# 
  3197  0FEB                     	;# 
  3198  0FED                     	;# 
  3199  0FEE                     	;# 
  3200  0FEF                     	;# 
  3201  0000                     	;# 
  3202  0001                     	;# 
  3203  0002                     	;# 
  3204  0003                     	;# 
  3205  0004                     	;# 
  3206  0005                     	;# 
  3207  0006                     	;# 
  3208  0007                     	;# 
  3209  0008                     	;# 
  3210  0009                     	;# 
  3211  000A                     	;# 
  3212  000B                     	;# 
  3213  000C                     	;# 
  3214  000D                     	;# 
  3215  000E                     	;# 
  3216  0010                     	;# 
  3217  0011                     	;# 
  3218  0012                     	;# 
  3219  0013                     	;# 
  3220  0016                     	;# 
  3221  0017                     	;# 
  3222  0018                     	;# 
  3223  001C                     	;# 
  3224  001C                     	;# 
  3225  001D                     	;# 
  3226  001D                     	;# 
  3227  001E                     	;# 
  3228  001F                     	;# 
  3229  008C                     	;# 
  3230  008C                     	;# 
  3231  008D                     	;# 
  3232  008E                     	;# 
  3233  008E                     	;# 
  3234  008F                     	;# 
  3235  0090                     	;# 
  3236  0090                     	;# 
  3237  0091                     	;# 
  3238  0093                     	;# 
  3239  0094                     	;# 
  3240  0095                     	;# 
  3241  0096                     	;# 
  3242  0097                     	;# 
  3243  0098                     	;# 
  3244  0099                     	;# 
  3245  009A                     	;# 
  3246  009B                     	;# 
  3247  009C                     	;# 
  3248  009D                     	;# 
  3249  009E                     	;# 
  3250  010C                     	;# 
  3251  010D                     	;# 
  3252  010E                     	;# 
  3253  010E                     	;# 
  3254  010F                     	;# 
  3255  0110                     	;# 
  3256  0110                     	;# 
  3257  0111                     	;# 
  3258  0112                     	;# 
  3259  0112                     	;# 
  3260  0113                     	;# 
  3261  0114                     	;# 
  3262  0114                     	;# 
  3263  0115                     	;# 
  3264  0116                     	;# 
  3265  0116                     	;# 
  3266  0117                     	;# 
  3267  0119                     	;# 
  3268  0119                     	;# 
  3269  0119                     	;# 
  3270  011A                     	;# 
  3271  011A                     	;# 
  3272  011A                     	;# 
  3273  011B                     	;# 
  3274  011B                     	;# 
  3275  011B                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011C                     	;# 
  3279  011C                     	;# 
  3280  011C                     	;# 
  3281  011D                     	;# 
  3282  011D                     	;# 
  3283  011D                     	;# 
  3284  011E                     	;# 
  3285  011E                     	;# 
  3286  011E                     	;# 
  3287  011F                     	;# 
  3288  011F                     	;# 
  3289  011F                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  018C                     	;# 
  3293  018D                     	;# 
  3294  018E                     	;# 
  3295  018F                     	;# 
  3296  0190                     	;# 
  3297  0191                     	;# 
  3298  0192                     	;# 
  3299  0196                     	;# 
  3300  0197                     	;# 
  3301  0198                     	;# 
  3302  0199                     	;# 
  3303  019A                     	;# 
  3304  019B                     	;# 
  3305  019C                     	;# 
  3306  020C                     	;# 
  3307  020C                     	;# 
  3308  020D                     	;# 
  3309  020E                     	;# 
  3310  020F                     	;# 
  3311  020F                     	;# 
  3312  0210                     	;# 
  3313  0210                     	;# 
  3314  0211                     	;# 
  3315  0211                     	;# 
  3316  0212                     	;# 
  3317  0212                     	;# 
  3318  0213                     	;# 
  3319  0214                     	;# 
  3320  0215                     	;# 
  3321  0215                     	;# 
  3322  0216                     	;# 
  3323  0216                     	;# 
  3324  0217                     	;# 
  3325  0217                     	;# 
  3326  0218                     	;# 
  3327  0218                     	;# 
  3328  0219                     	;# 
  3329  021A                     	;# 
  3330  021B                     	;# 
  3331  021B                     	;# 
  3332  021C                     	;# 
  3333  021C                     	;# 
  3334  021D                     	;# 
  3335  021D                     	;# 
  3336  021E                     	;# 
  3337  021F                     	;# 
  3338  028C                     	;# 
  3339  028C                     	;# 
  3340  028D                     	;# 
  3341  028D                     	;# 
  3342  028E                     	;# 
  3343  028F                     	;# 
  3344  0290                     	;# 
  3345  0290                     	;# 
  3346  0291                     	;# 
  3347  0292                     	;# 
  3348  0292                     	;# 
  3349  0293                     	;# 
  3350  0293                     	;# 
  3351  0294                     	;# 
  3352  0295                     	;# 
  3353  0296                     	;# 
  3354  0296                     	;# 
  3355  0297                     	;# 
  3356  0298                     	;# 
  3357  0298                     	;# 
  3358  0299                     	;# 
  3359  0299                     	;# 
  3360  029A                     	;# 
  3361  029B                     	;# 
  3362  029C                     	;# 
  3363  029C                     	;# 
  3364  029D                     	;# 
  3365  030C                     	;# 
  3366  030C                     	;# 
  3367  030D                     	;# 
  3368  030E                     	;# 
  3369  030F                     	;# 
  3370  0310                     	;# 
  3371  0310                     	;# 
  3372  0311                     	;# 
  3373  0312                     	;# 
  3374  0313                     	;# 
  3375  0314                     	;# 
  3376  0314                     	;# 
  3377  0315                     	;# 
  3378  0316                     	;# 
  3379  0317                     	;# 
  3380  0318                     	;# 
  3381  0318                     	;# 
  3382  0319                     	;# 
  3383  031A                     	;# 
  3384  031B                     	;# 
  3385  031C                     	;# 
  3386  031C                     	;# 
  3387  031D                     	;# 
  3388  031E                     	;# 
  3389  031F                     	;# 
  3390  038C                     	;# 
  3391  038D                     	;# 
  3392  038E                     	;# 
  3393  0390                     	;# 
  3394  0391                     	;# 
  3395  0392                     	;# 
  3396  040C                     	;# 
  3397  040D                     	;# 
  3398  040E                     	;# 
  3399  040F                     	;# 
  3400  0410                     	;# 
  3401  0411                     	;# 
  3402  0416                     	;# 
  3403  0416                     	;# 
  3404  0417                     	;# 
  3405  0418                     	;# 
  3406  0418                     	;# 
  3407  0419                     	;# 
  3408  041A                     	;# 
  3409  041A                     	;# 
  3410  041B                     	;# 
  3411  041C                     	;# 
  3412  041C                     	;# 
  3413  041D                     	;# 
  3414  041E                     	;# 
  3415  041F                     	;# 
  3416  048C                     	;# 
  3417  048C                     	;# 
  3418  048D                     	;# 
  3419  048E                     	;# 
  3420  048F                     	;# 
  3421  048F                     	;# 
  3422  0490                     	;# 
  3423  0491                     	;# 
  3424  0492                     	;# 
  3425  0492                     	;# 
  3426  0493                     	;# 
  3427  0494                     	;# 
  3428  0495                     	;# 
  3429  0495                     	;# 
  3430  0496                     	;# 
  3431  0497                     	;# 
  3432  0498                     	;# 
  3433  0499                     	;# 
  3434  049A                     	;# 
  3435  049B                     	;# 
  3436  049C                     	;# 
  3437  049D                     	;# 
  3438  050C                     	;# 
  3439  050C                     	;# 
  3440  050D                     	;# 
  3441  050E                     	;# 
  3442  050F                     	;# 
  3443  050F                     	;# 
  3444  0510                     	;# 
  3445  0511                     	;# 
  3446  0512                     	;# 
  3447  0512                     	;# 
  3448  0513                     	;# 
  3449  0514                     	;# 
  3450  0515                     	;# 
  3451  0515                     	;# 
  3452  0516                     	;# 
  3453  0517                     	;# 
  3454  0518                     	;# 
  3455  0519                     	;# 
  3456  051A                     	;# 
  3457  051B                     	;# 
  3458  051C                     	;# 
  3459  051D                     	;# 
  3460  058C                     	;# 
  3461  058C                     	;# 
  3462  058D                     	;# 
  3463  058E                     	;# 
  3464  058F                     	;# 
  3465  058F                     	;# 
  3466  0590                     	;# 
  3467  0591                     	;# 
  3468  0592                     	;# 
  3469  0593                     	;# 
  3470  060C                     	;# 
  3471  060D                     	;# 
  3472  060E                     	;# 
  3473  060F                     	;# 
  3474  0610                     	;# 
  3475  0611                     	;# 
  3476  0612                     	;# 
  3477  0613                     	;# 
  3478  0614                     	;# 
  3479  0616                     	;# 
  3480  0617                     	;# 
  3481  0618                     	;# 
  3482  0619                     	;# 
  3483  061A                     	;# 
  3484  061B                     	;# 
  3485  061C                     	;# 
  3486  061D                     	;# 
  3487  061E                     	;# 
  3488  068C                     	;# 
  3489  068D                     	;# 
  3490  068E                     	;# 
  3491  068F                     	;# 
  3492  0690                     	;# 
  3493  0691                     	;# 
  3494  0692                     	;# 
  3495  0693                     	;# 
  3496  0694                     	;# 
  3497  070C                     	;# 
  3498  070D                     	;# 
  3499  070E                     	;# 
  3500  070F                     	;# 
  3501  0710                     	;# 
  3502  0711                     	;# 
  3503  0712                     	;# 
  3504  0713                     	;# 
  3505  0714                     	;# 
  3506  0716                     	;# 
  3507  0717                     	;# 
  3508  0718                     	;# 
  3509  0719                     	;# 
  3510  071A                     	;# 
  3511  071B                     	;# 
  3512  071C                     	;# 
  3513  071D                     	;# 
  3514  071E                     	;# 
  3515  0796                     	;# 
  3516  0797                     	;# 
  3517  0798                     	;# 
  3518  0799                     	;# 
  3519  079A                     	;# 
  3520  079B                     	;# 
  3521  080C                     	;# 
  3522  080D                     	;# 
  3523  080E                     	;# 
  3524  080F                     	;# 
  3525  0810                     	;# 
  3526  0811                     	;# 
  3527  0812                     	;# 
  3528  0813                     	;# 
  3529  0814                     	;# 
  3530  081A                     	;# 
  3531  081B                     	;# 
  3532  081C                     	;# 
  3533  081D                     	;# 
  3534  081E                     	;# 
  3535  081F                     	;# 
  3536  088C                     	;# 
  3537  088D                     	;# 
  3538  088E                     	;# 
  3539  088F                     	;# 
  3540  0890                     	;# 
  3541  0891                     	;# 
  3542  0892                     	;# 
  3543  0893                     	;# 
  3544  0895                     	;# 
  3545  0896                     	;# 
  3546  0897                     	;# 
  3547  0898                     	;# 
  3548  0899                     	;# 
  3549  089A                     	;# 
  3550  089B                     	;# 
  3551  090C                     	;# 
  3552  090E                     	;# 
  3553  090F                     	;# 
  3554  091F                     	;# 
  3555  091F                     	;# 
  3556  098F                     	;# 
  3557  098F                     	;# 
  3558  0990                     	;# 
  3559  0991                     	;# 
  3560  0992                     	;# 
  3561  0993                     	;# 
  3562  0994                     	;# 
  3563  0995                     	;# 
  3564  0996                     	;# 
  3565  0997                     	;# 
  3566  0E0F                     	;# 
  3567  0E10                     	;# 
  3568  0E11                     	;# 
  3569  0E12                     	;# 
  3570  0E13                     	;# 
  3571  0E14                     	;# 
  3572  0E15                     	;# 
  3573  0E16                     	;# 
  3574  0E17                     	;# 
  3575  0E18                     	;# 
  3576  0E19                     	;# 
  3577  0E1A                     	;# 
  3578  0E1B                     	;# 
  3579  0E1C                     	;# 
  3580  0E1D                     	;# 
  3581  0E1E                     	;# 
  3582  0E1F                     	;# 
  3583  0E20                     	;# 
  3584  0E21                     	;# 
  3585  0E22                     	;# 
  3586  0E23                     	;# 
  3587  0E24                     	;# 
  3588  0E25                     	;# 
  3589  0E26                     	;# 
  3590  0E27                     	;# 
  3591  0E28                     	;# 
  3592  0E29                     	;# 
  3593  0E2A                     	;# 
  3594  0E2B                     	;# 
  3595  0E2C                     	;# 
  3596  0E2D                     	;# 
  3597  0E2E                     	;# 
  3598  0E2F                     	;# 
  3599  0E30                     	;# 
  3600  0E31                     	;# 
  3601  0E32                     	;# 
  3602  0E33                     	;# 
  3603  0E34                     	;# 
  3604  0E35                     	;# 
  3605  0E36                     	;# 
  3606  0E37                     	;# 
  3607  0E8F                     	;# 
  3608  0E90                     	;# 
  3609  0E91                     	;# 
  3610  0E92                     	;# 
  3611  0E93                     	;# 
  3612  0E94                     	;# 
  3613  0E95                     	;# 
  3614  0E96                     	;# 
  3615  0E97                     	;# 
  3616  0E9C                     	;# 
  3617  0E9D                     	;# 
  3618  0E9E                     	;# 
  3619  0EA1                     	;# 
  3620  0EA2                     	;# 
  3621  0EA3                     	;# 
  3622  0EA4                     	;# 
  3623  0EA5                     	;# 
  3624  0EA9                     	;# 
  3625  0EAA                     	;# 
  3626  0EAB                     	;# 
  3627  0EAC                     	;# 
  3628  0EB1                     	;# 
  3629  0EB2                     	;# 
  3630  0EB3                     	;# 
  3631  0EB8                     	;# 
  3632  0EB9                     	;# 
  3633  0EBA                     	;# 
  3634  0EBB                     	;# 
  3635  0EBC                     	;# 
  3636  0EBD                     	;# 
  3637  0EBE                     	;# 
  3638  0EC3                     	;# 
  3639  0EC5                     	;# 
  3640  0EC6                     	;# 
  3641  0EC7                     	;# 
  3642  0EC8                     	;# 
  3643  0EC9                     	;# 
  3644  0ECA                     	;# 
  3645  0ECB                     	;# 
  3646  0ECC                     	;# 
  3647  0F10                     	;# 
  3648  0F11                     	;# 
  3649  0F12                     	;# 
  3650  0F13                     	;# 
  3651  0F14                     	;# 
  3652  0F15                     	;# 
  3653  0F16                     	;# 
  3654  0F17                     	;# 
  3655  0F18                     	;# 
  3656  0F19                     	;# 
  3657  0F1A                     	;# 
  3658  0F1B                     	;# 
  3659  0F1C                     	;# 
  3660  0F1D                     	;# 
  3661  0F1E                     	;# 
  3662  0F1F                     	;# 
  3663  0F20                     	;# 
  3664  0F21                     	;# 
  3665  0F22                     	;# 
  3666  0F23                     	;# 
  3667  0F24                     	;# 
  3668  0F25                     	;# 
  3669  0F26                     	;# 
  3670  0F27                     	;# 
  3671  0F38                     	;# 
  3672  0F39                     	;# 
  3673  0F3A                     	;# 
  3674  0F3B                     	;# 
  3675  0F3C                     	;# 
  3676  0F3D                     	;# 
  3677  0F3E                     	;# 
  3678  0F3F                     	;# 
  3679  0F40                     	;# 
  3680  0F41                     	;# 
  3681  0F43                     	;# 
  3682  0F44                     	;# 
  3683  0F45                     	;# 
  3684  0F46                     	;# 
  3685  0F47                     	;# 
  3686  0F48                     	;# 
  3687  0F49                     	;# 
  3688  0F4A                     	;# 
  3689  0F4B                     	;# 
  3690  0F4C                     	;# 
  3691  0F4E                     	;# 
  3692  0F4F                     	;# 
  3693  0F50                     	;# 
  3694  0F51                     	;# 
  3695  0F52                     	;# 
  3696  0F53                     	;# 
  3697  0F54                     	;# 
  3698  0F55                     	;# 
  3699  0F56                     	;# 
  3700  0F57                     	;# 
  3701  0F65                     	;# 
  3702  0F68                     	;# 
  3703  0F69                     	;# 
  3704  0F6A                     	;# 
  3705  0F6B                     	;# 
  3706  0FE4                     	;# 
  3707  0FE5                     	;# 
  3708  0FE6                     	;# 
  3709  0FE7                     	;# 
  3710  0FE8                     	;# 
  3711  0FE9                     	;# 
  3712  0FEA                     	;# 
  3713  0FEB                     	;# 
  3714  0FED                     	;# 
  3715  0FEE                     	;# 
  3716  0FEF                     	;# 
  3717  0000                     	;# 
  3718  0001                     	;# 
  3719  0002                     	;# 
  3720  0003                     	;# 
  3721  0004                     	;# 
  3722  0005                     	;# 
  3723  0006                     	;# 
  3724  0007                     	;# 
  3725  0008                     	;# 
  3726  0009                     	;# 
  3727  000A                     	;# 
  3728  000B                     	;# 
  3729  000C                     	;# 
  3730  000D                     	;# 
  3731  000E                     	;# 
  3732  0010                     	;# 
  3733  0011                     	;# 
  3734  0012                     	;# 
  3735  0013                     	;# 
  3736  0016                     	;# 
  3737  0017                     	;# 
  3738  0018                     	;# 
  3739  001C                     	;# 
  3740  001C                     	;# 
  3741  001D                     	;# 
  3742  001D                     	;# 
  3743  001E                     	;# 
  3744  001F                     	;# 
  3745  008C                     	;# 
  3746  008C                     	;# 
  3747  008D                     	;# 
  3748  008E                     	;# 
  3749  008E                     	;# 
  3750  008F                     	;# 
  3751  0090                     	;# 
  3752  0090                     	;# 
  3753  0091                     	;# 
  3754  0093                     	;# 
  3755  0094                     	;# 
  3756  0095                     	;# 
  3757  0096                     	;# 
  3758  0097                     	;# 
  3759  0098                     	;# 
  3760  0099                     	;# 
  3761  009A                     	;# 
  3762  009B                     	;# 
  3763  009C                     	;# 
  3764  009D                     	;# 
  3765  009E                     	;# 
  3766  010C                     	;# 
  3767  010D                     	;# 
  3768  010E                     	;# 
  3769  010E                     	;# 
  3770  010F                     	;# 
  3771  0110                     	;# 
  3772  0110                     	;# 
  3773  0111                     	;# 
  3774  0112                     	;# 
  3775  0112                     	;# 
  3776  0113                     	;# 
  3777  0114                     	;# 
  3778  0114                     	;# 
  3779  0115                     	;# 
  3780  0116                     	;# 
  3781  0116                     	;# 
  3782  0117                     	;# 
  3783  0119                     	;# 
  3784  0119                     	;# 
  3785  0119                     	;# 
  3786  011A                     	;# 
  3787  011A                     	;# 
  3788  011A                     	;# 
  3789  011B                     	;# 
  3790  011B                     	;# 
  3791  011B                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011C                     	;# 
  3795  011C                     	;# 
  3796  011C                     	;# 
  3797  011D                     	;# 
  3798  011D                     	;# 
  3799  011D                     	;# 
  3800  011E                     	;# 
  3801  011E                     	;# 
  3802  011E                     	;# 
  3803  011F                     	;# 
  3804  011F                     	;# 
  3805  011F                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  018C                     	;# 
  3809  018D                     	;# 
  3810  018E                     	;# 
  3811  018F                     	;# 
  3812  0190                     	;# 
  3813  0191                     	;# 
  3814  0192                     	;# 
  3815  0196                     	;# 
  3816  0197                     	;# 
  3817  0198                     	;# 
  3818  0199                     	;# 
  3819  019A                     	;# 
  3820  019B                     	;# 
  3821  019C                     	;# 
  3822  020C                     	;# 
  3823  020C                     	;# 
  3824  020D                     	;# 
  3825  020E                     	;# 
  3826  020F                     	;# 
  3827  020F                     	;# 
  3828  0210                     	;# 
  3829  0210                     	;# 
  3830  0211                     	;# 
  3831  0211                     	;# 
  3832  0212                     	;# 
  3833  0212                     	;# 
  3834  0213                     	;# 
  3835  0214                     	;# 
  3836  0215                     	;# 
  3837  0215                     	;# 
  3838  0216                     	;# 
  3839  0216                     	;# 
  3840  0217                     	;# 
  3841  0217                     	;# 
  3842  0218                     	;# 
  3843  0218                     	;# 
  3844  0219                     	;# 
  3845  021A                     	;# 
  3846  021B                     	;# 
  3847  021B                     	;# 
  3848  021C                     	;# 
  3849  021C                     	;# 
  3850  021D                     	;# 
  3851  021D                     	;# 
  3852  021E                     	;# 
  3853  021F                     	;# 
  3854  028C                     	;# 
  3855  028C                     	;# 
  3856  028D                     	;# 
  3857  028D                     	;# 
  3858  028E                     	;# 
  3859  028F                     	;# 
  3860  0290                     	;# 
  3861  0290                     	;# 
  3862  0291                     	;# 
  3863  0292                     	;# 
  3864  0292                     	;# 
  3865  0293                     	;# 
  3866  0293                     	;# 
  3867  0294                     	;# 
  3868  0295                     	;# 
  3869  0296                     	;# 
  3870  0296                     	;# 
  3871  0297                     	;# 
  3872  0298                     	;# 
  3873  0298                     	;# 
  3874  0299                     	;# 
  3875  0299                     	;# 
  3876  029A                     	;# 
  3877  029B                     	;# 
  3878  029C                     	;# 
  3879  029C                     	;# 
  3880  029D                     	;# 
  3881  030C                     	;# 
  3882  030C                     	;# 
  3883  030D                     	;# 
  3884  030E                     	;# 
  3885  030F                     	;# 
  3886  0310                     	;# 
  3887  0310                     	;# 
  3888  0311                     	;# 
  3889  0312                     	;# 
  3890  0313                     	;# 
  3891  0314                     	;# 
  3892  0314                     	;# 
  3893  0315                     	;# 
  3894  0316                     	;# 
  3895  0317                     	;# 
  3896  0318                     	;# 
  3897  0318                     	;# 
  3898  0319                     	;# 
  3899  031A                     	;# 
  3900  031B                     	;# 
  3901  031C                     	;# 
  3902  031C                     	;# 
  3903  031D                     	;# 
  3904  031E                     	;# 
  3905  031F                     	;# 
  3906  038C                     	;# 
  3907  038D                     	;# 
  3908  038E                     	;# 
  3909  0390                     	;# 
  3910  0391                     	;# 
  3911  0392                     	;# 
  3912  040C                     	;# 
  3913  040D                     	;# 
  3914  040E                     	;# 
  3915  040F                     	;# 
  3916  0410                     	;# 
  3917  0411                     	;# 
  3918  0416                     	;# 
  3919  0416                     	;# 
  3920  0417                     	;# 
  3921  0418                     	;# 
  3922  0418                     	;# 
  3923  0419                     	;# 
  3924  041A                     	;# 
  3925  041A                     	;# 
  3926  041B                     	;# 
  3927  041C                     	;# 
  3928  041C                     	;# 
  3929  041D                     	;# 
  3930  041E                     	;# 
  3931  041F                     	;# 
  3932  048C                     	;# 
  3933  048C                     	;# 
  3934  048D                     	;# 
  3935  048E                     	;# 
  3936  048F                     	;# 
  3937  048F                     	;# 
  3938  0490                     	;# 
  3939  0491                     	;# 
  3940  0492                     	;# 
  3941  0492                     	;# 
  3942  0493                     	;# 
  3943  0494                     	;# 
  3944  0495                     	;# 
  3945  0495                     	;# 
  3946  0496                     	;# 
  3947  0497                     	;# 
  3948  0498                     	;# 
  3949  0499                     	;# 
  3950  049A                     	;# 
  3951  049B                     	;# 
  3952  049C                     	;# 
  3953  049D                     	;# 
  3954  050C                     	;# 
  3955  050C                     	;# 
  3956  050D                     	;# 
  3957  050E                     	;# 
  3958  050F                     	;# 
  3959  050F                     	;# 
  3960  0510                     	;# 
  3961  0511                     	;# 
  3962  0512                     	;# 
  3963  0512                     	;# 
  3964  0513                     	;# 
  3965  0514                     	;# 
  3966  0515                     	;# 
  3967  0515                     	;# 
  3968  0516                     	;# 
  3969  0517                     	;# 
  3970  0518                     	;# 
  3971  0519                     	;# 
  3972  051A                     	;# 
  3973  051B                     	;# 
  3974  051C                     	;# 
  3975  051D                     	;# 
  3976  058C                     	;# 
  3977  058C                     	;# 
  3978  058D                     	;# 
  3979  058E                     	;# 
  3980  058F                     	;# 
  3981  058F                     	;# 
  3982  0590                     	;# 
  3983  0591                     	;# 
  3984  0592                     	;# 
  3985  0593                     	;# 
  3986  060C                     	;# 
  3987  060D                     	;# 
  3988  060E                     	;# 
  3989  060F                     	;# 
  3990  0610                     	;# 
  3991  0611                     	;# 
  3992  0612                     	;# 
  3993  0613                     	;# 
  3994  0614                     	;# 
  3995  0616                     	;# 
  3996  0617                     	;# 
  3997  0618                     	;# 
  3998  0619                     	;# 
  3999  061A                     	;# 
  4000  061B                     	;# 
  4001  061C                     	;# 
  4002  061D                     	;# 
  4003  061E                     	;# 
  4004  068C                     	;# 
  4005  068D                     	;# 
  4006  068E                     	;# 
  4007  068F                     	;# 
  4008  0690                     	;# 
  4009  0691                     	;# 
  4010  0692                     	;# 
  4011  0693                     	;# 
  4012  0694                     	;# 
  4013  070C                     	;# 
  4014  070D                     	;# 
  4015  070E                     	;# 
  4016  070F                     	;# 
  4017  0710                     	;# 
  4018  0711                     	;# 
  4019  0712                     	;# 
  4020  0713                     	;# 
  4021  0714                     	;# 
  4022  0716                     	;# 
  4023  0717                     	;# 
  4024  0718                     	;# 
  4025  0719                     	;# 
  4026  071A                     	;# 
  4027  071B                     	;# 
  4028  071C                     	;# 
  4029  071D                     	;# 
  4030  071E                     	;# 
  4031  0796                     	;# 
  4032  0797                     	;# 
  4033  0798                     	;# 
  4034  0799                     	;# 
  4035  079A                     	;# 
  4036  079B                     	;# 
  4037  080C                     	;# 
  4038  080D                     	;# 
  4039  080E                     	;# 
  4040  080F                     	;# 
  4041  0810                     	;# 
  4042  0811                     	;# 
  4043  0812                     	;# 
  4044  0813                     	;# 
  4045  0814                     	;# 
  4046  081A                     	;# 
  4047  081B                     	;# 
  4048  081C                     	;# 
  4049  081D                     	;# 
  4050  081E                     	;# 
  4051  081F                     	;# 
  4052  088C                     	;# 
  4053  088D                     	;# 
  4054  088E                     	;# 
  4055  088F                     	;# 
  4056  0890                     	;# 
  4057  0891                     	;# 
  4058  0892                     	;# 
  4059  0893                     	;# 
  4060  0895                     	;# 
  4061  0896                     	;# 
  4062  0897                     	;# 
  4063  0898                     	;# 
  4064  0899                     	;# 
  4065  089A                     	;# 
  4066  089B                     	;# 
  4067  090C                     	;# 
  4068  090E                     	;# 
  4069  090F                     	;# 
  4070  091F                     	;# 
  4071  091F                     	;# 
  4072  098F                     	;# 
  4073  098F                     	;# 
  4074  0990                     	;# 
  4075  0991                     	;# 
  4076  0992                     	;# 
  4077  0993                     	;# 
  4078  0994                     	;# 
  4079  0995                     	;# 
  4080  0996                     	;# 
  4081  0997                     	;# 
  4082  0E0F                     	;# 
  4083  0E10                     	;# 
  4084  0E11                     	;# 
  4085  0E12                     	;# 
  4086  0E13                     	;# 
  4087  0E14                     	;# 
  4088  0E15                     	;# 
  4089  0E16                     	;# 
  4090  0E17                     	;# 
  4091  0E18                     	;# 
  4092  0E19                     	;# 
  4093  0E1A                     	;# 
  4094  0E1B                     	;# 
  4095  0E1C                     	;# 
  4096  0E1D                     	;# 
  4097  0E1E                     	;# 
  4098  0E1F                     	;# 
  4099  0E20                     	;# 
  4100  0E21                     	;# 
  4101  0E22                     	;# 
  4102  0E23                     	;# 
  4103  0E24                     	;# 
  4104  0E25                     	;# 
  4105  0E26                     	;# 
  4106  0E27                     	;# 
  4107  0E28                     	;# 
  4108  0E29                     	;# 
  4109  0E2A                     	;# 
  4110  0E2B                     	;# 
  4111  0E2C                     	;# 
  4112  0E2D                     	;# 
  4113  0E2E                     	;# 
  4114  0E2F                     	;# 
  4115  0E30                     	;# 
  4116  0E31                     	;# 
  4117  0E32                     	;# 
  4118  0E33                     	;# 
  4119  0E34                     	;# 
  4120  0E35                     	;# 
  4121  0E36                     	;# 
  4122  0E37                     	;# 
  4123  0E8F                     	;# 
  4124  0E90                     	;# 
  4125  0E91                     	;# 
  4126  0E92                     	;# 
  4127  0E93                     	;# 
  4128  0E94                     	;# 
  4129  0E95                     	;# 
  4130  0E96                     	;# 
  4131  0E97                     	;# 
  4132  0E9C                     	;# 
  4133  0E9D                     	;# 
  4134  0E9E                     	;# 
  4135  0EA1                     	;# 
  4136  0EA2                     	;# 
  4137  0EA3                     	;# 
  4138  0EA4                     	;# 
  4139  0EA5                     	;# 
  4140  0EA9                     	;# 
  4141  0EAA                     	;# 
  4142  0EAB                     	;# 
  4143  0EAC                     	;# 
  4144  0EB1                     	;# 
  4145  0EB2                     	;# 
  4146  0EB3                     	;# 
  4147  0EB8                     	;# 
  4148  0EB9                     	;# 
  4149  0EBA                     	;# 
  4150  0EBB                     	;# 
  4151  0EBC                     	;# 
  4152  0EBD                     	;# 
  4153  0EBE                     	;# 
  4154  0EC3                     	;# 
  4155  0EC5                     	;# 
  4156  0EC6                     	;# 
  4157  0EC7                     	;# 
  4158  0EC8                     	;# 
  4159  0EC9                     	;# 
  4160  0ECA                     	;# 
  4161  0ECB                     	;# 
  4162  0ECC                     	;# 
  4163  0F10                     	;# 
  4164  0F11                     	;# 
  4165  0F12                     	;# 
  4166  0F13                     	;# 
  4167  0F14                     	;# 
  4168  0F15                     	;# 
  4169  0F16                     	;# 
  4170  0F17                     	;# 
  4171  0F18                     	;# 
  4172  0F19                     	;# 
  4173  0F1A                     	;# 
  4174  0F1B                     	;# 
  4175  0F1C                     	;# 
  4176  0F1D                     	;# 
  4177  0F1E                     	;# 
  4178  0F1F                     	;# 
  4179  0F20                     	;# 
  4180  0F21                     	;# 
  4181  0F22                     	;# 
  4182  0F23                     	;# 
  4183  0F24                     	;# 
  4184  0F25                     	;# 
  4185  0F26                     	;# 
  4186  0F27                     	;# 
  4187  0F38                     	;# 
  4188  0F39                     	;# 
  4189  0F3A                     	;# 
  4190  0F3B                     	;# 
  4191  0F3C                     	;# 
  4192  0F3D                     	;# 
  4193  0F3E                     	;# 
  4194  0F3F                     	;# 
  4195  0F40                     	;# 
  4196  0F41                     	;# 
  4197  0F43                     	;# 
  4198  0F44                     	;# 
  4199  0F45                     	;# 
  4200  0F46                     	;# 
  4201  0F47                     	;# 
  4202  0F48                     	;# 
  4203  0F49                     	;# 
  4204  0F4A                     	;# 
  4205  0F4B                     	;# 
  4206  0F4C                     	;# 
  4207  0F4E                     	;# 
  4208  0F4F                     	;# 
  4209  0F50                     	;# 
  4210  0F51                     	;# 
  4211  0F52                     	;# 
  4212  0F53                     	;# 
  4213  0F54                     	;# 
  4214  0F55                     	;# 
  4215  0F56                     	;# 
  4216  0F57                     	;# 
  4217  0F65                     	;# 
  4218  0F68                     	;# 
  4219  0F69                     	;# 
  4220  0F6A                     	;# 
  4221  0F6B                     	;# 
  4222  0FE4                     	;# 
  4223  0FE5                     	;# 
  4224  0FE6                     	;# 
  4225  0FE7                     	;# 
  4226  0FE8                     	;# 
  4227  0FE9                     	;# 
  4228  0FEA                     	;# 
  4229  0FEB                     	;# 
  4230  0FED                     	;# 
  4231  0FEE                     	;# 
  4232  0FEF                     	;# 
  4233  0000                     	;# 
  4234  0001                     	;# 
  4235  0002                     	;# 
  4236  0003                     	;# 
  4237  0004                     	;# 
  4238  0005                     	;# 
  4239  0006                     	;# 
  4240  0007                     	;# 
  4241  0008                     	;# 
  4242  0009                     	;# 
  4243  000A                     	;# 
  4244  000B                     	;# 
  4245  000C                     	;# 
  4246  000D                     	;# 
  4247  000E                     	;# 
  4248  0010                     	;# 
  4249  0011                     	;# 
  4250  0012                     	;# 
  4251  0013                     	;# 
  4252  0016                     	;# 
  4253  0017                     	;# 
  4254  0018                     	;# 
  4255  001C                     	;# 
  4256  001C                     	;# 
  4257  001D                     	;# 
  4258  001D                     	;# 
  4259  001E                     	;# 
  4260  001F                     	;# 
  4261  008C                     	;# 
  4262  008C                     	;# 
  4263  008D                     	;# 
  4264  008E                     	;# 
  4265  008E                     	;# 
  4266  008F                     	;# 
  4267  0090                     	;# 
  4268  0090                     	;# 
  4269  0091                     	;# 
  4270  0093                     	;# 
  4271  0094                     	;# 
  4272  0095                     	;# 
  4273  0096                     	;# 
  4274  0097                     	;# 
  4275  0098                     	;# 
  4276  0099                     	;# 
  4277  009A                     	;# 
  4278  009B                     	;# 
  4279  009C                     	;# 
  4280  009D                     	;# 
  4281  009E                     	;# 
  4282  010C                     	;# 
  4283  010D                     	;# 
  4284  010E                     	;# 
  4285  010E                     	;# 
  4286  010F                     	;# 
  4287  0110                     	;# 
  4288  0110                     	;# 
  4289  0111                     	;# 
  4290  0112                     	;# 
  4291  0112                     	;# 
  4292  0113                     	;# 
  4293  0114                     	;# 
  4294  0114                     	;# 
  4295  0115                     	;# 
  4296  0116                     	;# 
  4297  0116                     	;# 
  4298  0117                     	;# 
  4299  0119                     	;# 
  4300  0119                     	;# 
  4301  0119                     	;# 
  4302  011A                     	;# 
  4303  011A                     	;# 
  4304  011A                     	;# 
  4305  011B                     	;# 
  4306  011B                     	;# 
  4307  011B                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011C                     	;# 
  4311  011C                     	;# 
  4312  011C                     	;# 
  4313  011D                     	;# 
  4314  011D                     	;# 
  4315  011D                     	;# 
  4316  011E                     	;# 
  4317  011E                     	;# 
  4318  011E                     	;# 
  4319  011F                     	;# 
  4320  011F                     	;# 
  4321  011F                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  018C                     	;# 
  4325  018D                     	;# 
  4326  018E                     	;# 
  4327  018F                     	;# 
  4328  0190                     	;# 
  4329  0191                     	;# 
  4330  0192                     	;# 
  4331  0196                     	;# 
  4332  0197                     	;# 
  4333  0198                     	;# 
  4334  0199                     	;# 
  4335  019A                     	;# 
  4336  019B                     	;# 
  4337  019C                     	;# 
  4338  020C                     	;# 
  4339  020C                     	;# 
  4340  020D                     	;# 
  4341  020E                     	;# 
  4342  020F                     	;# 
  4343  020F                     	;# 
  4344  0210                     	;# 
  4345  0210                     	;# 
  4346  0211                     	;# 
  4347  0211                     	;# 
  4348  0212                     	;# 
  4349  0212                     	;# 
  4350  0213                     	;# 
  4351  0214                     	;# 
  4352  0215                     	;# 
  4353  0215                     	;# 
  4354  0216                     	;# 
  4355  0216                     	;# 
  4356  0217                     	;# 
  4357  0217                     	;# 
  4358  0218                     	;# 
  4359  0218                     	;# 
  4360  0219                     	;# 
  4361  021A                     	;# 
  4362  021B                     	;# 
  4363  021B                     	;# 
  4364  021C                     	;# 
  4365  021C                     	;# 
  4366  021D                     	;# 
  4367  021D                     	;# 
  4368  021E                     	;# 
  4369  021F                     	;# 
  4370  028C                     	;# 
  4371  028C                     	;# 
  4372  028D                     	;# 
  4373  028D                     	;# 
  4374  028E                     	;# 
  4375  028F                     	;# 
  4376  0290                     	;# 
  4377  0290                     	;# 
  4378  0291                     	;# 
  4379  0292                     	;# 
  4380  0292                     	;# 
  4381  0293                     	;# 
  4382  0293                     	;# 
  4383  0294                     	;# 
  4384  0295                     	;# 
  4385  0296                     	;# 
  4386  0296                     	;# 
  4387  0297                     	;# 
  4388  0298                     	;# 
  4389  0298                     	;# 
  4390  0299                     	;# 
  4391  0299                     	;# 
  4392  029A                     	;# 
  4393  029B                     	;# 
  4394  029C                     	;# 
  4395  029C                     	;# 
  4396  029D                     	;# 
  4397  030C                     	;# 
  4398  030C                     	;# 
  4399  030D                     	;# 
  4400  030E                     	;# 
  4401  030F                     	;# 
  4402  0310                     	;# 
  4403  0310                     	;# 
  4404  0311                     	;# 
  4405  0312                     	;# 
  4406  0313                     	;# 
  4407  0314                     	;# 
  4408  0314                     	;# 
  4409  0315                     	;# 
  4410  0316                     	;# 
  4411  0317                     	;# 
  4412  0318                     	;# 
  4413  0318                     	;# 
  4414  0319                     	;# 
  4415  031A                     	;# 
  4416  031B                     	;# 
  4417  031C                     	;# 
  4418  031C                     	;# 
  4419  031D                     	;# 
  4420  031E                     	;# 
  4421  031F                     	;# 
  4422  038C                     	;# 
  4423  038D                     	;# 
  4424  038E                     	;# 
  4425  0390                     	;# 
  4426  0391                     	;# 
  4427  0392                     	;# 
  4428  040C                     	;# 
  4429  040D                     	;# 
  4430  040E                     	;# 
  4431  040F                     	;# 
  4432  0410                     	;# 
  4433  0411                     	;# 
  4434  0416                     	;# 
  4435  0416                     	;# 
  4436  0417                     	;# 
  4437  0418                     	;# 
  4438  0418                     	;# 
  4439  0419                     	;# 
  4440  041A                     	;# 
  4441  041A                     	;# 
  4442  041B                     	;# 
  4443  041C                     	;# 
  4444  041C                     	;# 
  4445  041D                     	;# 
  4446  041E                     	;# 
  4447  041F                     	;# 
  4448  048C                     	;# 
  4449  048C                     	;# 
  4450  048D                     	;# 
  4451  048E                     	;# 
  4452  048F                     	;# 
  4453  048F                     	;# 
  4454  0490                     	;# 
  4455  0491                     	;# 
  4456  0492                     	;# 
  4457  0492                     	;# 
  4458  0493                     	;# 
  4459  0494                     	;# 
  4460  0495                     	;# 
  4461  0495                     	;# 
  4462  0496                     	;# 
  4463  0497                     	;# 
  4464  0498                     	;# 
  4465  0499                     	;# 
  4466  049A                     	;# 
  4467  049B                     	;# 
  4468  049C                     	;# 
  4469  049D                     	;# 
  4470  050C                     	;# 
  4471  050C                     	;# 
  4472  050D                     	;# 
  4473  050E                     	;# 
  4474  050F                     	;# 
  4475  050F                     	;# 
  4476  0510                     	;# 
  4477  0511                     	;# 
  4478  0512                     	;# 
  4479  0512                     	;# 
  4480  0513                     	;# 
  4481  0514                     	;# 
  4482  0515                     	;# 
  4483  0515                     	;# 
  4484  0516                     	;# 
  4485  0517                     	;# 
  4486  0518                     	;# 
  4487  0519                     	;# 
  4488  051A                     	;# 
  4489  051B                     	;# 
  4490  051C                     	;# 
  4491  051D                     	;# 
  4492  058C                     	;# 
  4493  058C                     	;# 
  4494  058D                     	;# 
  4495  058E                     	;# 
  4496  058F                     	;# 
  4497  058F                     	;# 
  4498  0590                     	;# 
  4499  0591                     	;# 
  4500  0592                     	;# 
  4501  0593                     	;# 
  4502  060C                     	;# 
  4503  060D                     	;# 
  4504  060E                     	;# 
  4505  060F                     	;# 
  4506  0610                     	;# 
  4507  0611                     	;# 
  4508  0612                     	;# 
  4509  0613                     	;# 
  4510  0614                     	;# 
  4511  0616                     	;# 
  4512  0617                     	;# 
  4513  0618                     	;# 
  4514  0619                     	;# 
  4515  061A                     	;# 
  4516  061B                     	;# 
  4517  061C                     	;# 
  4518  061D                     	;# 
  4519  061E                     	;# 
  4520  068C                     	;# 
  4521  068D                     	;# 
  4522  068E                     	;# 
  4523  068F                     	;# 
  4524  0690                     	;# 
  4525  0691                     	;# 
  4526  0692                     	;# 
  4527  0693                     	;# 
  4528  0694                     	;# 
  4529  070C                     	;# 
  4530  070D                     	;# 
  4531  070E                     	;# 
  4532  070F                     	;# 
  4533  0710                     	;# 
  4534  0711                     	;# 
  4535  0712                     	;# 
  4536  0713                     	;# 
  4537  0714                     	;# 
  4538  0716                     	;# 
  4539  0717                     	;# 
  4540  0718                     	;# 
  4541  0719                     	;# 
  4542  071A                     	;# 
  4543  071B                     	;# 
  4544  071C                     	;# 
  4545  071D                     	;# 
  4546  071E                     	;# 
  4547  0796                     	;# 
  4548  0797                     	;# 
  4549  0798                     	;# 
  4550  0799                     	;# 
  4551  079A                     	;# 
  4552  079B                     	;# 
  4553  080C                     	;# 
  4554  080D                     	;# 
  4555  080E                     	;# 
  4556  080F                     	;# 
  4557  0810                     	;# 
  4558  0811                     	;# 
  4559  0812                     	;# 
  4560  0813                     	;# 
  4561  0814                     	;# 
  4562  081A                     	;# 
  4563  081B                     	;# 
  4564  081C                     	;# 
  4565  081D                     	;# 
  4566  081E                     	;# 
  4567  081F                     	;# 
  4568  088C                     	;# 
  4569  088D                     	;# 
  4570  088E                     	;# 
  4571  088F                     	;# 
  4572  0890                     	;# 
  4573  0891                     	;# 
  4574  0892                     	;# 
  4575  0893                     	;# 
  4576  0895                     	;# 
  4577  0896                     	;# 
  4578  0897                     	;# 
  4579  0898                     	;# 
  4580  0899                     	;# 
  4581  089A                     	;# 
  4582  089B                     	;# 
  4583  090C                     	;# 
  4584  090E                     	;# 
  4585  090F                     	;# 
  4586  091F                     	;# 
  4587  091F                     	;# 
  4588  098F                     	;# 
  4589  098F                     	;# 
  4590  0990                     	;# 
  4591  0991                     	;# 
  4592  0992                     	;# 
  4593  0993                     	;# 
  4594  0994                     	;# 
  4595  0995                     	;# 
  4596  0996                     	;# 
  4597  0997                     	;# 
  4598  0E0F                     	;# 
  4599  0E10                     	;# 
  4600  0E11                     	;# 
  4601  0E12                     	;# 
  4602  0E13                     	;# 
  4603  0E14                     	;# 
  4604  0E15                     	;# 
  4605  0E16                     	;# 
  4606  0E17                     	;# 
  4607  0E18                     	;# 
  4608  0E19                     	;# 
  4609  0E1A                     	;# 
  4610  0E1B                     	;# 
  4611  0E1C                     	;# 
  4612  0E1D                     	;# 
  4613  0E1E                     	;# 
  4614  0E1F                     	;# 
  4615  0E20                     	;# 
  4616  0E21                     	;# 
  4617  0E22                     	;# 
  4618  0E23                     	;# 
  4619  0E24                     	;# 
  4620  0E25                     	;# 
  4621  0E26                     	;# 
  4622  0E27                     	;# 
  4623  0E28                     	;# 
  4624  0E29                     	;# 
  4625  0E2A                     	;# 
  4626  0E2B                     	;# 
  4627  0E2C                     	;# 
  4628  0E2D                     	;# 
  4629  0E2E                     	;# 
  4630  0E2F                     	;# 
  4631  0E30                     	;# 
  4632  0E31                     	;# 
  4633  0E32                     	;# 
  4634  0E33                     	;# 
  4635  0E34                     	;# 
  4636  0E35                     	;# 
  4637  0E36                     	;# 
  4638  0E37                     	;# 
  4639  0E8F                     	;# 
  4640  0E90                     	;# 
  4641  0E91                     	;# 
  4642  0E92                     	;# 
  4643  0E93                     	;# 
  4644  0E94                     	;# 
  4645  0E95                     	;# 
  4646  0E96                     	;# 
  4647  0E97                     	;# 
  4648  0E9C                     	;# 
  4649  0E9D                     	;# 
  4650  0E9E                     	;# 
  4651  0EA1                     	;# 
  4652  0EA2                     	;# 
  4653  0EA3                     	;# 
  4654  0EA4                     	;# 
  4655  0EA5                     	;# 
  4656  0EA9                     	;# 
  4657  0EAA                     	;# 
  4658  0EAB                     	;# 
  4659  0EAC                     	;# 
  4660  0EB1                     	;# 
  4661  0EB2                     	;# 
  4662  0EB3                     	;# 
  4663  0EB8                     	;# 
  4664  0EB9                     	;# 
  4665  0EBA                     	;# 
  4666  0EBB                     	;# 
  4667  0EBC                     	;# 
  4668  0EBD                     	;# 
  4669  0EBE                     	;# 
  4670  0EC3                     	;# 
  4671  0EC5                     	;# 
  4672  0EC6                     	;# 
  4673  0EC7                     	;# 
  4674  0EC8                     	;# 
  4675  0EC9                     	;# 
  4676  0ECA                     	;# 
  4677  0ECB                     	;# 
  4678  0ECC                     	;# 
  4679  0F10                     	;# 
  4680  0F11                     	;# 
  4681  0F12                     	;# 
  4682  0F13                     	;# 
  4683  0F14                     	;# 
  4684  0F15                     	;# 
  4685  0F16                     	;# 
  4686  0F17                     	;# 
  4687  0F18                     	;# 
  4688  0F19                     	;# 
  4689  0F1A                     	;# 
  4690  0F1B                     	;# 
  4691  0F1C                     	;# 
  4692  0F1D                     	;# 
  4693  0F1E                     	;# 
  4694  0F1F                     	;# 
  4695  0F20                     	;# 
  4696  0F21                     	;# 
  4697  0F22                     	;# 
  4698  0F23                     	;# 
  4699  0F24                     	;# 
  4700  0F25                     	;# 
  4701  0F26                     	;# 
  4702  0F27                     	;# 
  4703  0F38                     	;# 
  4704  0F39                     	;# 
  4705  0F3A                     	;# 
  4706  0F3B                     	;# 
  4707  0F3C                     	;# 
  4708  0F3D                     	;# 
  4709  0F3E                     	;# 
  4710  0F3F                     	;# 
  4711  0F40                     	;# 
  4712  0F41                     	;# 
  4713  0F43                     	;# 
  4714  0F44                     	;# 
  4715  0F45                     	;# 
  4716  0F46                     	;# 
  4717  0F47                     	;# 
  4718  0F48                     	;# 
  4719  0F49                     	;# 
  4720  0F4A                     	;# 
  4721  0F4B                     	;# 
  4722  0F4C                     	;# 
  4723  0F4E                     	;# 
  4724  0F4F                     	;# 
  4725  0F50                     	;# 
  4726  0F51                     	;# 
  4727  0F52                     	;# 
  4728  0F53                     	;# 
  4729  0F54                     	;# 
  4730  0F55                     	;# 
  4731  0F56                     	;# 
  4732  0F57                     	;# 
  4733  0F65                     	;# 
  4734  0F68                     	;# 
  4735  0F69                     	;# 
  4736  0F6A                     	;# 
  4737  0F6B                     	;# 
  4738  0FE4                     	;# 
  4739  0FE5                     	;# 
  4740  0FE6                     	;# 
  4741  0FE7                     	;# 
  4742  0FE8                     	;# 
  4743  0FE9                     	;# 
  4744  0FEA                     	;# 
  4745  0FEB                     	;# 
  4746  0FED                     	;# 
  4747  0FEE                     	;# 
  4748  0FEF                     	;# 
  4749  0000                     	;# 
  4750  0001                     	;# 
  4751  0002                     	;# 
  4752  0003                     	;# 
  4753  0004                     	;# 
  4754  0005                     	;# 
  4755  0006                     	;# 
  4756  0007                     	;# 
  4757  0008                     	;# 
  4758  0009                     	;# 
  4759  000A                     	;# 
  4760  000B                     	;# 
  4761  000C                     	;# 
  4762  000D                     	;# 
  4763  000E                     	;# 
  4764  0010                     	;# 
  4765  0011                     	;# 
  4766  0012                     	;# 
  4767  0013                     	;# 
  4768  0016                     	;# 
  4769  0017                     	;# 
  4770  0018                     	;# 
  4771  001C                     	;# 
  4772  001C                     	;# 
  4773  001D                     	;# 
  4774  001D                     	;# 
  4775  001E                     	;# 
  4776  001F                     	;# 
  4777  008C                     	;# 
  4778  008C                     	;# 
  4779  008D                     	;# 
  4780  008E                     	;# 
  4781  008E                     	;# 
  4782  008F                     	;# 
  4783  0090                     	;# 
  4784  0090                     	;# 
  4785  0091                     	;# 
  4786  0093                     	;# 
  4787  0094                     	;# 
  4788  0095                     	;# 
  4789  0096                     	;# 
  4790  0097                     	;# 
  4791  0098                     	;# 
  4792  0099                     	;# 
  4793  009A                     	;# 
  4794  009B                     	;# 
  4795  009C                     	;# 
  4796  009D                     	;# 
  4797  009E                     	;# 
  4798  010C                     	;# 
  4799  010D                     	;# 
  4800  010E                     	;# 
  4801  010E                     	;# 
  4802  010F                     	;# 
  4803  0110                     	;# 
  4804  0110                     	;# 
  4805  0111                     	;# 
  4806  0112                     	;# 
  4807  0112                     	;# 
  4808  0113                     	;# 
  4809  0114                     	;# 
  4810  0114                     	;# 
  4811  0115                     	;# 
  4812  0116                     	;# 
  4813  0116                     	;# 
  4814  0117                     	;# 
  4815  0119                     	;# 
  4816  0119                     	;# 
  4817  0119                     	;# 
  4818  011A                     	;# 
  4819  011A                     	;# 
  4820  011A                     	;# 
  4821  011B                     	;# 
  4822  011B                     	;# 
  4823  011B                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011C                     	;# 
  4827  011C                     	;# 
  4828  011C                     	;# 
  4829  011D                     	;# 
  4830  011D                     	;# 
  4831  011D                     	;# 
  4832  011E                     	;# 
  4833  011E                     	;# 
  4834  011E                     	;# 
  4835  011F                     	;# 
  4836  011F                     	;# 
  4837  011F                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  018C                     	;# 
  4841  018D                     	;# 
  4842  018E                     	;# 
  4843  018F                     	;# 
  4844  0190                     	;# 
  4845  0191                     	;# 
  4846  0192                     	;# 
  4847  0196                     	;# 
  4848  0197                     	;# 
  4849  0198                     	;# 
  4850  0199                     	;# 
  4851  019A                     	;# 
  4852  019B                     	;# 
  4853  019C                     	;# 
  4854  020C                     	;# 
  4855  020C                     	;# 
  4856  020D                     	;# 
  4857  020E                     	;# 
  4858  020F                     	;# 
  4859  020F                     	;# 
  4860  0210                     	;# 
  4861  0210                     	;# 
  4862  0211                     	;# 
  4863  0211                     	;# 
  4864  0212                     	;# 
  4865  0212                     	;# 
  4866  0213                     	;# 
  4867  0214                     	;# 
  4868  0215                     	;# 
  4869  0215                     	;# 
  4870  0216                     	;# 
  4871  0216                     	;# 
  4872  0217                     	;# 
  4873  0217                     	;# 
  4874  0218                     	;# 
  4875  0218                     	;# 
  4876  0219                     	;# 
  4877  021A                     	;# 
  4878  021B                     	;# 
  4879  021B                     	;# 
  4880  021C                     	;# 
  4881  021C                     	;# 
  4882  021D                     	;# 
  4883  021D                     	;# 
  4884  021E                     	;# 
  4885  021F                     	;# 
  4886  028C                     	;# 
  4887  028C                     	;# 
  4888  028D                     	;# 
  4889  028D                     	;# 
  4890  028E                     	;# 
  4891  028F                     	;# 
  4892  0290                     	;# 
  4893  0290                     	;# 
  4894  0291                     	;# 
  4895  0292                     	;# 
  4896  0292                     	;# 
  4897  0293                     	;# 
  4898  0293                     	;# 
  4899  0294                     	;# 
  4900  0295                     	;# 
  4901  0296                     	;# 
  4902  0296                     	;# 
  4903  0297                     	;# 
  4904  0298                     	;# 
  4905  0298                     	;# 
  4906  0299                     	;# 
  4907  0299                     	;# 
  4908  029A                     	;# 
  4909  029B                     	;# 
  4910  029C                     	;# 
  4911  029C                     	;# 
  4912  029D                     	;# 
  4913  030C                     	;# 
  4914  030C                     	;# 
  4915  030D                     	;# 
  4916  030E                     	;# 
  4917  030F                     	;# 
  4918  0310                     	;# 
  4919  0310                     	;# 
  4920  0311                     	;# 
  4921  0312                     	;# 
  4922  0313                     	;# 
  4923  0314                     	;# 
  4924  0314                     	;# 
  4925  0315                     	;# 
  4926  0316                     	;# 
  4927  0317                     	;# 
  4928  0318                     	;# 
  4929  0318                     	;# 
  4930  0319                     	;# 
  4931  031A                     	;# 
  4932  031B                     	;# 
  4933  031C                     	;# 
  4934  031C                     	;# 
  4935  031D                     	;# 
  4936  031E                     	;# 
  4937  031F                     	;# 
  4938  038C                     	;# 
  4939  038D                     	;# 
  4940  038E                     	;# 
  4941  0390                     	;# 
  4942  0391                     	;# 
  4943  0392                     	;# 
  4944  040C                     	;# 
  4945  040D                     	;# 
  4946  040E                     	;# 
  4947  040F                     	;# 
  4948  0410                     	;# 
  4949  0411                     	;# 
  4950  0416                     	;# 
  4951  0416                     	;# 
  4952  0417                     	;# 
  4953  0418                     	;# 
  4954  0418                     	;# 
  4955  0419                     	;# 
  4956  041A                     	;# 
  4957  041A                     	;# 
  4958  041B                     	;# 
  4959  041C                     	;# 
  4960  041C                     	;# 
  4961  041D                     	;# 
  4962  041E                     	;# 
  4963  041F                     	;# 
  4964  048C                     	;# 
  4965  048C                     	;# 
  4966  048D                     	;# 
  4967  048E                     	;# 
  4968  048F                     	;# 
  4969  048F                     	;# 
  4970  0490                     	;# 
  4971  0491                     	;# 
  4972  0492                     	;# 
  4973  0492                     	;# 
  4974  0493                     	;# 
  4975  0494                     	;# 
  4976  0495                     	;# 
  4977  0495                     	;# 
  4978  0496                     	;# 
  4979  0497                     	;# 
  4980  0498                     	;# 
  4981  0499                     	;# 
  4982  049A                     	;# 
  4983  049B                     	;# 
  4984  049C                     	;# 
  4985  049D                     	;# 
  4986  050C                     	;# 
  4987  050C                     	;# 
  4988  050D                     	;# 
  4989  050E                     	;# 
  4990  050F                     	;# 
  4991  050F                     	;# 
  4992  0510                     	;# 
  4993  0511                     	;# 
  4994  0512                     	;# 
  4995  0512                     	;# 
  4996  0513                     	;# 
  4997  0514                     	;# 
  4998  0515                     	;# 
  4999  0515                     	;# 
  5000  0516                     	;# 
  5001  0517                     	;# 
  5002  0518                     	;# 
  5003  0519                     	;# 
  5004  051A                     	;# 
  5005  051B                     	;# 
  5006  051C                     	;# 
  5007  051D                     	;# 
  5008  058C                     	;# 
  5009  058C                     	;# 
  5010  058D                     	;# 
  5011  058E                     	;# 
  5012  058F                     	;# 
  5013  058F                     	;# 
  5014  0590                     	;# 
  5015  0591                     	;# 
  5016  0592                     	;# 
  5017  0593                     	;# 
  5018  060C                     	;# 
  5019  060D                     	;# 
  5020  060E                     	;# 
  5021  060F                     	;# 
  5022  0610                     	;# 
  5023  0611                     	;# 
  5024  0612                     	;# 
  5025  0613                     	;# 
  5026  0614                     	;# 
  5027  0616                     	;# 
  5028  0617                     	;# 
  5029  0618                     	;# 
  5030  0619                     	;# 
  5031  061A                     	;# 
  5032  061B                     	;# 
  5033  061C                     	;# 
  5034  061D                     	;# 
  5035  061E                     	;# 
  5036  068C                     	;# 
  5037  068D                     	;# 
  5038  068E                     	;# 
  5039  068F                     	;# 
  5040  0690                     	;# 
  5041  0691                     	;# 
  5042  0692                     	;# 
  5043  0693                     	;# 
  5044  0694                     	;# 
  5045  070C                     	;# 
  5046  070D                     	;# 
  5047  070E                     	;# 
  5048  070F                     	;# 
  5049  0710                     	;# 
  5050  0711                     	;# 
  5051  0712                     	;# 
  5052  0713                     	;# 
  5053  0714                     	;# 
  5054  0716                     	;# 
  5055  0717                     	;# 
  5056  0718                     	;# 
  5057  0719                     	;# 
  5058  071A                     	;# 
  5059  071B                     	;# 
  5060  071C                     	;# 
  5061  071D                     	;# 
  5062  071E                     	;# 
  5063  0796                     	;# 
  5064  0797                     	;# 
  5065  0798                     	;# 
  5066  0799                     	;# 
  5067  079A                     	;# 
  5068  079B                     	;# 
  5069  080C                     	;# 
  5070  080D                     	;# 
  5071  080E                     	;# 
  5072  080F                     	;# 
  5073  0810                     	;# 
  5074  0811                     	;# 
  5075  0812                     	;# 
  5076  0813                     	;# 
  5077  0814                     	;# 
  5078  081A                     	;# 
  5079  081B                     	;# 
  5080  081C                     	;# 
  5081  081D                     	;# 
  5082  081E                     	;# 
  5083  081F                     	;# 
  5084  088C                     	;# 
  5085  088D                     	;# 
  5086  088E                     	;# 
  5087  088F                     	;# 
  5088  0890                     	;# 
  5089  0891                     	;# 
  5090  0892                     	;# 
  5091  0893                     	;# 
  5092  0895                     	;# 
  5093  0896                     	;# 
  5094  0897                     	;# 
  5095  0898                     	;# 
  5096  0899                     	;# 
  5097  089A                     	;# 
  5098  089B                     	;# 
  5099  090C                     	;# 
  5100  090E                     	;# 
  5101  090F                     	;# 
  5102  091F                     	;# 
  5103  091F                     	;# 
  5104  098F                     	;# 
  5105  098F                     	;# 
  5106  0990                     	;# 
  5107  0991                     	;# 
  5108  0992                     	;# 
  5109  0993                     	;# 
  5110  0994                     	;# 
  5111  0995                     	;# 
  5112  0996                     	;# 
  5113  0997                     	;# 
  5114  0E0F                     	;# 
  5115  0E10                     	;# 
  5116  0E11                     	;# 
  5117  0E12                     	;# 
  5118  0E13                     	;# 
  5119  0E14                     	;# 
  5120  0E15                     	;# 
  5121  0E16                     	;# 
  5122  0E17                     	;# 
  5123  0E18                     	;# 
  5124  0E19                     	;# 
  5125  0E1A                     	;# 
  5126  0E1B                     	;# 
  5127  0E1C                     	;# 
  5128  0E1D                     	;# 
  5129  0E1E                     	;# 
  5130  0E1F                     	;# 
  5131  0E20                     	;# 
  5132  0E21                     	;# 
  5133  0E22                     	;# 
  5134  0E23                     	;# 
  5135  0E24                     	;# 
  5136  0E25                     	;# 
  5137  0E26                     	;# 
  5138  0E27                     	;# 
  5139  0E28                     	;# 
  5140  0E29                     	;# 
  5141  0E2A                     	;# 
  5142  0E2B                     	;# 
  5143  0E2C                     	;# 
  5144  0E2D                     	;# 
  5145  0E2E                     	;# 
  5146  0E2F                     	;# 
  5147  0E30                     	;# 
  5148  0E31                     	;# 
  5149  0E32                     	;# 
  5150  0E33                     	;# 
  5151  0E34                     	;# 
  5152  0E35                     	;# 
  5153  0E36                     	;# 
  5154  0E37                     	;# 
  5155  0E8F                     	;# 
  5156  0E90                     	;# 
  5157  0E91                     	;# 
  5158  0E92                     	;# 
  5159  0E93                     	;# 
  5160  0E94                     	;# 
  5161  0E95                     	;# 
  5162  0E96                     	;# 
  5163  0E97                     	;# 
  5164  0E9C                     	;# 
  5165  0E9D                     	;# 
  5166  0E9E                     	;# 
  5167  0EA1                     	;# 
  5168  0EA2                     	;# 
  5169  0EA3                     	;# 
  5170  0EA4                     	;# 
  5171  0EA5                     	;# 
  5172  0EA9                     	;# 
  5173  0EAA                     	;# 
  5174  0EAB                     	;# 
  5175  0EAC                     	;# 
  5176  0EB1                     	;# 
  5177  0EB2                     	;# 
  5178  0EB3                     	;# 
  5179  0EB8                     	;# 
  5180  0EB9                     	;# 
  5181  0EBA                     	;# 
  5182  0EBB                     	;# 
  5183  0EBC                     	;# 
  5184  0EBD                     	;# 
  5185  0EBE                     	;# 
  5186  0EC3                     	;# 
  5187  0EC5                     	;# 
  5188  0EC6                     	;# 
  5189  0EC7                     	;# 
  5190  0EC8                     	;# 
  5191  0EC9                     	;# 
  5192  0ECA                     	;# 
  5193  0ECB                     	;# 
  5194  0ECC                     	;# 
  5195  0F10                     	;# 
  5196  0F11                     	;# 
  5197  0F12                     	;# 
  5198  0F13                     	;# 
  5199  0F14                     	;# 
  5200  0F15                     	;# 
  5201  0F16                     	;# 
  5202  0F17                     	;# 
  5203  0F18                     	;# 
  5204  0F19                     	;# 
  5205  0F1A                     	;# 
  5206  0F1B                     	;# 
  5207  0F1C                     	;# 
  5208  0F1D                     	;# 
  5209  0F1E                     	;# 
  5210  0F1F                     	;# 
  5211  0F20                     	;# 
  5212  0F21                     	;# 
  5213  0F22                     	;# 
  5214  0F23                     	;# 
  5215  0F24                     	;# 
  5216  0F25                     	;# 
  5217  0F26                     	;# 
  5218  0F27                     	;# 
  5219  0F38                     	;# 
  5220  0F39                     	;# 
  5221  0F3A                     	;# 
  5222  0F3B                     	;# 
  5223  0F3C                     	;# 
  5224  0F3D                     	;# 
  5225  0F3E                     	;# 
  5226  0F3F                     	;# 
  5227  0F40                     	;# 
  5228  0F41                     	;# 
  5229  0F43                     	;# 
  5230  0F44                     	;# 
  5231  0F45                     	;# 
  5232  0F46                     	;# 
  5233  0F47                     	;# 
  5234  0F48                     	;# 
  5235  0F49                     	;# 
  5236  0F4A                     	;# 
  5237  0F4B                     	;# 
  5238  0F4C                     	;# 
  5239  0F4E                     	;# 
  5240  0F4F                     	;# 
  5241  0F50                     	;# 
  5242  0F51                     	;# 
  5243  0F52                     	;# 
  5244  0F53                     	;# 
  5245  0F54                     	;# 
  5246  0F55                     	;# 
  5247  0F56                     	;# 
  5248  0F57                     	;# 
  5249  0F65                     	;# 
  5250  0F68                     	;# 
  5251  0F69                     	;# 
  5252  0F6A                     	;# 
  5253  0F6B                     	;# 
  5254  0FE4                     	;# 
  5255  0FE5                     	;# 
  5256  0FE6                     	;# 
  5257  0FE7                     	;# 
  5258  0FE8                     	;# 
  5259  0FE9                     	;# 
  5260  0FEA                     	;# 
  5261  0FEB                     	;# 
  5262  0FED                     	;# 
  5263  0FEE                     	;# 
  5264  0FEF                     	;# 
  5265                           
  5266 ;; Function _EUSART_is_tx_ready is unused but had its address taken
  5267  0000                     
  5268 ;; Function _EUSART_is_tx_done is unused but had its address taken
  5269  0000                     
  5270                           	psect	idataBANK1
  5271  0FE2                     __pidataBANK1:	
  5272                           
  5273                           ;initializer for Knock@F14741
  5274  0FE2  346B               	retlw	107
  5275  0FE3  346E               	retlw	110
  5276  0FE4  346F               	retlw	111
  5277  0FE5  3463               	retlw	99
  5278  0FE6  346B               	retlw	107
  5279  0FE7  3420               	retlw	32
  5280  0FE8  3431               	retlw	49
  5281  0FE9  3432               	retlw	50
  5282  0FEA  3433               	retlw	51
  5283  0FEB  3400               	retlw	0
  5284                           
  5285                           ;initializer for Pair@F14733
  5286  0FEC  3470               	retlw	112
  5287  0FED  3461               	retlw	97
  5288  0FEE  3469               	retlw	105
  5289  0FEF  3472               	retlw	114
  5290  0FF0  3420               	retlw	32
  5291  0FF1  3431               	retlw	49
  5292  0FF2  3432               	retlw	50
  5293  0FF3  3433               	retlw	51
  5294  0FF4  3400               	retlw	0
  5295                           
  5296                           ;initializer for _failedStr
  5297  0FF5  3446               	retlw	70
  5298  0FF6  3441               	retlw	65
  5299  0FF7  3449               	retlw	73
  5300  0FF8  344C               	retlw	76
  5301  0FF9  3445               	retlw	69
  5302  0FFA  3444               	retlw	68
  5303  0FFB  3400               	retlw	0
  5304                           
  5305                           ;initializer for _errStr
  5306  0FFC  3445               	retlw	69
  5307  0FFD  3452               	retlw	82
  5308  0FFE  3452               	retlw	82
  5309  0FFF  3400               	retlw	0
  5310                           
  5311                           	psect	idataBANK2
  5312  0F73                     __pidataBANK2:	
  5313                           
  5314                           ;initializer for Validate@F14737
  5315  0F73  3476               	retlw	118
  5316  0F74  3461               	retlw	97
  5317  0F75  346C               	retlw	108
  5318  0F76  3469               	retlw	105
  5319  0F77  3464               	retlw	100
  5320  0F78  3461               	retlw	97
  5321  0F79  3474               	retlw	116
  5322  0F7A  3465               	retlw	101
  5323  0F7B  3420               	retlw	32
  5324  0F7C  3431               	retlw	49
  5325  0F7D  3432               	retlw	50
  5326  0F7E  3433               	retlw	51
  5327  0F7F  3400               	retlw	0
  5328                           
  5329                           	psect	stringtext1
  5330  1043                     __pstringtext1:	
  5331  1043                     _uart:	
  5332  1043  3448               	retlw	low _EUSART_is_rx_ready
  5333  1044  3402               	retlw	high _EUSART_is_rx_ready
  5334  1045  3404               	retlw	low _EUSART_Initialize
  5335  1046  3407               	retlw	high _EUSART_Initialize
  5336  1047  34AE               	retlw	low _EUSART_Read
  5337  1048  340F               	retlw	high _EUSART_Read
  5338  1049  3480               	retlw	low _EUSART_Receive_ISR
  5339  104A  340F               	retlw	high _EUSART_Receive_ISR
  5340  104B  3444               	retlw	low _EUSART_SetRxInterruptHandler
  5341  104C  3407               	retlw	high _EUSART_SetRxInterruptHandler
  5342  104D  342B               	retlw	low _EUSART_SetTxInterruptHandler
  5343  104E  3407               	retlw	high _EUSART_SetTxInterruptHandler
  5344  104F  3400               	retlw	0
  5345  1050  3400               	retlw	0
  5346  1051  3400               	retlw	0
  5347  1052  3400               	retlw	0
  5348  1053  3496               	retlw	low _EUSART_Transmit_ISR
  5349  1054  340F               	retlw	high _EUSART_Transmit_ISR
  5350  1055  34C6               	retlw	low _EUSART_Write
  5351  1056  340F               	retlw	high _EUSART_Write
  5352  1057                     __end_of_uart:	
  5353                           
  5354                           	psect	stringtext2
  5355  10ED                     __pstringtext2:	
  5356  10ED                     _dpowers:	
  5357  10ED  3401               	retlw	1
  5358  10EE  3400               	retlw	0
  5359  10EF  340A               	retlw	10
  5360  10F0  3400               	retlw	0
  5361  10F1  3464               	retlw	100
  5362  10F2  3400               	retlw	0
  5363  10F3  34E8               	retlw	232
  5364  10F4  3403               	retlw	3
  5365  10F5  3410               	retlw	16
  5366  10F6  3427               	retlw	39
  5367  10F7                     __end_of_dpowers:	
  5368                           
  5369                           	psect	stringtext3
  5370  111D                     __pstringtext3:	
  5371  111D                     _hexpowers:	
  5372  111D  3401               	retlw	1
  5373  111E  3400               	retlw	0
  5374  111F  3410               	retlw	16
  5375  1120  3400               	retlw	0
  5376  1121  3400               	retlw	0
  5377  1122  3401               	retlw	1
  5378  1123  3400               	retlw	0
  5379  1124  3410               	retlw	16
  5380  1125                     __end_of_hexpowers:	
  5381                           
  5382                           	psect	stringtext4
  5383  112D                     __pstringtext4:	
  5384  112D                     _softRebootStr:	
  5385  112D  3452               	retlw	82
  5386  112E  3465               	retlw	101
  5387  112F  3462               	retlw	98
  5388  1130  346F               	retlw	111
  5389  1131  346F               	retlw	111
  5390  1132  3474               	retlw	116
  5391  1133  3400               	retlw	0
  5392  1134                     __end_of_softRebootStr:	
  5393                           
  5394                           	psect	stringtext5
  5395  1157                     __pstringtext5:	
  5396  1157                     _hardRebootStr:	
  5397  1157  3452               	retlw	82
  5398  1158  3445               	retlw	69
  5399  1159  3441               	retlw	65
  5400  115A  3444               	retlw	68
  5401  115B  3459               	retlw	89
  5402  115C  3400               	retlw	0
  5403  115D                     __end_of_hardRebootStr:	
  5404                           
  5405                           	psect	stringtext6
  5406  1163                     __pstringtext6:	
  5407  1163                     _openStr:	
  5408  1163  344F               	retlw	79
  5409  1164  3450               	retlw	80
  5410  1165  3445               	retlw	69
  5411  1166  344E               	retlw	78
  5412  1167  3400               	retlw	0
  5413  1168                     __end_of_openStr:	
  5414                           
  5415                           	psect	stringtext7
  5416  1168                     __pstringtext7:	
  5417  1168                     _endStr:	
  5418  1168  3445               	retlw	69
  5419  1169  3458               	retlw	88
  5420  116A  3449               	retlw	73
  5421  116B  3454               	retlw	84
  5422  116C  3400               	retlw	0
  5423  116D                     __end_of_endStr:	
  5424                           
  5425                           	psect	stringtext8
  5426  1177                     __pstringtext8:	
  5427  1177                     _aokStr:	
  5428  1177  3441               	retlw	65
  5429  1178  344F               	retlw	79
  5430  1179  344B               	retlw	75
  5431  117A  3400               	retlw	0
  5432  117B                     __end_of_aokStr:	
  5433                           
  5434                           	psect	stringtext9
  5435  117B                     __pstringtext9:	
  5436  117B                     _cmdStr:	
  5437  117B  3443               	retlw	67
  5438  117C  344D               	retlw	77
  5439  117D  3444               	retlw	68
  5440  117E  3400               	retlw	0
  5441  117F                     __end_of_cmdStr:	
  5442                           
  5443                           	psect	nvBANK1
  5444  00E1                     __pnvBANK1:	
  5445  00E1                     _TMR4_InterruptHandler:	
  5446  00E1                     	ds	2
  5447  00E3                     _TMR2_InterruptHandler:	
  5448  00E3                     	ds	2
  5449  00E5                     _EUSART_RxDefaultInterruptHandler:	
  5450  00E5                     	ds	2
  5451  00E7                     _EUSART_TxDefaultInterruptHandler:	
  5452  00E7                     	ds	2
  5453  00E9                     _UID:	
  5454  00E9                     	ds	1
  5455  00EA                     _eusartTxBufferRemaining:	
  5456  00EA                     	ds	1
  5457  00EB                     _inCMD:	
  5458  00EB                     	ds	1
  5459  0003                     _STATUSbits	set	3
  5460  000E                     _PORTCbits	set	14
  5461  000C                     _PORTAbits	set	12
  5462  0016                     _LATAbits	set	22
  5463  000B                     _INTCONbits	set	11
  5464  0013                     _TRISC	set	19
  5465  0012                     _TRISB	set	18
  5466  0011                     _TRISA	set	17
  5467  0018                     _LATC	set	24
  5468  0017                     _LATB	set	23
  5469  0016                     _LATA	set	22
  5470  0017                     _LATBbits	set	23
  5471  005F                     _GIE	set	95
  5472  0119                     _RC1REG	set	281
  5473  011D                     _RC1STAbits	set	285
  5474  011A                     _TX1REG	set	282
  5475  011E                     _TX1STAbits	set	286
  5476  011C                     _SP1BRGH	set	284
  5477  011B                     _SP1BRGL	set	283
  5478  011E                     _TX1STA	set	286
  5479  011D                     _RC1STA	set	285
  5480  011F                     _BAUD1CON	set	287
  5481  0294                     _T4CONbits	set	660
  5482  0292                     _T4TMR	set	658
  5483  0293                     _T4PR	set	659
  5484  0297                     _T4RST	set	663
  5485  0295                     _T4HLT	set	661
  5486  0296                     _T4CLKCON	set	662
  5487  0294                     _T4CON	set	660
  5488  028E                     _T2CONbits	set	654
  5489  028C                     _T2TMR	set	652
  5490  0291                     _T2RST	set	657
  5491  028F                     _T2HLT	set	655
  5492  0290                     _T2CLKCON	set	656
  5493  028E                     _T2CON	set	654
  5494  028D                     _T2PR	set	653
  5495  0710                     _PIR4bits	set	1808
  5496  071A                     _PIE4bits	set	1818
  5497  070F                     _PIR3bits	set	1807
  5498  0719                     _PIE3bits	set	1817
  5499  081F                     _NVMCON2	set	2079
  5500  081D                     _NVMDATH	set	2077
  5501  081C                     _NVMDATL	set	2076
  5502  081B                     _NVMADRH	set	2075
  5503  081A                     _NVMADRL	set	2074
  5504  081E                     _NVMCON1bits	set	2078
  5505  080C                     _WDTCON0bits	set	2060
  5506  080D                     _WDTCON1	set	2061
  5507  080C                     _WDTCON0	set	2060
  5508  40F1                     _WR	set	16625
  5509  0892                     _OSCTUNE	set	2194
  5510  0893                     _OSCFRQ	set	2195
  5511  0891                     _OSCEN	set	2193
  5512  088F                     _OSCCON3	set	2191
  5513  088D                     _OSCCON1	set	2189
  5514  0ECB                     _RXPPSbits	set	3787
  5515  0E8F                     _PPSLOCKbits	set	3727
  5516  0E8F                     _PPSLOCK	set	3727
  5517  0F25                     _RC5PPS	set	3877
  5518  0F50                     _ODCONC	set	3920
  5519  0F45                     _ODCONB	set	3909
  5520  0F3A                     _ODCONA	set	3898
  5521  0F4F                     _WPUC	set	3919
  5522  0F39                     _WPUA	set	3897
  5523  0F44                     _WPUB	set	3908
  5524  0F65                     _WPUE	set	3941
  5525  0F38                     _ANSELA	set	3896
  5526  0F43                     _ANSELB	set	3907
  5527  0F4E                     _ANSELC	set	3918
  5528                           
  5529                           	psect	stringtext10
  5530  07C4                     __pstringtext10:	
  5531  07C4                     STR_19:	
  5532  07C4  340A               	retlw	10
  5533  07C5  3420               	retlw	32	;' '
  5534  07C6  3420               	retlw	32	;' '
  5535  07C7  3420               	retlw	32	;' '
  5536  07C8  3420               	retlw	32	;' '
  5537  07C9  3420               	retlw	32	;' '
  5538  07CA  3420               	retlw	32	;' '
  5539  07CB  3420               	retlw	32	;' '
  5540  07CC  3420               	retlw	32	;' '
  5541  07CD  3420               	retlw	32	;' '
  5542  07CE  3420               	retlw	32	;' '
  5543  07CF  3420               	retlw	32	;' '
  5544  07D0  347C               	retlw	124	;'|'
  5545  07D1  3420               	retlw	32	;' '
  5546  07D2  347C               	retlw	124	;'|'
  5547  07D3  340A               	retlw	10
  5548  07D4  3420               	retlw	32	;' '
  5549  07D5  3420               	retlw	32	;' '
  5550  07D6  3420               	retlw	32	;' '
  5551  07D7  3420               	retlw	32	;' '
  5552  07D8  3420               	retlw	32	;' '
  5553  07D9  3420               	retlw	32	;' '
  5554  07DA  3420               	retlw	32	;' '
  5555  07DB  3420               	retlw	32	;' '
  5556  07DC  3420               	retlw	32	;' '
  5557  07DD  3420               	retlw	32	;' '
  5558  07DE  3420               	retlw	32	;' '
  5559  07DF  347C               	retlw	124	;'|'
  5560  07E0  3420               	retlw	32	;' '
  5561  07E1  347C               	retlw	124	;'|'
  5562  07E2  340A               	retlw	10
  5563  07E3  3420               	retlw	32	;' '
  5564  07E4  3420               	retlw	32	;' '
  5565  07E5  3420               	retlw	32	;' '
  5566  07E6  342D               	retlw	45	;'-'
  5567  07E7  342D               	retlw	45	;'-'
  5568  07E8  342D               	retlw	45	;'-'
  5569  07E9  342D               	retlw	45	;'-'
  5570  07EA  342D               	retlw	45	;'-'
  5571  07EB  342D               	retlw	45	;'-'
  5572  07EC  342D               	retlw	45	;'-'
  5573  07ED  342D               	retlw	45	;'-'
  5574  07EE  342D               	retlw	45	;'-'
  5575  07EF  342D               	retlw	45	;'-'
  5576  07F0  342D               	retlw	45	;'-'
  5577  07F1  342D               	retlw	45	;'-'
  5578  07F2  342D               	retlw	45	;'-'
  5579  07F3  342D               	retlw	45	;'-'
  5580  07F4  342D               	retlw	45	;'-'
  5581  07F5  342D               	retlw	45	;'-'
  5582  07F6  342D               	retlw	45	;'-'
  5583  07F7  342D               	retlw	45	;'-'
  5584  07F8  342D               	retlw	45	;'-'
  5585  07F9  340A               	retlw	10
  5586  07FA  3420               	retlw	32	;' '
  5587  07FB  3420               	retlw	32	;' '
  5588  07FC  3420               	retlw	32	;' '
  5589  07FD  342D               	retlw	45	;'-'
  5590  07FE  342D               	retlw	45	;'-'
  5591  07FF  342D               	retlw	45	;'-'
  5592  0800  342D               	retlw	45	;'-'
  5593  0801  342D               	retlw	45	;'-'
  5594  0802  342D               	retlw	45	;'-'
  5595  0803  342D               	retlw	45	;'-'
  5596  0804  342D               	retlw	45	;'-'
  5597  0805  342D               	retlw	45	;'-'
  5598  0806  342D               	retlw	45	;'-'
  5599  0807  342D               	retlw	45	;'-'
  5600  0808  342D               	retlw	45	;'-'
  5601  0809  342D               	retlw	45	;'-'
  5602  080A  342D               	retlw	45	;'-'
  5603  080B  342D               	retlw	45	;'-'
  5604  080C  342D               	retlw	45	;'-'
  5605  080D  342D               	retlw	45	;'-'
  5606  080E  342D               	retlw	45	;'-'
  5607  080F  342D               	retlw	45	;'-'
  5608  0810  340A               	retlw	10
  5609  0811  3420               	retlw	32	;' '
  5610  0812  3420               	retlw	32	;' '
  5611  0813  3420               	retlw	32	;' '
  5612  0814  3420               	retlw	32	;' '
  5613  0815  347C               	retlw	124	;'|'
  5614  0816  3420               	retlw	32	;' '
  5615  0817  3420               	retlw	32	;' '
  5616  0818  345F               	retlw	95	;'_'
  5617  0819  345F               	retlw	95	;'_'
  5618  081A  345F               	retlw	95	;'_'
  5619  081B  3420               	retlw	32	;' '
  5620  081C  3420               	retlw	32	;' '
  5621  081D  347C               	retlw	124	;'|'
  5622  081E  3420               	retlw	32	;' '
  5623  081F  3420               	retlw	32	;' '
  5624  0820  345F               	retlw	95	;'_'
  5625  0821  345F               	retlw	95	;'_'
  5626  0822  345F               	retlw	95	;'_'
  5627  0823  3420               	retlw	32	;' '
  5628  0824  3420               	retlw	32	;' '
  5629  0825  347C               	retlw	124	;'|'
  5630  0826  340A               	retlw	10
  5631  0827  3420               	retlw	32	;' '
  5632  0828  3420               	retlw	32	;' '
  5633  0829  3420               	retlw	32	;' '
  5634  082A  3420               	retlw	32	;' '
  5635  082B  347C               	retlw	124	;'|'
  5636  082C  3420               	retlw	32	;' '
  5637  082D  347C               	retlw	124	;'|'
  5638  082E  3420               	retlw	32	;' '
  5639  082F  347C               	retlw	124	;'|'
  5640  0830  3420               	retlw	32	;' '
  5641  0831  347C               	retlw	124	;'|'
  5642  0832  3420               	retlw	32	;' '
  5643  0833  347C               	retlw	124	;'|'
  5644  0834  3420               	retlw	32	;' '
  5645  0835  347C               	retlw	124	;'|'
  5646  0836  3420               	retlw	32	;' '
  5647  0837  347C               	retlw	124	;'|'
  5648  0838  3420               	retlw	32	;' '
  5649  0839  347C               	retlw	124	;'|'
  5650  083A  3420               	retlw	32	;' '
  5651  083B  347C               	retlw	124	;'|'
  5652  083C  340A               	retlw	10
  5653  083D  3420               	retlw	32	;' '
  5654  083E  3420               	retlw	32	;' '
  5655  083F  3420               	retlw	32	;' '
  5656  0840  3420               	retlw	32	;' '
  5657  0841  347C               	retlw	124	;'|'
  5658  0842  3420               	retlw	32	;' '
  5659  0843  347C               	retlw	124	;'|'
  5660  0844  342D               	retlw	45	;'-'
  5661  0845  342B               	retlw	43	;'+'
  5662  0846  342D               	retlw	45	;'-'
  5663  0847  347C               	retlw	124	;'|'
  5664  0848  3420               	retlw	32	;' '
  5665  0849  347C               	retlw	124	;'|'
  5666  084A  3420               	retlw	32	;' '
  5667  084B  347C               	retlw	124	;'|'
  5668  084C  342D               	retlw	45	;'-'
  5669  084D  342B               	retlw	43	;'+'
  5670  084E  342D               	retlw	45	;'-'
  5671  084F  347C               	retlw	124	;'|'
  5672  0850  3420               	retlw	32	;' '
  5673  0851  347C               	retlw	124	;'|'
  5674  0852  340A               	retlw	10
  5675  0853  3420               	retlw	32	;' '
  5676  0854  3420               	retlw	32	;' '
  5677  0855  3420               	retlw	32	;' '
  5678  0856  3420               	retlw	32	;' '
  5679  0857  347C               	retlw	124	;'|'
  5680  0858  3420               	retlw	32	;' '
  5681  0859  347C               	retlw	124	;'|'
  5682  085A  345F               	retlw	95	;'_'
  5683  085B  347C               	retlw	124	;'|'
  5684  085C  345F               	retlw	95	;'_'
  5685  085D  347C               	retlw	124	;'|'
  5686  085E  3420               	retlw	32	;' '
  5687  085F  347C               	retlw	124	;'|'
  5688  0860  3420               	retlw	32	;' '
  5689  0861  347C               	retlw	124	;'|'
  5690  0862  345F               	retlw	95	;'_'
  5691  0863  347C               	retlw	124	;'|'
  5692  0864  345F               	retlw	95	;'_'
  5693  0865  347C               	retlw	124	;'|'
  5694  0866  3420               	retlw	32	;' '
  5695  0867  347C               	retlw	124	;'|'
  5696  0868  340A               	retlw	10
  5697  0869  3420               	retlw	32	;' '
  5698  086A  3420               	retlw	32	;' '
  5699  086B  3420               	retlw	32	;' '
  5700  086C  3420               	retlw	32	;' '
  5701  086D  347C               	retlw	124	;'|'
  5702  086E  3420               	retlw	32	;' '
  5703  086F  3420               	retlw	32	;' '
  5704  0870  345F               	retlw	95	;'_'
  5705  0871  345F               	retlw	95	;'_'
  5706  0872  345F               	retlw	95	;'_'
  5707  0873  3420               	retlw	32	;' '
  5708  0874  3420               	retlw	32	;' '
  5709  0875  347C               	retlw	124	;'|'
  5710  0876  3420               	retlw	32	;' '
  5711  0877  3420               	retlw	32	;' '
  5712  0878  345F               	retlw	95	;'_'
  5713  0879  345F               	retlw	95	;'_'
  5714  087A  345F               	retlw	95	;'_'
  5715  087B  3420               	retlw	32	;' '
  5716  087C  3420               	retlw	32	;' '
  5717  087D  347C               	retlw	124	;'|'
  5718  087E  340A               	retlw	10
  5719  087F  3420               	retlw	32	;' '
  5720  0880  3420               	retlw	32	;' '
  5721  0881  3420               	retlw	32	;' '
  5722  0882  3420               	retlw	32	;' '
  5723  0883  347C               	retlw	124	;'|'
  5724  0884  3420               	retlw	32	;' '
  5725  0885  347C               	retlw	124	;'|'
  5726  0886  3420               	retlw	32	;' '
  5727  0887  3420               	retlw	32	;' '
  5728  0888  3420               	retlw	32	;' '
  5729  0889  347C               	retlw	124	;'|'
  5730  088A  3420               	retlw	32	;' '
  5731  088B  347C               	retlw	124	;'|'
  5732  088C  3420               	retlw	32	;' '
  5733  088D  347C               	retlw	124	;'|'
  5734  088E  3420               	retlw	32	;' '
  5735  088F  3420               	retlw	32	;' '
  5736  0890  3420               	retlw	32	;' '
  5737  0891  347C               	retlw	124	;'|'
  5738  0892  3420               	retlw	32	;' '
  5739  0893  347C               	retlw	124	;'|'
  5740  0894  340A               	retlw	10
  5741  0895  3420               	retlw	32	;' '
  5742  0896  3420               	retlw	32	;' '
  5743  0897  3420               	retlw	32	;' '
  5744  0898  3420               	retlw	32	;' '
  5745  0899  347C               	retlw	124	;'|'
  5746  089A  3420               	retlw	32	;' '
  5747  089B  347C               	retlw	124	;'|'
  5748  089C  3420               	retlw	32	;' '
  5749  089D  3420               	retlw	32	;' '
  5750  089E  3420               	retlw	32	;' '
  5751  089F  347C               	retlw	124	;'|'
  5752  08A0  3420               	retlw	32	;' '
  5753  08A1  347C               	retlw	124	;'|'
  5754  08A2  3420               	retlw	32	;' '
  5755  08A3  347C               	retlw	124	;'|'
  5756  08A4  3420               	retlw	32	;' '
  5757  08A5  3420               	retlw	32	;' '
  5758  08A6  3420               	retlw	32	;' '
  5759  08A7  347C               	retlw	124	;'|'
  5760  08A8  3420               	retlw	32	;' '
  5761  08A9  347C               	retlw	124	;'|'
  5762  08AA  340A               	retlw	10
  5763  08AB  3420               	retlw	32	;' '
  5764  08AC  3420               	retlw	32	;' '
  5765  08AD  3420               	retlw	32	;' '
  5766  08AE  3420               	retlw	32	;' '
  5767  08AF  347C               	retlw	124	;'|'
  5768  08B0  3420               	retlw	32	;' '
  5769  08B1  347C               	retlw	124	;'|'
  5770  08B2  345F               	retlw	95	;'_'
  5771  08B3  345F               	retlw	95	;'_'
  5772  08B4  345F               	retlw	95	;'_'
  5773  08B5  347C               	retlw	124	;'|'
  5774  08B6  3420               	retlw	32	;' '
  5775  08B7  347C               	retlw	124	;'|'
  5776  08B8  3420               	retlw	32	;' '
  5777  08B9  347C               	retlw	124	;'|'
  5778  08BA  345F               	retlw	95	;'_'
  5779  08BB  345F               	retlw	95	;'_'
  5780  08BC  345F               	retlw	95	;'_'
  5781  08BD  347C               	retlw	124	;'|'
  5782  08BE  3420               	retlw	32	;' '
  5783  08BF  347C               	retlw	124	;'|'
  5784  08C0  340A               	retlw	10
  5785  08C1  3420               	retlw	32	;' '
  5786  08C2  3420               	retlw	32	;' '
  5787  08C3  3420               	retlw	32	;' '
  5788  08C4  3420               	retlw	32	;' '
  5789  08C5  347C               	retlw	124	;'|'
  5790  08C6  3420               	retlw	32	;' '
  5791  08C7  3420               	retlw	32	;' '
  5792  08C8  345F               	retlw	95	;'_'
  5793  08C9  345F               	retlw	95	;'_'
  5794  08CA  345F               	retlw	95	;'_'
  5795  08CB  3420               	retlw	32	;' '
  5796  08CC  3420               	retlw	32	;' '
  5797  08CD  347C               	retlw	124	;'|'
  5798  08CE  3420               	retlw	32	;' '
  5799  08CF  3420               	retlw	32	;' '
  5800  08D0  345F               	retlw	95	;'_'
  5801  08D1  345F               	retlw	95	;'_'
  5802  08D2  345F               	retlw	95	;'_'
  5803  08D3  3420               	retlw	32	;' '
  5804  08D4  3420               	retlw	32	;' '
  5805  08D5  347C               	retlw	124	;'|'
  5806  08D6  340A               	retlw	10
  5807  08D7  3420               	retlw	32	;' '
  5808  08D8  3420               	retlw	32	;' '
  5809  08D9  3420               	retlw	32	;' '
  5810  08DA  3420               	retlw	32	;' '
  5811  08DB  347C               	retlw	124	;'|'
  5812  08DC  3420               	retlw	32	;' '
  5813  08DD  347C               	retlw	124	;'|'
  5814  08DE  3420               	retlw	32	;' '
  5815  08DF  3420               	retlw	32	;' '
  5816  08E0  3420               	retlw	32	;' '
  5817  08E1  347C               	retlw	124	;'|'
  5818  08E2  3420               	retlw	32	;' '
  5819  08E3  347C               	retlw	124	;'|'
  5820  08E4  3420               	retlw	32	;' '
  5821  08E5  347C               	retlw	124	;'|'
  5822  08E6  3420               	retlw	32	;' '
  5823  08E7  3420               	retlw	32	;' '
  5824  08E8  3420               	retlw	32	;' '
  5825  08E9  347C               	retlw	124	;'|'
  5826  08EA  3420               	retlw	32	;' '
  5827  08EB  347C               	retlw	124	;'|'
  5828  08EC  340A               	retlw	10
  5829  08ED  3420               	retlw	32	;' '
  5830  08EE  3420               	retlw	32	;' '
  5831  08EF  3420               	retlw	32	;' '
  5832  08F0  3420               	retlw	32	;' '
  5833  08F1  347C               	retlw	124	;'|'
  5834  08F2  3420               	retlw	32	;' '
  5835  08F3  347C               	retlw	124	;'|'
  5836  08F4  3420               	retlw	32	;' '
  5837  08F5  3420               	retlw	32	;' '
  5838  08F6  3420               	retlw	32	;' '
  5839  08F7  347C               	retlw	124	;'|'
  5840  08F8  3420               	retlw	32	;' '
  5841  08F9  347C               	retlw	124	;'|'
  5842  08FA  3420               	retlw	32	;' '
  5843  08FB  347C               	retlw	124	;'|'
  5844  08FC  3420               	retlw	32	;' '
  5845  08FD  3420               	retlw	32	;' '
  5846  08FE  3420               	retlw	32	;' '
  5847  08FF  347C               	retlw	124	;'|'
  5848  0900  3420               	retlw	32	;' '
  5849  0901  347C               	retlw	124	;'|'
  5850  0902  340A               	retlw	10
  5851  0903  3420               	retlw	32	;' '
  5852  0904  3420               	retlw	32	;' '
  5853  0905  3420               	retlw	32	;' '
  5854  0906  3420               	retlw	32	;' '
  5855  0907  347C               	retlw	124	;'|'
  5856  0908  3420               	retlw	32	;' '
  5857  0909  347C               	retlw	124	;'|'
  5858  090A  345F               	retlw	95	;'_'
  5859  090B  345F               	retlw	95	;'_'
  5860  090C  345F               	retlw	95	;'_'
  5861  090D  347C               	retlw	124	;'|'
  5862  090E  3420               	retlw	32	;' '
  5863  090F  347C               	retlw	124	;'|'
  5864  0910  3420               	retlw	32	;' '
  5865  0911  347C               	retlw	124	;'|'
  5866  0912  345F               	retlw	95	;'_'
  5867  0913  345F               	retlw	95	;'_'
  5868  0914  345F               	retlw	95	;'_'
  5869  0915  347C               	retlw	124	;'|'
  5870  0916  3420               	retlw	32	;' '
  5871  0917  347C               	retlw	124	;'|'
  5872  0918  340A               	retlw	10
  5873  0919  3420               	retlw	32	;' '
  5874  091A  3420               	retlw	32	;' '
  5875  091B  3420               	retlw	32	;' '
  5876  091C  3420               	retlw	32	;' '
  5877  091D  347C               	retlw	124	;'|'
  5878  091E  3420               	retlw	32	;' '
  5879  091F  3420               	retlw	32	;' '
  5880  0920  3420               	retlw	32	;' '
  5881  0921  3420               	retlw	32	;' '
  5882  0922  3420               	retlw	32	;' '
  5883  0923  3420               	retlw	32	;' '
  5884  0924  3420               	retlw	32	;' '
  5885  0925  347C               	retlw	124	;'|'
  5886  0926  3420               	retlw	32	;' '
  5887  0927  3420               	retlw	32	;' '
  5888  0928  3420               	retlw	32	;' '
  5889  0929  3420               	retlw	32	;' '
  5890  092A  3420               	retlw	32	;' '
  5891  092B  3420               	retlw	32	;' '
  5892  092C  3420               	retlw	32	;' '
  5893  092D  347C               	retlw	124	;'|'
  5894  092E  340A               	retlw	10
  5895  092F  3420               	retlw	32	;' '
  5896  0930  3420               	retlw	32	;' '
  5897  0931  3420               	retlw	32	;' '
  5898  0932  343D               	retlw	61	;'='
  5899  0933  343D               	retlw	61	;'='
  5900  0934  343D               	retlw	61	;'='
  5901  0935  343D               	retlw	61	;'='
  5902  0936  343D               	retlw	61	;'='
  5903  0937  343D               	retlw	61	;'='
  5904  0938  343D               	retlw	61	;'='
  5905  0939  343D               	retlw	61	;'='
  5906  093A  343D               	retlw	61	;'='
  5907  093B  343D               	retlw	61	;'='
  5908  093C  343D               	retlw	61	;'='
  5909  093D  343D               	retlw	61	;'='
  5910  093E  343D               	retlw	61	;'='
  5911  093F  343D               	retlw	61	;'='
  5912  0940  343D               	retlw	61	;'='
  5913  0941  343D               	retlw	61	;'='
  5914  0942  343D               	retlw	61	;'='
  5915  0943  343D               	retlw	61	;'='
  5916  0944  343D               	retlw	61	;'='
  5917  0945  340A               	retlw	10
  5918  0946  3400               	retlw	0
  5919                           
  5920                           	psect	stringtext11
  5921  1000                     __pstringtext11:	
  5922  1000                     STR_8:	
  5923  1000  3473               	retlw	115	;'s'
  5924  1001  3465               	retlw	101	;'e'
  5925  1002  3474               	retlw	116	;'t'
  5926  1003  3420               	retlw	32	;' '
  5927  1004  3477               	retlw	119	;'w'
  5928  1005  346C               	retlw	108	;'l'
  5929  1006  3461               	retlw	97	;'a'
  5930  1007  346E               	retlw	110	;'n'
  5931  1008  3420               	retlw	32	;' '
  5932  1009  3470               	retlw	112	;'p'
  5933  100A  3461               	retlw	97	;'a'
  5934  100B  3473               	retlw	115	;'s'
  5935  100C  3473               	retlw	115	;'s'
  5936  100D  3470               	retlw	112	;'p'
  5937  100E  3468               	retlw	104	;'h'
  5938  100F  3472               	retlw	114	;'r'
  5939  1010  3461               	retlw	97	;'a'
  5940  1011  3473               	retlw	115	;'s'
  5941  1012  3465               	retlw	101	;'e'
  5942  1013  3420               	retlw	32	;' '
  5943  1014  3425               	retlw	37	;'%'
  5944  1015  3473               	retlw	115	;'s'
  5945  1016  340D               	retlw	13
  5946  1017  340A               	retlw	10
  5947  1018  3400               	retlw	0
  5948                           
  5949                           	psect	stringtext12
  5950  1019                     __pstringtext12:	
  5951  1019                     STR_11:	
  5952  1019  3473               	retlw	115	;'s'
  5953  101A  3465               	retlw	101	;'e'
  5954  101B  3474               	retlw	116	;'t'
  5955  101C  3420               	retlw	32	;' '
  5956  101D  3469               	retlw	105	;'i'
  5957  101E  3470               	retlw	112	;'p'
  5958  101F  3420               	retlw	32	;' '
  5959  1020  3470               	retlw	112	;'p'
  5960  1021  3472               	retlw	114	;'r'
  5961  1022  346F               	retlw	111	;'o'
  5962  1023  3474               	retlw	116	;'t'
  5963  1024  346F               	retlw	111	;'o'
  5964  1025  3463               	retlw	99	;'c'
  5965  1026  346F               	retlw	111	;'o'
  5966  1027  346C               	retlw	108	;'l'
  5967  1028  3420               	retlw	32	;' '
  5968  1029  3430               	retlw	48	;'0'
  5969  102A  3438               	retlw	56	;'8'
  5970  102B  340D               	retlw	13
  5971  102C  340A               	retlw	10
  5972  102D  3400               	retlw	0
  5973                           
  5974                           	psect	stringtext13
  5975  102E                     __pstringtext13:	
  5976  102E                     STR_6:	
  5977  102E  3473               	retlw	115	;'s'
  5978  102F  3465               	retlw	101	;'e'
  5979  1030  3474               	retlw	116	;'t'
  5980  1031  3420               	retlw	32	;' '
  5981  1032  3475               	retlw	117	;'u'
  5982  1033  3461               	retlw	97	;'a'
  5983  1034  3472               	retlw	114	;'r'
  5984  1035  3474               	retlw	116	;'t'
  5985  1036  3420               	retlw	32	;' '
  5986  1037  346D               	retlw	109	;'m'
  5987  1038  346F               	retlw	111	;'o'
  5988  1039  3464               	retlw	100	;'d'
  5989  103A  3465               	retlw	101	;'e'
  5990  103B  3420               	retlw	32	;' '
  5991  103C  3430               	retlw	48	;'0'
  5992  103D  3478               	retlw	120	;'x'
  5993  103E  3431               	retlw	49	;'1'
  5994  103F  3431               	retlw	49	;'1'
  5995  1040  340D               	retlw	13
  5996  1041  340A               	retlw	10
  5997  1042  3400               	retlw	0
  5998                           
  5999                           	psect	stringtext14
  6000  1057                     __pstringtext14:	
  6001  1057                     STR_9:	
  6002  1057  3473               	retlw	115	;'s'
  6003  1058  3465               	retlw	101	;'e'
  6004  1059  3474               	retlw	116	;'t'
  6005  105A  3420               	retlw	32	;' '
  6006  105B  3477               	retlw	119	;'w'
  6007  105C  346C               	retlw	108	;'l'
  6008  105D  3461               	retlw	97	;'a'
  6009  105E  346E               	retlw	110	;'n'
  6010  105F  3420               	retlw	32	;' '
  6011  1060  3473               	retlw	115	;'s'
  6012  1061  3473               	retlw	115	;'s'
  6013  1062  3469               	retlw	105	;'i'
  6014  1063  3464               	retlw	100	;'d'
  6015  1064  3420               	retlw	32	;' '
  6016  1065  3425               	retlw	37	;'%'
  6017  1066  3473               	retlw	115	;'s'
  6018  1067  340D               	retlw	13
  6019  1068  340A               	retlw	10
  6020  1069  3400               	retlw	0
  6021                           
  6022                           	psect	stringtext15
  6023  106A                     __pstringtext15:	
  6024  106A                     STR_10:	
  6025  106A  3473               	retlw	115	;'s'
  6026  106B  3465               	retlw	101	;'e'
  6027  106C  3474               	retlw	116	;'t'
  6028  106D  3420               	retlw	32	;' '
  6029  106E  3477               	retlw	119	;'w'
  6030  106F  346C               	retlw	108	;'l'
  6031  1070  3461               	retlw	97	;'a'
  6032  1071  346E               	retlw	110	;'n'
  6033  1072  3420               	retlw	32	;' '
  6034  1073  346A               	retlw	106	;'j'
  6035  1074  346F               	retlw	111	;'o'
  6036  1075  3469               	retlw	105	;'i'
  6037  1076  346E               	retlw	110	;'n'
  6038  1077  3420               	retlw	32	;' '
  6039  1078  3431               	retlw	49	;'1'
  6040  1079  340D               	retlw	13
  6041  107A  340A               	retlw	10
  6042  107B  3400               	retlw	0
  6043                           
  6044                           	psect	stringtext16
  6045  107C                     __pstringtext16:	
  6046  107C                     STR_31:	
  6047  107C  3430               	retlw	48	;'0'
  6048  107D  3431               	retlw	49	;'1'
  6049  107E  3432               	retlw	50	;'2'
  6050  107F  3433               	retlw	51	;'3'
  6051  1080  3434               	retlw	52	;'4'
  6052  1081  3435               	retlw	53	;'5'
  6053  1082  3436               	retlw	54	;'6'
  6054  1083  3437               	retlw	55	;'7'
  6055  1084  3438               	retlw	56	;'8'
  6056  1085  3439               	retlw	57	;'9'
  6057  1086  3461               	retlw	97	;'a'
  6058  1087  3462               	retlw	98	;'b'
  6059  1088  3463               	retlw	99	;'c'
  6060  1089  3464               	retlw	100	;'d'
  6061  108A  3465               	retlw	101	;'e'
  6062  108B  3466               	retlw	102	;'f'
  6063  108C  3400               	retlw	0
  6064                           
  6065                           	psect	stringtext17
  6066  108D                     __pstringtext17:	
  6067  108D                     STR_7:	
  6068  108D  3473               	retlw	115	;'s'
  6069  108E  3465               	retlw	101	;'e'
  6070  108F  3474               	retlw	116	;'t'
  6071  1090  3420               	retlw	32	;' '
  6072  1091  3469               	retlw	105	;'i'
  6073  1092  3470               	retlw	112	;'p'
  6074  1093  3420               	retlw	32	;' '
  6075  1094  3464               	retlw	100	;'d'
  6076  1095  3468               	retlw	104	;'h'
  6077  1096  3463               	retlw	99	;'c'
  6078  1097  3470               	retlw	112	;'p'
  6079  1098  3420               	retlw	32	;' '
  6080  1099  3431               	retlw	49	;'1'
  6081  109A  340D               	retlw	13
  6082  109B  340A               	retlw	10
  6083  109C  3400               	retlw	0
  6084                           
  6085                           	psect	stringtext18
  6086  109D                     __pstringtext18:	
  6087  109D                     STR_5:	
  6088  109D  3466               	retlw	102	;'f'
  6089  109E  3461               	retlw	97	;'a'
  6090  109F  3463               	retlw	99	;'c'
  6091  10A0  3474               	retlw	116	;'t'
  6092  10A1  346F               	retlw	111	;'o'
  6093  10A2  3472               	retlw	114	;'r'
  6094  10A3  3479               	retlw	121	;'y'
  6095  10A4  3420               	retlw	32	;' '
  6096  10A5  3452               	retlw	82	;'R'
  6097  10A6  3445               	retlw	69	;'E'
  6098  10A7  3453               	retlw	83	;'S'
  6099  10A8  3445               	retlw	69	;'E'
  6100  10A9  3454               	retlw	84	;'T'
  6101  10AA  340D               	retlw	13
  6102  10AB  340A               	retlw	10
  6103  10AC  3400               	retlw	0
  6104                           
  6105                           	psect	stringtext19
  6106  10AD                     __pstringtext19:	
  6107  10AD                     STR_26:	
  6108  10AD  3476               	retlw	118	;'v'
  6109  10AE  3461               	retlw	97	;'a'
  6110  10AF  346C               	retlw	108	;'l'
  6111  10B0  3469               	retlw	105	;'i'
  6112  10B1  3464               	retlw	100	;'d'
  6113  10B2  3461               	retlw	97	;'a'
  6114  10B3  3474               	retlw	116	;'t'
  6115  10B4  3465               	retlw	101	;'e'
  6116  10B5  3420               	retlw	32	;' '
  6117  10B6  3425               	retlw	37	;'%'
  6118  10B7  3430               	retlw	48	;'0'
  6119  10B8  3433               	retlw	51	;'3'
  6120  10B9  3464               	retlw	100	;'d'
  6121  10BA  3400               	retlw	0
  6122                           
  6123                           	psect	stringtext20
  6124  10BB                     __pstringtext20:	
  6125  10BB                     STR_15:	
  6126  10BB  344B               	retlw	75	;'K'
  6127  10BC  346E               	retlw	110	;'n'
  6128  10BD  346F               	retlw	111	;'o'
  6129  10BE  3463               	retlw	99	;'c'
  6130  10BF  346B               	retlw	107	;'k'
  6131  10C0  3420               	retlw	32	;' '
  6132  10C1  344B               	retlw	75	;'K'
  6133  10C2  346E               	retlw	110	;'n'
  6134  10C3  346F               	retlw	111	;'o'
  6135  10C4  3463               	retlw	99	;'c'
  6136  10C5  346B               	retlw	107	;'k'
  6137  10C6  340D               	retlw	13
  6138  10C7  340A               	retlw	10
  6139  10C8  3400               	retlw	0
  6140                           
  6141                           	psect	stringtext21
  6142  10C9                     __pstringtext21:	
  6143  10C9                     STR_13:	
  6144  10C9  346F               	retlw	111	;'o'
  6145  10CA  3470               	retlw	112	;'p'
  6146  10CB  3465               	retlw	101	;'e'
  6147  10CC  346E               	retlw	110	;'n'
  6148  10CD  3420               	retlw	32	;' '
  6149  10CE  3425               	retlw	37	;'%'
  6150  10CF  3473               	retlw	115	;'s'
  6151  10D0  3420               	retlw	32	;' '
  6152  10D1  3425               	retlw	37	;'%'
  6153  10D2  3473               	retlw	115	;'s'
  6154  10D3  340D               	retlw	13
  6155  10D4  340A               	retlw	10
  6156  10D5  3400               	retlw	0
  6157                           
  6158                           	psect	stringtext22
  6159  10D6                     __pstringtext22:	
  6160  10D6                     STR_22:	
  6161  10D6  3431               	retlw	49	;'1'
  6162  10D7  3439               	retlw	57	;'9'
  6163  10D8  3432               	retlw	50	;'2'
  6164  10D9  342E               	retlw	46	;'.'
  6165  10DA  3431               	retlw	49	;'1'
  6166  10DB  3436               	retlw	54	;'6'
  6167  10DC  3438               	retlw	56	;'8'
  6168  10DD  342E               	retlw	46	;'.'
  6169  10DE  3431               	retlw	49	;'1'
  6170  10DF  342E               	retlw	46	;'.'
  6171  10E0  3437               	retlw	55	;'7'
  6172  10E1  3400               	retlw	0
  6173                           
  6174                           	psect	stringtext23
  6175  10E2                     __pstringtext23:	
  6176  10E2                     STR_27:	
  6177  10E2  346B               	retlw	107	;'k'
  6178  10E3  346E               	retlw	110	;'n'
  6179  10E4  346F               	retlw	111	;'o'
  6180  10E5  3463               	retlw	99	;'c'
  6181  10E6  346B               	retlw	107	;'k'
  6182  10E7  3420               	retlw	32	;' '
  6183  10E8  3425               	retlw	37	;'%'
  6184  10E9  3430               	retlw	48	;'0'
  6185  10EA  3433               	retlw	51	;'3'
  6186  10EB  3464               	retlw	100	;'d'
  6187  10EC  3400               	retlw	0
  6188                           
  6189                           	psect	stringtext24
  6190  10F7                     __pstringtext24:	
  6191  10F7                     STR_29:	
  6192  10F7  3448               	retlw	72	;'H'
  6193  10F8  3440               	retlw	64	;'@'
  6194  10F9  3463               	retlw	99	;'c'
  6195  10FA  346B               	retlw	107	;'k'
  6196  10FB  3465               	retlw	101	;'e'
  6197  10FC  3472               	retlw	114	;'r'
  6198  10FD  3431               	retlw	49	;'1'
  6199  10FE  3430               	retlw	48	;'0'
  6200  10FF  3431               	retlw	49	;'1'
  6201  1100  3400               	retlw	0
  6202                           
  6203                           	psect	stringtext25
  6204  1101                     __pstringtext25:	
  6205  1101                     STR_25:	
  6206  1101  3470               	retlw	112	;'p'
  6207  1102  3461               	retlw	97	;'a'
  6208  1103  3469               	retlw	105	;'i'
  6209  1104  3472               	retlw	114	;'r'
  6210  1105  3420               	retlw	32	;' '
  6211  1106  3425               	retlw	37	;'%'
  6212  1107  3430               	retlw	48	;'0'
  6213  1108  3433               	retlw	51	;'3'
  6214  1109  3464               	retlw	100	;'d'
  6215  110A  3400               	retlw	0
  6216                           
  6217                           	psect	stringtext26
  6218  110B                     __pstringtext26:	
  6219  110B                     STR_17:	
  6220  110B  3444               	retlw	68	;'D'
  6221  110C  346F               	retlw	111	;'o'
  6222  110D  3463               	retlw	99	;'c'
  6223  110E  3474               	retlw	116	;'t'
  6224  110F  346F               	retlw	111	;'o'
  6225  1110  3472               	retlw	114	;'r'
  6226  1111  340D               	retlw	13
  6227  1112  340A               	retlw	10
  6228  1113  3400               	retlw	0
  6229                           
  6230                           	psect	stringtext27
  6231  1114                     __pstringtext27:	
  6232  1114                     STR_3:	
  6233  1114  3472               	retlw	114	;'r'
  6234  1115  3465               	retlw	101	;'e'
  6235  1116  3462               	retlw	98	;'b'
  6236  1117  346F               	retlw	111	;'o'
  6237  1118  346F               	retlw	111	;'o'
  6238  1119  3474               	retlw	116	;'t'
  6239  111A  340D               	retlw	13
  6240  111B  340A               	retlw	10
  6241  111C  3400               	retlw	0
  6242                           
  6243                           	psect	stringtext28
  6244  1125                     __pstringtext28:	
  6245  1125                     STR_14:	
  6246  1125  3450               	retlw	80	;'P'
  6247  1126  3472               	retlw	114	;'r'
  6248  1127  346F               	retlw	111	;'o'
  6249  1128  3463               	retlw	99	;'c'
  6250  1129  3465               	retlw	101	;'e'
  6251  112A  3465               	retlw	101	;'e'
  6252  112B  3464               	retlw	100	;'d'
  6253  112C  3400               	retlw	0
  6254                           
  6255                           	psect	stringtext29
  6256  1134                     __pstringtext29:	
  6257  1134                     STR_30:	
  6258  1134  3428               	retlw	40	;'('
  6259  1135  346E               	retlw	110	;'n'
  6260  1136  3475               	retlw	117	;'u'
  6261  1137  346C               	retlw	108	;'l'
  6262  1138  346C               	retlw	108	;'l'
  6263  1139  3429               	retlw	41	;')'
  6264  113A  3400               	retlw	0
  6265                           
  6266                           	psect	stringtext30
  6267  113B                     __pstringtext30:	
  6268  113B                     STR_21:	
  6269  113B  3453               	retlw	83	;'S'
  6270  113C  3474               	retlw	116	;'t'
  6271  113D  3461               	retlw	97	;'a'
  6272  113E  3474               	retlw	116	;'t'
  6273  113F  343A               	retlw	58	;':'
  6274  1140  3420               	retlw	32	;' '
  6275  1141  3400               	retlw	0
  6276                           
  6277                           	psect	stringtext31
  6278  1142                     __pstringtext31:	
  6279  1142                     STR_16:	
  6280  1142  3474               	retlw	116	;'t'
  6281  1143  3468               	retlw	104	;'h'
  6282  1144  3465               	retlw	101	;'e'
  6283  1145  3472               	retlw	114	;'r'
  6284  1146  3465               	retlw	101	;'e'
  6285  1147  343F               	retlw	63	;'?'
  6286  1148  3400               	retlw	0
  6287                           
  6288                           	psect	stringtext32
  6289  1149                     __pstringtext32:	
  6290  1149                     STR_4:	
  6291  1149  3473               	retlw	115	;'s'
  6292  114A  3461               	retlw	97	;'a'
  6293  114B  3476               	retlw	118	;'v'
  6294  114C  3465               	retlw	101	;'e'
  6295  114D  340D               	retlw	13
  6296  114E  340A               	retlw	10
  6297  114F  3400               	retlw	0
  6298                           
  6299                           	psect	stringtext33
  6300  1150                     __pstringtext33:	
  6301  1150                     STR_2:	
  6302  1150  3465               	retlw	101	;'e'
  6303  1151  3478               	retlw	120	;'x'
  6304  1152  3469               	retlw	105	;'i'
  6305  1153  3474               	retlw	116	;'t'
  6306  1154  340D               	retlw	13
  6307  1155  340A               	retlw	10
  6308  1156  3400               	retlw	0
  6309                           
  6310                           	psect	stringtext34
  6311  115D                     __pstringtext34:	
  6312  115D                     STR_12:	
  6313  115D  3449               	retlw	73	;'I'
  6314  115E  3446               	retlw	70	;'F'
  6315  115F  343D               	retlw	61	;'='
  6316  1160  3455               	retlw	85	;'U'
  6317  1161  3450               	retlw	80	;'P'
  6318  1162  3400               	retlw	0
  6319                           
  6320                           	psect	stringtext35
  6321  116D                     __pstringtext35:	
  6322  116D                     STR_23:	
  6323  116D  3431               	retlw	49	;'1'
  6324  116E  3433               	retlw	51	;'3'
  6325  116F  3433               	retlw	51	;'3'
  6326  1170  3435               	retlw	53	;'5'
  6327  1171  3400               	retlw	0
  6328                           
  6329                           	psect	stringtext36
  6330  1172                     __pstringtext36:	
  6331  1172                     STR_18:	
  6332  1172  3477               	retlw	119	;'w'
  6333  1173  3468               	retlw	104	;'h'
  6334  1174  346F               	retlw	111	;'o'
  6335  1175  343F               	retlw	63	;'?'
  6336  1176  3400               	retlw	0
  6337                           
  6338                           	psect	stringtext37
  6339  117F                     __pstringtext37:	
  6340  117F                     STR_28:	
  6341  117F  3441               	retlw	65	;'A'
  6342  1180  3426               	retlw	38	;'&'
  6343  1181  3459               	retlw	89	;'Y'
  6344  1182  3400               	retlw	0
  6345                           
  6346                           	psect	stringtext38
  6347  1183                     __pstringtext38:	
  6348  1183                     STR_1:	
  6349  1183  3424               	retlw	36	;'$'
  6350  1184  3424               	retlw	36	;'$'
  6351  1185  3424               	retlw	36	;'$'
  6352  1186  3400               	retlw	0
  6353                           
  6354                           	psect	stringtext39
  6355  0000                     __pstringtext39:	
  6356  10C9                     
  6357                           ; #config settings
  6358  0000                     
  6359                           	psect	cinit
  6360  0036                     start_initialization:	
  6361  0036                     __initialization:	
  6362                           
  6363                           ; Initialize objects allocated to BANK1
  6364  0036  30E2               	movlw	low __pidataBANK1
  6365  0037  0084               	movwf	4
  6366  0038  308F               	movlw	(high __pidataBANK1)| (0+128)
  6367  0039  0085               	movwf	5
  6368  003A  30A0               	movlw	low __pdataBANK1
  6369  003B  0086               	movwf	6
  6370  003C  3000               	movlw	high __pdataBANK1
  6371  003D  0087               	movwf	7
  6372  003E  301E               	movlw	30
  6373  003F  318F  2740  3180   	fcall	init_ram
  6374                           
  6375                           ; Initialize objects allocated to BANK2
  6376  0042  3073               	movlw	low __pidataBANK2
  6377  0043  0084               	movwf	4
  6378  0044  308F               	movlw	(high __pidataBANK2)| (0+128)
  6379  0045  0085               	movwf	5
  6380  0046  3020               	movlw	low __pdataBANK2
  6381  0047  0086               	movwf	6
  6382  0048  3001               	movlw	high __pdataBANK2
  6383  0049  0087               	movwf	7
  6384  004A  300D               	movlw	13
  6385  004B  318F  2740  3180   	fcall	init_ram
  6386  004E  30BE               	movlw	low __pbssBANK1
  6387                           
  6388                           ; Clear objects allocated to COMMON
  6389  004F  01FC               	clrf	__pbssCOMMON& (0+127)
  6390                           
  6391                           ; Clear objects allocated to BANK0
  6392  0050  01ED               	clrf	__pbssBANK0& (0+127)
  6393  0051  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  6394  0052  01EF               	clrf	(__pbssBANK0+2)& (0+127)
  6395                           
  6396                           ; Clear objects allocated to BANK1
  6397  0053  0084               	movwf	4
  6398  0054  3000               	movlw	high __pbssBANK1
  6399  0055  0085               	movwf	5
  6400  0056  3014               	movlw	20
  6401  0057  318F  273A  3180   	fcall	clear_ram0
  6402  005A                     end_of_initialization:	
  6403                           ;End of C runtime variable initialization code
  6404                           
  6405  005A                     __end_of__initialization:	
  6406  005A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6407  005B  0020               	movlb	0
  6408  005C  28FC               	ljmp	_main	;jump to C main() function
  6409  005D                     __ptext34:	
  6410 ;; *************** function _WiFly_EnterCMDMode *****************
  6411 ;; Defined at:
  6412 ;;		line 99 in file "mcc_generated_files/WiFly.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;		None
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;		None
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  1    wreg      void 
  6419 ;; Registers used:
  6420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6421 ;; Tracked objects:
  6422 ;;		On entry : 1F/1
  6423 ;;		On exit  : 1F/1
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;Total ram usage:        0 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    7
  6433 ;; This function calls:
  6434 ;;		_Clear_RX_Buffer
  6435 ;;		_WiFly_CheckRecv
  6436 ;;		_WiFly_Send
  6437 ;; This function is called by:
  6438 ;;		_WiFly_CheckInCMD
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           
  6443                           ;psect for function _WiFly_EnterCMDMode
  6444  005D                     _WiFly_EnterCMDMode:	
  6445  005D                     l3383:	
  6446                           ;incstack = 0
  6447                           ; Regs used in _WiFly_EnterCMDMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6448                           
  6449                           
  6450                           ;WiFly.c: 100: Clear_RX_Buffer();
  6451  005D  2250  3180         	fcall	_Clear_RX_Buffer
  6452                           
  6453                           ;WiFly.c: 101: WiFly_Send("$$$");
  6454  005F  3083               	movlw	low (STR_1| (0+32768))
  6455  0060  00F2               	movwf	WiFly_Send@command
  6456  0061  3091               	movlw	high (STR_1| (0+32768))
  6457  0062  00F3               	movwf	WiFly_Send@command+1
  6458  0063  2677  3180         	fcall	_WiFly_Send
  6459                           
  6460                           ;WiFly.c: 102: WiFly_CheckRecv(cmdStr);
  6461  0065  307B               	movlw	low (_cmdStr| (0+32768))
  6462  0066  00F6               	movwf	WiFly_CheckRecv@chkString
  6463  0067  3091               	movlw	high (_cmdStr| (0+32768))
  6464  0068  00F7               	movwf	WiFly_CheckRecv@chkString+1
  6465  0069  2641               	fcall	_WiFly_CheckRecv
  6466                           
  6467                           ;WiFly.c: 103: inCMD = 1;
  6468  006A  0021               	movlb	1	; select bank1
  6469  006B  01EB               	clrf	_inCMD^(0+128)
  6470  006C  0AEB               	incf	_inCMD^(0+128),f
  6471  006D  0008               	return
  6472  006E                     __end_of_WiFly_EnterCMDMode:	
  6473  006E                     __ptext8:	
  6474 ;; *************** function _WiFly_RebootCMD *****************
  6475 ;; Defined at:
  6476 ;;		line 140 in file "mcc_generated_files/WiFly.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      void 
  6483 ;; Registers used:
  6484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : 10/0
  6487 ;;		On exit  : 1F/1
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;Total ram usage:        0 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    9
  6497 ;; This function calls:
  6498 ;;		_WiFly_CheckInCMD
  6499 ;;		_WiFly_CheckRecv
  6500 ;;		_WiFly_SendString
  6501 ;; This function is called by:
  6502 ;;		_WiFly_SaveConfig
  6503 ;;		_WiFly_FactoryReset
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           
  6508                           ;psect for function _WiFly_RebootCMD
  6509  006E                     _WiFly_RebootCMD:	
  6510  006E                     l3669:	
  6511                           ;incstack = 0
  6512                           ; Regs used in _WiFly_RebootCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6513                           
  6514                           
  6515                           ;WiFly.c: 142: WiFly_CheckInCMD();
  6516  006E  2320  3180         	fcall	_WiFly_CheckInCMD
  6517                           
  6518                           ;WiFly.c: 143: WiFly_SendString("reboot\r\n");
  6519  0070  3014               	movlw	low (STR_3| (0+32768))
  6520  0071  00F5               	movwf	WiFly_SendString@sendString
  6521  0072  3091               	movlw	high (STR_3| (0+32768))
  6522  0073  00F6               	movwf	WiFly_SendString@sendString+1
  6523  0074  2638  3180         	fcall	_WiFly_SendString
  6524                           
  6525                           ;WiFly.c: 144: WiFly_CheckRecv(softRebootStr);
  6526  0076  302D               	movlw	low (_softRebootStr| (0+32768))
  6527  0077  00F6               	movwf	WiFly_CheckRecv@chkString
  6528  0078  3091               	movlw	high (_softRebootStr| (0+32768))
  6529  0079  00F7               	movwf	WiFly_CheckRecv@chkString+1
  6530  007A  2641  3180         	fcall	_WiFly_CheckRecv
  6531                           
  6532                           ;WiFly.c: 145: WiFly_CheckRecv(hardRebootStr);
  6533  007C  27BF  3180         	fcall	PL28	;call to abstracted procedure
  6534  007E  2641               	fcall	_WiFly_CheckRecv
  6535                           
  6536                           ;WiFly.c: 146: inCMD = 0;
  6537  007F  0021               	movlb	1	; select bank1
  6538  0080  01EB               	clrf	_inCMD^(0+128)
  6539  0081  0008               	return
  6540  0082                     __end_of_WiFly_RebootCMD:	
  6541  0082                     __ptext3:	
  6542 ;; *************** function _WiFly_Example_InitializeAsClient *****************
  6543 ;; Defined at:
  6544 ;;		line 43 in file "mcc_generated_files/EXAMPLE_WiFly.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;  ssid            2   70[BANK0 ] PTR const unsigned char 
  6547 ;;		 -> STR_28(4), 
  6548 ;;  password        2   72[BANK0 ] PTR const unsigned char 
  6549 ;;		 -> STR_29(10), 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;		None
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 1F/0
  6558 ;;		On exit  : 1F/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6561 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;Total ram usage:        4 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:   12
  6568 ;; This function calls:
  6569 ;;		_WiFly_CheckRecv
  6570 ;;		_WiFly_FactoryReset
  6571 ;;		_WiFly_SaveConfig
  6572 ;;		_WiFly_SendCMD
  6573 ;;		_WiFly_SendCMD_SingleArg
  6574 ;;		_WiFly_SendString
  6575 ;; This function is called by:
  6576 ;;		_connect_network
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _WiFly_Example_InitializeAsClient
  6582  0082                     _WiFly_Example_InitializeAsClient:	
  6583  0082                     l151:	
  6584                           ;incstack = 0
  6585                           ; Regs used in _WiFly_Example_InitializeAsClient: [wreg-fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6586                           ;EXAMPLE_WiFly.c: 44: do { LATBbits.LATB2 = 1; } while(0);
  6587                           
  6588  0082  1517               	bsf	23,2	;volatile
  6589                           
  6590                           ;EXAMPLE_WiFly.c: 45: WiFly_FactoryReset();
  6591  0083  23B5  3180         	fcall	_WiFly_FactoryReset
  6592                           
  6593                           ;EXAMPLE_WiFly.c: 47: WiFly_SendCMD("set ip dhcp 1\r\n");
  6594  0085  308D               	movlw	low (STR_7| (0+32768))
  6595  0086  0020               	movlb	0	; select bank0
  6596  0087  00A4               	movwf	WiFly_SendCMD@cmd
  6597  0088  3090               	movlw	high (STR_7| (0+32768))
  6598  0089  00A5               	movwf	WiFly_SendCMD@cmd+1
  6599  008A  262C  3180         	fcall	_WiFly_SendCMD
  6600                           
  6601                           ;EXAMPLE_WiFly.c: 48: WiFly_SendCMD_SingleArg("set wlan passphrase %s\r\n", password);
  6602  008C  3000               	movlw	low (STR_8| (0+32768))
  6603  008D  00BA               	movwf	WiFly_SendCMD_SingleArg@cmdFormat
  6604  008E  3090               	movlw	high (STR_8| (0+32768))
  6605  008F  00BB               	movwf	WiFly_SendCMD_SingleArg@cmdFormat+1
  6606  0090  0869               	movf	WiFly_Example_InitializeAsClient@password+1,w
  6607  0091  00BD               	movwf	WiFly_SendCMD_SingleArg@arg+1
  6608  0092  0868               	movf	WiFly_Example_InitializeAsClient@password,w
  6609  0093  00BC               	movwf	WiFly_SendCMD_SingleArg@arg
  6610  0094  20B3  3180         	fcall	_WiFly_SendCMD_SingleArg
  6611                           
  6612                           ;EXAMPLE_WiFly.c: 49: WiFly_SendCMD_SingleArg("set wlan ssid %s\r\n", ssid);
  6613  0096  3057               	movlw	low (STR_9| (0+32768))
  6614  0097  00BA               	movwf	WiFly_SendCMD_SingleArg@cmdFormat
  6615  0098  3090               	movlw	high (STR_9| (0+32768))
  6616  0099  00BB               	movwf	WiFly_SendCMD_SingleArg@cmdFormat+1
  6617  009A  0867               	movf	WiFly_Example_InitializeAsClient@ssid+1,w
  6618  009B  00BD               	movwf	WiFly_SendCMD_SingleArg@arg+1
  6619  009C  0866               	movf	WiFly_Example_InitializeAsClient@ssid,w
  6620  009D  00BC               	movwf	WiFly_SendCMD_SingleArg@arg
  6621  009E  20B3  3180         	fcall	_WiFly_SendCMD_SingleArg
  6622                           
  6623                           ;EXAMPLE_WiFly.c: 50: WiFly_SendCMD("set wlan join 1\r\n");
  6624  00A0  306A               	movlw	low (STR_10| (0+32768))
  6625  00A1  00A4               	movwf	WiFly_SendCMD@cmd
  6626  00A2  3090               	movlw	high (STR_10| (0+32768))
  6627  00A3  00A5               	movwf	WiFly_SendCMD@cmd+1
  6628  00A4  262C  3180         	fcall	_WiFly_SendCMD
  6629                           
  6630                           ;EXAMPLE_WiFly.c: 51: WiFly_SendString("set ip protocol 08\r\n");
  6631  00A6  3019               	movlw	low (STR_11| (0+32768))
  6632  00A7  00F5               	movwf	WiFly_SendString@sendString
  6633  00A8  3090               	movlw	high (STR_11| (0+32768))
  6634  00A9  00F6               	movwf	WiFly_SendString@sendString+1
  6635  00AA  2638  3180         	fcall	_WiFly_SendString
  6636                           
  6637                           ;EXAMPLE_WiFly.c: 52: WiFly_SaveConfig();
  6638  00AC  2691  3180         	fcall	_WiFly_SaveConfig
  6639                           
  6640                           ;EXAMPLE_WiFly.c: 53: WiFly_CheckRecv("IF=UP");
  6641  00AE  305D               	movlw	low (STR_12| (0+32768))
  6642  00AF  00F6               	movwf	WiFly_CheckRecv@chkString
  6643  00B0  3091               	movlw	high (STR_12| (0+32768))
  6644  00B1  00F7               	movwf	WiFly_CheckRecv@chkString+1
  6645  00B2  2E41               	ljmp	l3369
  6646  00B3                     __end_of_WiFly_Example_InitializeAsClient:	
  6647  00B3                     __ptext4:	
  6648 ;; *************** function _WiFly_SendCMD_SingleArg *****************
  6649 ;; Defined at:
  6650 ;;		line 115 in file "mcc_generated_files/WiFly.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;  cmdFormat       2   26[BANK0 ] PTR const unsigned char 
  6653 ;;		 -> STR_9(19), STR_8(25), 
  6654 ;;  arg             2   28[BANK0 ] PTR const unsigned char 
  6655 ;;		 -> STR_29(10), STR_28(4), 
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;  txBuffer       40   30[BANK0 ] unsigned char [40]
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      void 
  6660 ;; Registers used:
  6661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 1F/0
  6664 ;;		On exit  : 1F/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6667 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Totals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;Total ram usage:       44 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    9
  6674 ;; This function calls:
  6675 ;;		_Clear_RX_Buffer
  6676 ;;		_WiFly_CheckInCMD
  6677 ;;		_WiFly_CheckRecv
  6678 ;;		_WiFly_Send
  6679 ;;		_sprintf
  6680 ;; This function is called by:
  6681 ;;		_WiFly_Example_InitializeAsClient
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           
  6686                           ;psect for function _WiFly_SendCMD_SingleArg
  6687  00B3                     _WiFly_SendCMD_SingleArg:	
  6688                           
  6689                           ;WiFly.c: 116: WiFly_CheckInCMD();
  6690                           
  6691                           ;incstack = 0
  6692                           ; Regs used in _WiFly_SendCMD_SingleArg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6693  00B3  2320  3180         	fcall	_WiFly_CheckInCMD
  6694                           
  6695                           ;WiFly.c: 117: Clear_RX_Buffer();
  6696  00B5  2250  3180         	fcall	_Clear_RX_Buffer
  6697                           
  6698                           ;WiFly.c: 118: char txBuffer[40];
  6699                           ;WiFly.c: 119: sprintf(txBuffer, cmdFormat, arg);
  6700  00B7  0020               	movlb	0	; select bank0
  6701  00B8  083B               	movf	WiFly_SendCMD_SingleArg@cmdFormat+1,w
  6702  00B9  00A2               	movwf	sprintf@f+1
  6703  00BA  083A               	movf	WiFly_SendCMD_SingleArg@cmdFormat,w
  6704  00BB  00A1               	movwf	sprintf@f
  6705  00BC  083D               	movf	WiFly_SendCMD_SingleArg@arg+1,w
  6706  00BD  00A4               	movwf	(low ((?_sprintf| 0+2))+1)
  6707  00BE  083C               	movf	WiFly_SendCMD_SingleArg@arg,w
  6708  00BF  00A3               	movwf	low ((?_sprintf| 0+2))
  6709  00C0  303E               	movlw	(low (WiFly_SendCMD_SingleArg@txBuffer| 0))& (0+255)
  6710  00C1  23DB  3180         	fcall	_sprintf
  6711                           
  6712                           ;WiFly.c: 120: WiFly_Send(txBuffer);
  6713  00C3  303E               	movlw	low WiFly_SendCMD_SingleArg@txBuffer
  6714  00C4  00F2               	movwf	WiFly_Send@command
  6715  00C5  3000               	movlw	high WiFly_SendCMD_SingleArg@txBuffer
  6716  00C6  00F3               	movwf	WiFly_Send@command+1
  6717  00C7  2677  3180         	fcall	_WiFly_Send
  6718                           
  6719                           ;WiFly.c: 121: WiFly_CheckRecv(aokStr);
  6720  00C9  27BA  3180         	fcall	PL26	;call to abstracted procedure
  6721  00CB  2E41               	ljmp	l3369
  6722  00CC                     __end_of_WiFly_SendCMD_SingleArg:	
  6723  00CC                     __ptext23:	
  6724 ;; *************** function _Knock *****************
  6725 ;; Defined at:
  6726 ;;		line 250 in file "main.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  knockString    10    1[BANK1 ] unsigned char [10]
  6731 ;;  returnVal       1   11[BANK1 ] unsigned char 
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  1    wreg      unsigned char 
  6734 ;; Registers used:
  6735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 1F/0
  6738 ;;		On exit  : 1F/1
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;Total ram usage:       12 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:   12
  6748 ;; This function calls:
  6749 ;;		_TMR4_StopTimer
  6750 ;;		_get_response
  6751 ;;		_goto_mode
  6752 ;;		_send_message
  6753 ;;		_sprintf
  6754 ;; This function is called by:
  6755 ;;		_main
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           
  6760                           ;psect for function _Knock
  6761  00CC                     _Knock:	
  6762                           
  6763                           ;main.c: 251: uint8_t returnVal;
  6764                           ;main.c: 252: TMR4_StopTimer();
  6765                           
  6766                           ;incstack = 0
  6767                           ; Regs used in _Knock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6768  00CC  221E  3180         	fcall	_TMR4_StopTimer
  6769                           
  6770                           ;main.c: 253: char knockString[] = "knock 123";
  6771  00CE  30A0               	movlw	low Knock@F14741
  6772  00CF  0086               	movwf	6
  6773  00D0  3000               	movlw	high Knock@F14741
  6774  00D1  0087               	movwf	7
  6775  00D2  30D3               	movlw	low Knock@knockString
  6776  00D3  0084               	movwf	4
  6777  00D4  3000               	movlw	high Knock@knockString
  6778  00D5  0085               	movwf	5
  6779  00D6  300A               	movlw	10
  6780  00D7  0021               	movlb	1	; select bank1
  6781  00D8  00D2               	movwf	??_Knock^(0+128)
  6782  00D9                     u3280:	
  6783  00D9  0016               	moviw fsr1++
  6784  00DA  001A               	movwi fsr0++
  6785  00DB  0BD2               	decfsz	??_Knock^(0+128),f
  6786  00DC  28D9               	goto	u3280
  6787                           
  6788                           ;main.c: 254: sprintf(knockString, "knock %03d", UID);
  6789  00DD  30E2               	movlw	low (STR_27| (0+32768))
  6790  00DE  0020               	movlb	0	; select bank0
  6791  00DF  00A1               	movwf	sprintf@f
  6792  00E0  3090               	movlw	high (STR_27| (0+32768))
  6793  00E1  27A8  3180         	fcall	PL20	;call to abstracted procedure
  6794  00E3  30D3               	movlw	(low (Knock@knockString| 0))& (0+255)
  6795  00E4  01A4               	clrf	?_sprintf+3
  6796  00E5  23DB  3180         	fcall	_sprintf
  6797  00E7                     l3949:	
  6798                           
  6799                           ;main.c: 256: send_message(knockString);
  6800  00E7  30D3               	movlw	(low (Knock@knockString| 0))& (0+255)
  6801  00E8  21FC  3180         	fcall	_send_message
  6802                           
  6803                           ;main.c: 257: returnVal = get_response();
  6804  00EA  21D4  3180         	fcall	_get_response
  6805  00EC  0021               	movlb	1	; select bank1
  6806  00ED  00DD               	movwf	Knock@returnVal^(0+128)
  6807                           
  6808                           ;main.c: 258: if (returnVal == SUCCESS) {
  6809  00EE  085D               	movf	Knock@returnVal^(0+128),w
  6810  00EF  1D03               	btfss	3,2
  6811  00F0  28F3               	goto	l3957
  6812                           
  6813                           ;main.c: 259: goto_mode(PAIRED);
  6814  00F1  3001               	movlw	1
  6815  00F2  28F4               	goto	L2
  6816  00F3                     l3957:	
  6817                           ;main.c: 260: } else {
  6818                           
  6819                           
  6820                           ;main.c: 261: goto_mode(UNPAIRED);
  6821  00F3  3002               	movlw	2
  6822  00F4                     L2:	
  6823  00F4  217F  3180         	fcall	_goto_mode
  6824                           
  6825                           ;main.c: 262: }
  6826                           ;main.c: 263: } while ((returnVal == TX_ERROR));
  6827  00F6  3002               	movlw	2
  6828  00F7  0021               	movlb	1	; select bank1
  6829  00F8  065D               	xorwf	Knock@returnVal^(0+128),w
  6830  00F9  1D03               	btfss	3,2
  6831  00FA  0008               	return
  6832  00FB  28E7               	goto	l3949
  6833  00FC                     __end_of_Knock:	
  6834  00FC                     __pmaintext:	
  6835 ;;
  6836 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6837 ;;
  6838 ;; *************** function _main *****************
  6839 ;; Defined at:
  6840 ;;		line 281 in file "main.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;		None
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      void 
  6847 ;; Registers used:
  6848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6849 ;; Tracked objects:
  6850 ;;		On entry : B1F/0
  6851 ;;		On exit  : 1F/1
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;Total ram usage:        0 bytes
  6859 ;; Hardware stack levels required when called:   14
  6860 ;; This function calls:
  6861 ;;		_Knock
  6862 ;;		_Pair
  6863 ;;		_SYSTEM_Initialize
  6864 ;;		_TMR2_SetInterruptHandler
  6865 ;;		_TMR2_StartTimer
  6866 ;;		_TMR4_SetInterruptHandler
  6867 ;;		_TMR4_StopTimer
  6868 ;;		_Validate
  6869 ;;		_WiFly_FactoryReset
  6870 ;;		_connect_network
  6871 ;;		_eeprom_read
  6872 ;; This function is called by:
  6873 ;;		Startup code after reset
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           
  6878                           ;psect for function _main
  6879  00FC                     _main:	
  6880                           
  6881                           ;main.c: 282: WDTCON0bits.SWDTEN = 0;
  6882                           
  6883                           ;incstack = 0
  6884                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6885  00FC  0030               	movlb	16	; select bank16
  6886  00FD  100C               	bcf	12,0	;volatile
  6887                           
  6888                           ;main.c: 284: SYSTEM_Initialize();
  6889  00FE  234D  3180         	fcall	_SYSTEM_Initialize
  6890                           
  6891                           ;main.c: 286: TMR2_SetInterruptHandler(blink);
  6892  0100  3050               	movlw	low _blink
  6893  0101  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  6894  0102  300F               	movlw	high _blink
  6895  0103  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  6896  0104  2341  3180         	fcall	_TMR2_SetInterruptHandler
  6897                           
  6898                           ;main.c: 287: TMR4_SetInterruptHandler(setFlag);
  6899  0106  3046               	movlw	low _setFlag
  6900  0107  00F1               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  6901  0108  300F               	movlw	high _setFlag
  6902  0109  00F2               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  6903  010A  2347  3180         	fcall	_TMR4_SetInterruptHandler
  6904                           
  6905                           ;main.c: 293: (INTCONbits.GIE = 1);
  6906  010C  178B               	bsf	11,7	;volatile
  6907                           
  6908                           ;main.c: 296: (INTCONbits.PEIE = 1);
  6909  010D  170B               	bsf	11,6	;volatile
  6910                           
  6911                           ;main.c: 298: TMR2_StartTimer();
  6912  010E  2247  3180         	fcall	_TMR2_StartTimer
  6913                           
  6914                           ;main.c: 299: TMR4_StopTimer();
  6915  0110  221E  3180         	fcall	_TMR4_StopTimer
  6916                           
  6917                           ;main.c: 301: UID = eeprom_read(1);
  6918  0112  3001               	movlw	1
  6919  0113  26E9  3180         	fcall	_eeprom_read
  6920  0115  0021               	movlb	1	; select bank1
  6921  0116  00E9               	movwf	_UID^(0+128)
  6922                           
  6923                           ;main.c: 303: WiFly_FactoryReset();
  6924  0117  23B5  3180         	fcall	_WiFly_FactoryReset
  6925                           
  6926                           ;main.c: 304: connect_network("A&Y", "H@cker101");
  6927  0119  307F               	movlw	low (STR_28| (0+32768))
  6928  011A  00D2               	movwf	connect_network@ssid^(0+128)
  6929  011B  3091               	movlw	high (STR_28| (0+32768))
  6930  011C  00D3               	movwf	(connect_network@ssid^(0+128)+1)
  6931  011D  30F7               	movlw	low (STR_29| (0+32768))
  6932  011E  00D4               	movwf	connect_network@passwd^(0+128)
  6933  011F  3090               	movlw	high (STR_29| (0+32768))
  6934  0120  00D5               	movwf	(connect_network@passwd^(0+128)+1)
  6935  0121  26D9  3180         	fcall	_connect_network
  6936                           
  6937                           ;main.c: 306: if (UID == 0xFF) {
  6938  0123  0021               	movlb	1	; select bank1
  6939  0124  0F69               	incfsz	_UID^(0+128),w
  6940  0125  292B               	goto	l3987
  6941                           
  6942                           ;main.c: 307: mode = UNPAIRED;
  6943  0126  3002               	movlw	2
  6944  0127  00D0               	movwf	_mode^(0+128)
  6945                           
  6946                           ;main.c: 308: Pair();
  6947  0128  214C  3180         	fcall	_Pair
  6948                           
  6949                           ;main.c: 309: } else {
  6950  012A  292D               	goto	l3989
  6951  012B                     l3987:	
  6952                           
  6953                           ;main.c: 310: Validate();
  6954  012B  21A2  3180         	fcall	_Validate
  6955  012D                     l3989:	
  6956                           
  6957                           ;main.c: 311: }
  6958                           ;main.c: 313: WDTCON0bits.SWDTEN = 1;
  6959  012D  0030               	movlb	16	; select bank16
  6960  012E  140C               	bsf	12,0	;volatile
  6961                           
  6962                           ;main.c: 317: switch (mode) {
  6963  012F  2940               	goto	l599
  6964  0130                     l601:	
  6965                           ;main.c: 318: case UNPAIRED:
  6966                           
  6967                           
  6968                           ;main.c: 319: if (PORTAbits.RA5 == 0) {
  6969  0130  0020               	movlb	0	; select bank0
  6970  0131  1A8C               	btfsc	12,5	;volatile
  6971  0132  2940               	goto	l599
  6972                           
  6973                           ;main.c: 320: Pair();
  6974  0133  214C  3180         	fcall	_Pair
  6975  0135  2940               	goto	l599
  6976  0136                     l3993:	
  6977                           
  6978                           ;main.c: 324: if (pingTime) {
  6979  0136  084F               	movf	_pingTime^(0+128),w
  6980  0137  1903               	btfsc	3,2
  6981  0138  293B               	goto	l3997
  6982                           
  6983                           ;main.c: 325: Validate();
  6984  0139  21A2  3180         	fcall	_Validate
  6985  013B                     l3997:	
  6986                           
  6987                           ;main.c: 326: }
  6988                           ;main.c: 327: if (PORTCbits.RC2 == 0) {
  6989  013B  0020               	movlb	0	; select bank0
  6990  013C  190E               	btfsc	14,2	;volatile
  6991  013D  2940               	goto	l599
  6992                           
  6993                           ;main.c: 328: Knock();
  6994  013E  20CC  3180         	fcall	_Knock
  6995  0140                     l599:	
  6996                           ;main.c: 315: while (1) {
  6997                           
  6998  0140  0064               	clrwdt	;# 
  6999  0141  0021               	movlb	1	; select bank1
  7000  0142  0850               	movf	_mode^(0+128),w
  7001                           
  7002                           ; Switch size 1, requested type "space"
  7003                           ; Number of cases is 2, Range of values is 1 to 2
  7004                           ; switch strategies available:
  7005                           ; Name         Instructions Cycles
  7006                           ; simple_byte            7     4 (average)
  7007                           ; direct_byte           13     9 (fixed)
  7008                           ; jumptable            263     9 (fixed)
  7009                           ;	Chosen strategy is simple_byte
  7010  0143  3A01               	xorlw	1	; case 1
  7011  0144  1903               	skipnz
  7012  0145  2936               	goto	l3993
  7013  0146  3A03               	xorlw	3	; case 2
  7014  0147  1903               	skipnz
  7015  0148  2930               	goto	l601
  7016  0149  2940               	goto	l599
  7017  014A  3180  2834         	ljmp	start
  7018  014C                     __end_of_main:	
  7019  014C                     __ptext21:	
  7020 ;; *************** function _Pair *****************
  7021 ;; Defined at:
  7022 ;;		line 213 in file "main.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;		None
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;  pairString      9    1[BANK1 ] unsigned char [9]
  7027 ;;  returnVal       1   10[BANK1 ] unsigned char 
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  1    wreg      unsigned char 
  7030 ;; Registers used:
  7031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7032 ;; Tracked objects:
  7033 ;;		On entry : 1E/1
  7034 ;;		On exit  : 1B/1
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;Total ram usage:       11 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; Hardware stack levels required when called:   12
  7044 ;; This function calls:
  7045 ;;		_WiFly_ReadChar
  7046 ;;		_eeprom_write
  7047 ;;		_get_response
  7048 ;;		_goto_mode
  7049 ;;		_send_message
  7050 ;;		_sprintf
  7051 ;; This function is called by:
  7052 ;;		_main
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           
  7057                           ;psect for function _Pair
  7058  014C                     _Pair:	
  7059                           
  7060                           ;main.c: 214: uint8_t returnVal;
  7061                           ;main.c: 215: char pairString[] = "pair 123";
  7062                           
  7063                           ;incstack = 0
  7064                           ; Regs used in _Pair: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7065  014C  30AA               	movlw	low Pair@F14733
  7066  014D  0086               	movwf	6
  7067  014E  3000               	movlw	high Pair@F14733
  7068  014F  0087               	movwf	7
  7069  0150  30D3               	movlw	low Pair@pairString
  7070  0151  0084               	movwf	4
  7071  0152  3000               	movlw	high Pair@pairString
  7072  0153  0085               	movwf	5
  7073  0154  3009               	movlw	9
  7074  0155  0021               	movlb	1	; select bank1
  7075  0156  00D2               	movwf	??_Pair^(0+128)
  7076  0157                     u3220:	
  7077  0157  0016               	moviw fsr1++
  7078  0158  001A               	movwi fsr0++
  7079  0159  0BD2               	decfsz	??_Pair^(0+128),f
  7080  015A  2957               	goto	u3220
  7081                           
  7082                           ;main.c: 216: sprintf(pairString, "pair %03d", UID);
  7083  015B  3001               	movlw	low (STR_25| (0+32768))
  7084  015C  0020               	movlb	0	; select bank0
  7085  015D  00A1               	movwf	sprintf@f
  7086  015E  3091               	movlw	high (STR_25| (0+32768))
  7087  015F  27A8  3180         	fcall	PL20	;call to abstracted procedure
  7088  0161  30D3               	movlw	(low (Pair@pairString| 0))& (0+255)
  7089  0162  01A4               	clrf	?_sprintf+3
  7090  0163  23DB  3180         	fcall	_sprintf
  7091                           
  7092                           ;main.c: 217: send_message(pairString);
  7093  0165  30D3               	movlw	(low (Pair@pairString| 0))& (0+255)
  7094  0166  21FC  3180         	fcall	_send_message
  7095                           
  7096                           ;main.c: 218: goto_mode(PAIRING);
  7097  0168  3003               	movlw	3
  7098  0169  217F  3180         	fcall	_goto_mode
  7099                           
  7100                           ;main.c: 219: returnVal = get_response();
  7101  016B  21D4  3180         	fcall	_get_response
  7102  016D  0021               	movlb	1	; select bank1
  7103  016E  00DC               	movwf	Pair@returnVal^(0+128)
  7104                           
  7105                           ;main.c: 220: if (returnVal == SUCCESS) {
  7106  016F  085C               	movf	Pair@returnVal^(0+128),w
  7107  0170  1D03               	btfss	3,2
  7108  0171  297D               	goto	l3917
  7109                           
  7110                           ;main.c: 221: UID = WiFly_ReadChar();
  7111  0172  21EF  3180         	fcall	_WiFly_ReadChar
  7112  0174  0021               	movlb	1	; select bank1
  7113  0175  00E9               	movwf	_UID^(0+128)
  7114                           
  7115                           ;main.c: 222: eeprom_write(1, UID);
  7116  0176  0869               	movf	_UID^(0+128),w
  7117  0177  00F1               	movwf	eeprom_write@value
  7118  0178  3001               	movlw	1
  7119  0179  2325  3180         	fcall	_eeprom_write
  7120                           
  7121                           ;main.c: 223: goto_mode(PAIRED);
  7122  017B  3001               	movlw	1
  7123  017C  297F               	ljmp	_goto_mode
  7124  017D                     l3917:	
  7125                           ;main.c: 224: } else {
  7126                           
  7127                           
  7128                           ;main.c: 225: goto_mode(UNPAIRED);
  7129  017D  3002               	movlw	2
  7130  017E  297F               	ljmp	_goto_mode
  7131  017F                     __end_of_Pair:	
  7132  017F                     __ptext42:	
  7133 ;; *************** function _goto_mode *****************
  7134 ;; Defined at:
  7135 ;;		line 97 in file "main.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  target          1    wreg     unsigned char 
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;  target          1    2[COMMON] unsigned char 
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  1    wreg      void 
  7142 ;; Registers used:
  7143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/1
  7146 ;;		On exit  : 1B/1
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;Total ram usage:        1 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; Hardware stack levels required when called:    7
  7156 ;; This function calls:
  7157 ;;		_ClearIndicators
  7158 ;;		_SetIndication
  7159 ;;		_TMR2_StartTimer
  7160 ;;		_TMR2_StopTimer
  7161 ;;		_TMR4_StartTimer
  7162 ;;		_TMR4_StopTimer
  7163 ;; This function is called by:
  7164 ;;		_get_response
  7165 ;;		_send_message
  7166 ;;		_Pair
  7167 ;;		_Validate
  7168 ;;		_Knock
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           
  7173                           ;psect for function _goto_mode
  7174  017F                     _goto_mode:	
  7175                           
  7176                           ;incstack = 0
  7177                           ; Regs used in _goto_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7178                           ;goto_mode@target stored from wreg
  7179  017F  00F2               	movwf	goto_mode@target
  7180                           
  7181                           ;main.c: 98: mode = target;
  7182  0180  0021               	movlb	1	; select bank1
  7183  0181  00D0               	movwf	_mode^(0+128)
  7184                           
  7185                           ; Switch size 1, requested type "space"
  7186                           ; Number of cases is 4, Range of values is 1 to 4
  7187                           ; switch strategies available:
  7188                           ; Name         Instructions Cycles
  7189                           ; simple_byte           13     7 (average)
  7190                           ; direct_byte           17     9 (fixed)
  7191                           ; jumptable            263     9 (fixed)
  7192                           ;	Chosen strategy is simple_byte
  7193                           
  7194                           ;main.c: 117: break;
  7195                           
  7196                           ;main.c: 99: switch (mode) {
  7197  0182  3A01               	xorlw	1	; case 1
  7198  0183  1903               	skipnz
  7199  0184  298F               	goto	l3777
  7200  0185  3A03               	xorlw	3	; case 2
  7201  0186  1903               	skipnz
  7202  0187  299B               	goto	l3791
  7203  0188  3A01               	xorlw	1	; case 3
  7204  0189  1903               	skipnz
  7205  018A  2999               	goto	l3787
  7206  018B  3A07               	xorlw	7	; case 4
  7207  018C  1903               	skipnz
  7208  018D  2995               	goto	l3783
  7209  018E  29A0               	goto	l512
  7210  018F                     l3777:	
  7211                           
  7212                           ;main.c: 101: TMR2_StopTimer();
  7213  018F  21A1  3180         	fcall	_TMR2_StopTimer
  7214                           
  7215                           ;main.c: 102: SetIndication(1);
  7216  0191  3001               	movlw	1
  7217  0192  224B  3180         	fcall	_SetIndication
  7218                           
  7219                           ;main.c: 103: TMR4_StartTimer();
  7220  0194  2BAC               	ljmp	l3677
  7221  0195                     l3783:	
  7222                           ;main.c: 104: break;
  7223                           
  7224                           
  7225                           ;main.c: 106: T2PR = 10;
  7226  0195  300A               	movlw	10
  7227  0196                     L10:	
  7228  0196  0025               	movlb	5	; select bank5
  7229  0197  008D               	movwf	13	;volatile
  7230                           
  7231                           ;main.c: 107: TMR2_StartTimer();
  7232  0198  2EFB               	ljmp	l3673
  7233  0199                     l3787:	
  7234                           ;main.c: 108: break;
  7235                           
  7236                           
  7237                           ;main.c: 110: T2PR = 2;
  7238  0199  3002               	movlw	2
  7239  019A  2996               	goto	L10
  7240  019B                     l3791:	
  7241                           
  7242                           ;main.c: 114: TMR2_StopTimer();
  7243  019B  21A1  3180         	fcall	_TMR2_StopTimer
  7244                           
  7245                           ;main.c: 115: TMR4_StopTimer();
  7246  019D  221E  3180         	fcall	_TMR4_StopTimer
  7247                           
  7248                           ;main.c: 116: ClearIndicators();
  7249  019F  2EF8               	ljmp	l3687
  7250  01A0                     l512:	
  7251  01A0  0008               	return
  7252  01A1                     __end_of_goto_mode:	
  7253  01A1                     __ptext47:	
  7254 ;; *************** function _TMR2_StopTimer *****************
  7255 ;; Defined at:
  7256 ;;		line 127 in file "mcc_generated_files/tmr2.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;		None
  7259 ;; Auto vars:     Size  Location     Type
  7260 ;;		None
  7261 ;; Return value:  Size  Location     Type
  7262 ;;                  1    wreg      void 
  7263 ;; Registers used:
  7264 ;;		status,2, status,0, pclath, cstack
  7265 ;; Tracked objects:
  7266 ;;		On entry : 0/1
  7267 ;;		On exit  : 1F/5
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;Total ram usage:        0 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    6
  7277 ;; This function calls:
  7278 ;;		_TMR2_Stop
  7279 ;; This function is called by:
  7280 ;;		_goto_mode
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           
  7285                           ;psect for function _TMR2_StopTimer
  7286  01A1                     _TMR2_StopTimer:	
  7287                           
  7288                           ;tmr2.c: 129: TMR2_Stop();
  7289                           
  7290                           ;incstack = 0
  7291                           ; Regs used in _TMR2_StopTimer: [status,2+status,0+pclath+cstack]
  7292  01A1  2EFE               	ljmp	l3675
  7293  01A2                     __end_of_TMR2_StopTimer:	
  7294  01A2                     __ptext9:	
  7295 ;; *************** function _Validate *****************
  7296 ;; Defined at:
  7297 ;;		line 230 in file "main.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;		None
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;  valString      13    1[BANK1 ] unsigned char [13]
  7302 ;;  returnVal       1   14[BANK1 ] unsigned char 
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  1    wreg      unsigned char 
  7305 ;; Registers used:
  7306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7307 ;; Tracked objects:
  7308 ;;		On entry : 1F/1
  7309 ;;		On exit  : 1F/5
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;Total ram usage:       15 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; Hardware stack levels required when called:   12
  7319 ;; This function calls:
  7320 ;;		_TMR4_StartTimer
  7321 ;;		_get_response
  7322 ;;		_goto_mode
  7323 ;;		_send_message
  7324 ;;		_sprintf
  7325 ;; This function is called by:
  7326 ;;		_main
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           
  7331                           ;psect for function _Validate
  7332  01A2                     _Validate:	
  7333                           
  7334                           ;main.c: 231: uint8_t returnVal;
  7335                           ;main.c: 233: char valString[] = "validate 123";
  7336                           
  7337                           ;incstack = 0
  7338                           ; Regs used in _Validate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7339  01A2  3020               	movlw	low Validate@F14737
  7340  01A3  0086               	movwf	6
  7341  01A4  3001               	movlw	high Validate@F14737
  7342  01A5  0087               	movwf	7
  7343  01A6  30D3               	movlw	low Validate@valString
  7344  01A7  0084               	movwf	4
  7345  01A8  3000               	movlw	high Validate@valString
  7346  01A9  0085               	movwf	5
  7347  01AA  300D               	movlw	13
  7348  01AB  00D2               	movwf	??_Validate^(0+128)
  7349  01AC                     u3240:	
  7350  01AC  0016               	moviw fsr1++
  7351  01AD  001A               	movwi fsr0++
  7352  01AE  0BD2               	decfsz	??_Validate^(0+128),f
  7353  01AF  29AC               	goto	u3240
  7354                           
  7355                           ;main.c: 234: sprintf(valString, "validate %03d", UID);
  7356  01B0  30AD               	movlw	low (STR_26| (0+32768))
  7357  01B1  0020               	movlb	0	; select bank0
  7358  01B2  00A1               	movwf	sprintf@f
  7359  01B3  3090               	movlw	high (STR_26| (0+32768))
  7360  01B4  27A8  3180         	fcall	PL20	;call to abstracted procedure
  7361  01B6  30D3               	movlw	(low (Validate@valString| 0))& (0+255)
  7362  01B7  01A4               	clrf	?_sprintf+3
  7363  01B8  23DB  3180         	fcall	_sprintf
  7364  01BA                     l3925:	
  7365                           
  7366                           ;main.c: 236: send_message(valString);
  7367  01BA  30D3               	movlw	(low (Validate@valString| 0))& (0+255)
  7368  01BB  21FC  3180         	fcall	_send_message
  7369                           
  7370                           ;main.c: 237: returnVal = get_response();
  7371  01BD  21D4  3180         	fcall	_get_response
  7372  01BF  0021               	movlb	1	; select bank1
  7373  01C0  00E0               	movwf	Validate@returnVal^(0+128)
  7374                           
  7375                           ;main.c: 238: if (returnVal == SUCCESS) {
  7376  01C1  0860               	movf	Validate@returnVal^(0+128),w
  7377  01C2  1D03               	btfss	3,2
  7378  01C3  29C6               	goto	l3933
  7379                           
  7380                           ;main.c: 239: goto_mode(PAIRED);
  7381  01C4  3001               	movlw	1
  7382  01C5  29C9               	goto	L1
  7383  01C6                     l3933:	
  7384                           ;main.c: 240: } else if (returnVal == FAILED) {
  7385                           
  7386  01C6  0B60               	decfsz	Validate@returnVal^(0+128),w
  7387  01C7  29CB               	goto	l3937
  7388                           
  7389                           ;main.c: 241: goto_mode(UNPAIRED);
  7390  01C8  3002               	movlw	2
  7391  01C9                     L1:	
  7392  01C9  217F  3180         	fcall	_goto_mode
  7393  01CB                     l3937:	
  7394                           
  7395                           ;main.c: 242: }
  7396                           ;main.c: 243: } while (returnVal == TX_ERROR);
  7397  01CB  3002               	movlw	2
  7398  01CC  0021               	movlb	1	; select bank1
  7399  01CD  0660               	xorwf	Validate@returnVal^(0+128),w
  7400  01CE  1903               	btfsc	3,2
  7401  01CF  29BA               	goto	l3925
  7402                           
  7403                           ;main.c: 244: LATAbits.LATA2 = 0;
  7404  01D0  0020               	movlb	0	; select bank0
  7405  01D1  1116               	bcf	22,2	;volatile
  7406                           
  7407                           ;main.c: 245: LATAbits.LATA3 = 1;
  7408  01D2  1596               	bsf	22,3	;volatile
  7409                           
  7410                           ;main.c: 246: TMR4_StartTimer();
  7411  01D3  2BAC               	ljmp	l3677
  7412  01D4                     __end_of_Validate:	
  7413  01D4                     __ptext41:	
  7414 ;; *************** function _get_response *****************
  7415 ;; Defined at:
  7416 ;;		line 182 in file "main.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;		None
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;  status          1    9[COMMON] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      unsigned char 
  7423 ;; Registers used:
  7424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 10/0
  7427 ;;		On exit  : 10/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7434 ;;Total ram usage:        1 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    8
  7437 ;; This function calls:
  7438 ;;		_WaitResponse
  7439 ;;		_WiFly_ReadChar
  7440 ;;		_goto_mode
  7441 ;; This function is called by:
  7442 ;;		_Pair
  7443 ;;		_Validate
  7444 ;;		_Knock
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           
  7449                           ;psect for function _get_response
  7450  01D4                     _get_response:	
  7451                           
  7452                           ;main.c: 183: LATAbits.LATA1 = 0;
  7453                           
  7454                           ;incstack = 0
  7455                           ; Regs used in _get_response: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7456  01D4  0020               	movlb	0	; select bank0
  7457  01D5  1096               	bcf	22,1	;volatile
  7458                           
  7459                           ;main.c: 184: LATAbits.LATA2 = 1;
  7460  01D6  1516               	bsf	22,2	;volatile
  7461  01D7                     l3849:	
  7462                           
  7463                           ;main.c: 186: WaitResponse("Stat: ");
  7464  01D7  303B               	movlw	low (STR_21| (0+32768))
  7465  01D8  00F6               	movwf	WaitResponse@chkString
  7466  01D9  3091               	movlw	high (STR_21| (0+32768))
  7467  01DA  00F7               	movwf	WaitResponse@chkString+1
  7468  01DB  221F  3180         	fcall	_WaitResponse
  7469                           
  7470                           ;main.c: 187: uint8_t status = WiFly_ReadChar();
  7471  01DD  21EF  3180         	fcall	_WiFly_ReadChar
  7472  01DF  00F9               	movwf	get_response@status
  7473                           
  7474                           ;main.c: 188: if (status == 'Y') {
  7475  01E0  3A59               	xorlw	89
  7476  01E1  1D03               	btfss	3,2
  7477  01E2  29E6               	goto	l3861
  7478                           
  7479                           ;main.c: 189: goto_mode(PAIRED);
  7480  01E3  3001               	movlw	1
  7481  01E4  217F               	fcall	_goto_mode
  7482                           
  7483                           ;main.c: 190: return SUCCESS;
  7484  01E5  3400               	retlw	0
  7485  01E6                     l3861:	
  7486  01E6  304E               	movlw	78
  7487  01E7  0679               	xorwf	get_response@status,w
  7488  01E8  1903               	btfsc	3,2
  7489                           
  7490                           ;main.c: 192: return FAILED;
  7491  01E9  3401               	retlw	1
  7492  01EA  3045               	movlw	69
  7493  01EB  0679               	xorwf	get_response@status,w
  7494  01EC  1903               	btfsc	3,2
  7495                           
  7496                           ;main.c: 194: return TX_ERROR;
  7497  01ED  3402               	retlw	2
  7498  01EE  29D7               	goto	l3849
  7499  01EF                     __end_of_get_response:	
  7500  01EF                     __ptext55:	
  7501 ;; *************** function _WiFly_ReadChar *****************
  7502 ;; Defined at:
  7503 ;;		line 74 in file "mcc_generated_files/WiFly.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      unsigned char 
  7510 ;; Registers used:
  7511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 10/1
  7514 ;;		On exit  : 1F/E
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        0 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    6
  7524 ;; This function calls:
  7525 ;;		_EUSART_Read
  7526 ;;		_EUSART_is_rx_ready
  7527 ;; This function is called by:
  7528 ;;		_CheckResponse
  7529 ;;		_WaitResponse
  7530 ;;		_get_response
  7531 ;;		_Pair
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           
  7536                           ;psect for function _WiFly_ReadChar
  7537  01EF                     _WiFly_ReadChar:	
  7538  01EF                     l3415:	
  7539                           ;WiFly.c: 75: while (!EUSART_is_rx_ready()) {
  7540                           
  7541                           ;incstack = 0
  7542                           ; Regs used in _WiFly_ReadChar: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7543                           
  7544  01EF  2248  3180         	fcall	_EUSART_is_rx_ready
  7545  01F1  3A00               	xorlw	0
  7546  01F2  1D03               	btfss	3,2
  7547  01F3  29F6               	goto	l3417
  7548                           
  7549                           ;WiFly.c: 76: __nop();
  7550  01F4  0000               	nop
  7551  01F5  29EF               	goto	l3415
  7552  01F6                     l3417:	
  7553                           
  7554                           ;WiFly.c: 77: }
  7555                           ;WiFly.c: 78: return uart[WiFly].Read();
  7556  01F6  27AE               	fcall	PL22	;call to abstracted procedure
  7557  01F7  008A               	movwf	10
  7558  01F8  3F00               	moviw [0]fsr0
  7559  01F9  000A               	callw
  7560  01FA  3180               	pagesel	$
  7561  01FB  0008               	return
  7562  01FC                     __end_of_WiFly_ReadChar:	
  7563  01FC                     __ptext24:	
  7564 ;; *************** function _send_message *****************
  7565 ;; Defined at:
  7566 ;;		line 200 in file "main.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  message         1    wreg     PTR const unsigned char 
  7569 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  message         1   76[BANK0 ] PTR const unsigned char 
  7572 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      void 
  7575 ;; Registers used:
  7576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 1E/0
  7579 ;;		On exit  : 10/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;Total ram usage:        1 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:   11
  7589 ;; This function calls:
  7590 ;;		_Clear_RX_Buffer
  7591 ;;		_WaitResponse
  7592 ;;		_WiFly_SendString
  7593 ;;		_connect_socket
  7594 ;;		_goto_mode
  7595 ;; This function is called by:
  7596 ;;		_Pair
  7597 ;;		_Validate
  7598 ;;		_Knock
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           
  7603                           ;psect for function _send_message
  7604  01FC                     _send_message:	
  7605                           
  7606                           ;incstack = 0
  7607                           ; Regs used in _send_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7608                           ;send_message@message stored from wreg
  7609  01FC  0020               	movlb	0	; select bank0
  7610  01FD  00EC               	movwf	send_message@message
  7611                           
  7612                           ;main.c: 201: goto_mode(DISCONNECTED);
  7613  01FE  3004               	movlw	4
  7614  01FF  217F  3180         	fcall	_goto_mode
  7615                           
  7616                           ;main.c: 202: LATAbits.LATA3 = 0;
  7617  0201  0020               	movlb	0	; select bank0
  7618  0202  1196               	bcf	22,3	;volatile
  7619                           
  7620                           ;main.c: 203: LATAbits.LATA0 = 1;
  7621  0203  1416               	bsf	22,0	;volatile
  7622                           
  7623                           ;main.c: 204: connect_socket("192.168.1.7", "1335");
  7624  0204  30D6               	movlw	low (STR_22| (0+32768))
  7625  0205  00E8               	movwf	connect_socket@addr
  7626  0206  3090               	movlw	high (STR_22| (0+32768))
  7627  0207  00E9               	movwf	connect_socket@addr+1
  7628  0208  306D               	movlw	low (STR_23| (0+32768))
  7629  0209  00EA               	movwf	connect_socket@port
  7630  020A  3091               	movlw	high (STR_23| (0+32768))
  7631  020B  00EB               	movwf	connect_socket@port+1
  7632  020C  22E9  3180         	fcall	_connect_socket
  7633                           
  7634                           ;main.c: 205: LATAbits.LATA0 = 0;
  7635  020E  0020               	movlb	0	; select bank0
  7636  020F  1016               	bcf	22,0	;volatile
  7637                           
  7638                           ;main.c: 206: LATAbits.LATA1 = 1;
  7639  0210  1496               	bsf	22,1	;volatile
  7640                           
  7641                           ;main.c: 207: Clear_RX_Buffer();
  7642  0211  2250  3180         	fcall	_Clear_RX_Buffer
  7643                           
  7644                           ;main.c: 208: WaitResponse("Proceed");
  7645  0213  3025               	movlw	low (STR_14| (0+32768))
  7646  0214  00F6               	movwf	WaitResponse@chkString
  7647  0215  3091               	movlw	high (STR_14| (0+32768))
  7648  0216  00F7               	movwf	WaitResponse@chkString+1
  7649  0217  221F  3180         	fcall	_WaitResponse
  7650                           
  7651                           ;main.c: 210: WiFly_SendString(message);
  7652  0219  086C               	movf	send_message@message,w
  7653  021A  00F5               	movwf	WiFly_SendString@sendString
  7654  021B  3000               	movlw	0
  7655  021C  01F6               	clrf	WiFly_SendString@sendString+1
  7656  021D  2E38               	ljmp	l3391
  7657  021E                     __end_of_send_message:	
  7658  021E                     __ptext43:	
  7659 ;; *************** function _TMR4_StopTimer *****************
  7660 ;; Defined at:
  7661 ;;		line 127 in file "mcc_generated_files/tmr4.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;		None
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;		None
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  1    wreg      void 
  7668 ;; Registers used:
  7669 ;;		status,2, status,0, pclath, cstack
  7670 ;; Tracked objects:
  7671 ;;		On entry : 1A/5
  7672 ;;		On exit  : 1F/5
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7679 ;;Total ram usage:        0 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    6
  7682 ;; This function calls:
  7683 ;;		_TMR4_Stop
  7684 ;; This function is called by:
  7685 ;;		_goto_mode
  7686 ;;		_Knock
  7687 ;;		_main
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           
  7692                           ;psect for function _TMR4_StopTimer
  7693  021E                     _TMR4_StopTimer:	
  7694                           
  7695                           ;tmr4.c: 129: TMR4_Stop();
  7696                           
  7697                           ;incstack = 0
  7698                           ; Regs used in _TMR4_StopTimer: [status,2+status,0+pclath+cstack]
  7699  021E  2F01               	ljmp	l3679
  7700  021F                     __end_of_TMR4_StopTimer:	
  7701  021F                     __ptext53:	
  7702 ;; *************** function _WaitResponse *****************
  7703 ;; Defined at:
  7704 ;;		line 168 in file "main.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;  chkString       2    6[COMMON] PTR const unsigned char 
  7707 ;;		 -> STR_24(8), STR_21(7), 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  i               2    2[BANK0 ] unsigned int 
  7710 ;;  length          2    0[BANK0 ] unsigned int 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 10/1
  7717 ;;		On exit  : 1F/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7720 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;Total ram usage:        7 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    7
  7727 ;; This function calls:
  7728 ;;		_WiFly_ReadChar
  7729 ;;		_strlen
  7730 ;; This function is called by:
  7731 ;;		_get_response
  7732 ;;		_send_message
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           
  7737                           ;psect for function _WaitResponse
  7738  021F                     _WaitResponse:	
  7739                           
  7740                           ;main.c: 169: size_t length = strlen(chkString);
  7741                           
  7742                           ;incstack = 0
  7743                           ; Regs used in _WaitResponse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7744  021F  0877               	movf	WaitResponse@chkString+1,w
  7745  0220  00F2               	movwf	strlen@s+1
  7746  0221  0876               	movf	WaitResponse@chkString,w
  7747  0222  00F1               	movwf	strlen@s
  7748  0223  22D3  3180         	fcall	_strlen
  7749  0225  0872               	movf	?_strlen+1,w
  7750  0226  0020               	movlb	0	; select bank0
  7751  0227  00A1               	movwf	WaitResponse@length+1
  7752  0228  0871               	movf	?_strlen,w
  7753  0229  00A0               	movwf	WaitResponse@length
  7754  022A                     l3803:	
  7755                           
  7756                           ;main.c: 170: size_t i = 0;
  7757  022A  0020               	movlb	0	; select bank0
  7758  022B  01A2               	clrf	WaitResponse@i
  7759  022C  01A3               	clrf	WaitResponse@i+1
  7760  022D                     l3811:	
  7761                           ;main.c: 175: } else {
  7762                           
  7763                           ;main.c: 172: while (i < length) {
  7764                           
  7765  022D  0821               	movf	WaitResponse@length+1,w
  7766  022E  0223               	subwf	WaitResponse@i+1,w
  7767  022F  1D03               	skipz
  7768  0230  2A33               	goto	u3185
  7769  0231  0820               	movf	WaitResponse@length,w
  7770  0232  0222               	subwf	WaitResponse@i,w
  7771  0233                     u3185:	
  7772  0233  1803               	btfsc	3,0
  7773  0234  0008               	return
  7774                           
  7775                           ;main.c: 173: if (WiFly_ReadChar() == chkString[i]) {
  7776  0235  0876               	movf	WaitResponse@chkString,w
  7777  0236  0722               	addwf	WaitResponse@i,w
  7778  0237  0084               	movwf	4
  7779  0238  0877               	movf	WaitResponse@chkString+1,w
  7780  0239  3D23               	addwfc	WaitResponse@i+1,w
  7781  023A  0085               	movwf	5
  7782  023B  0800               	movf	0,w	;code access
  7783  023C  00F8               	movwf	??_WaitResponse
  7784  023D  21EF  3180         	fcall	_WiFly_ReadChar
  7785  023F  0678               	xorwf	??_WaitResponse,w
  7786  0240  1D03               	skipz
  7787  0241  2A2A               	goto	l3803
  7788                           
  7789                           ;main.c: 174: i++;
  7790  0242  0020               	movlb	0	; select bank0
  7791  0243  0AA2               	incf	WaitResponse@i,f
  7792  0244  1903               	skipnz
  7793  0245  0AA3               	incf	WaitResponse@i+1,f
  7794  0246  2A2D               	goto	l3811
  7795  0247                     __end_of_WaitResponse:	
  7796  0247                     __ptext49:	
  7797 ;; *************** function _TMR2_StartTimer *****************
  7798 ;; Defined at:
  7799 ;;		line 116 in file "mcc_generated_files/tmr2.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;		None
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;		None
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  1    wreg      void 
  7806 ;; Registers used:
  7807 ;;		status,2, status,0, pclath, cstack
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/1
  7810 ;;		On exit  : 1F/5
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;Total ram usage:        0 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; Hardware stack levels required when called:    6
  7820 ;; This function calls:
  7821 ;;		_TMR2_Start
  7822 ;; This function is called by:
  7823 ;;		_goto_mode
  7824 ;;		_main
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           
  7829                           ;psect for function _TMR2_StartTimer
  7830  0247                     _TMR2_StartTimer:	
  7831                           
  7832                           ;tmr2.c: 118: TMR2_Start();
  7833                           
  7834                           ;incstack = 0
  7835                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  7836  0247  2EFB               	ljmp	l3673
  7837  0248                     __end_of_TMR2_StartTimer:	
  7838  0248                     __ptext56:	
  7839 ;; *************** function _EUSART_is_rx_ready *****************
  7840 ;; Defined at:
  7841 ;;		line 120 in file "mcc_generated_files/eusart.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;		None
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;		None
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  1    wreg      unsigned char 
  7848 ;; Registers used:
  7849 ;;		wreg
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 1F/1
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;Total ram usage:        0 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    5
  7862 ;; This function calls:
  7863 ;;		Nothing
  7864 ;; This function is called by:
  7865 ;;		_Clear_RX_Buffer
  7866 ;;		_WiFly_ReadChar
  7867 ;;		_WiFly_CheckRecv
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           
  7872                           ;psect for function _EUSART_is_rx_ready
  7873  0248                     _EUSART_is_rx_ready:	
  7874                           
  7875                           ;eusart.c: 122: return eusartRxCount;
  7876                           
  7877                           ;incstack = 0
  7878                           ; Regs used in _EUSART_is_rx_ready: [wreg]
  7879  0248  0021               	movlb	1	; select bank1
  7880  0249  0851               	movf	_eusartRxCount^(0+128),w	;volatile
  7881  024A  0008               	return
  7882  024B                     __end_of_EUSART_is_rx_ready:	
  7883  024B                     __ptext51:	
  7884 ;; *************** function _SetIndication *****************
  7885 ;; Defined at:
  7886 ;;		line 80 in file "main.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  set             1    wreg     unsigned char 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  set             1    1[COMMON] unsigned char 
  7891 ;; Return value:  Size  Location     Type
  7892 ;;                  1    wreg      void 
  7893 ;; Registers used:
  7894 ;;		wreg
  7895 ;; Tracked objects:
  7896 ;;		On entry : 1F/5
  7897 ;;		On exit  : 1F/1
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;Total ram usage:        1 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; Hardware stack levels required when called:    5
  7907 ;; This function calls:
  7908 ;;		Nothing
  7909 ;; This function is called by:
  7910 ;;		_goto_mode
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           
  7915                           ;psect for function _SetIndication
  7916  024B                     _SetIndication:	
  7917                           
  7918                           ;incstack = 0
  7919                           ; Regs used in _SetIndication: [wreg]
  7920                           ;SetIndication@set stored from wreg
  7921  024B  00F1               	movwf	SetIndication@set
  7922                           
  7923                           ;main.c: 81: indStatus = set;
  7924  024C  0021               	movlb	1	; select bank1
  7925  024D  00CE               	movwf	_indStatus^(0+128)
  7926  024E  0008               	return
  7927  024F                     __end_of_SetIndication:	
  7928  024F                     __ptext45:	
  7929 ;; *************** function _TMR4_StartTimer *****************
  7930 ;; Defined at:
  7931 ;;		line 116 in file "mcc_generated_files/tmr4.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;		None
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;		None
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  1    wreg      void 
  7938 ;; Registers used:
  7939 ;;		status,2, status,0, pclath, cstack
  7940 ;; Tracked objects:
  7941 ;;		On entry : 1E/0
  7942 ;;		On exit  : 1F/5
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;Total ram usage:        0 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    6
  7952 ;; This function calls:
  7953 ;;		_TMR4_Start
  7954 ;; This function is called by:
  7955 ;;		_goto_mode
  7956 ;;		_Validate
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           
  7961                           ;psect for function _TMR4_StartTimer
  7962  024F                     _TMR4_StartTimer:	
  7963                           
  7964                           ;tmr4.c: 118: TMR4_Start();
  7965                           
  7966                           ;incstack = 0
  7967                           ; Regs used in _TMR4_StartTimer: [status,2+status,0+pclath+cstack]
  7968  024F  2BAC               	ljmp	l3677
  7969  0250                     __end_of_TMR4_StartTimer:	
  7970  0250                     __ptext40:	
  7971 ;; *************** function _Clear_RX_Buffer *****************
  7972 ;; Defined at:
  7973 ;;		line 55 in file "mcc_generated_files/WiFly.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;		None
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;		None
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  1    wreg      void 
  7980 ;; Registers used:
  7981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 10/1
  7984 ;;		On exit  : 1F/1
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;Total ram usage:        0 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    6
  7994 ;; This function calls:
  7995 ;;		_EUSART_Read
  7996 ;;		_EUSART_is_rx_ready
  7997 ;; This function is called by:
  7998 ;;		_WiFly_SendString
  7999 ;;		_WiFly_EnterCMDMode
  8000 ;;		_WiFly_SendCMD_SingleArg
  8001 ;;		_WiFly_SendCMD_DoubleArg
  8002 ;;		_send_message
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           
  8007                           ;psect for function _Clear_RX_Buffer
  8008  0250                     _Clear_RX_Buffer:	
  8009  0250                     l3367:	
  8010                           ;WiFly.c: 56: while (EUSART_is_rx_ready()) {
  8011                           
  8012                           ;incstack = 0
  8013                           ; Regs used in _Clear_RX_Buffer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8014                           
  8015  0250  2248  3180         	fcall	_EUSART_is_rx_ready
  8016  0252  3A00               	xorlw	0
  8017  0253  1903               	btfsc	3,2
  8018  0254  0008               	return
  8019                           
  8020                           ;WiFly.c: 57: uart[WiFly].Read();
  8021  0255  27AE               	fcall	PL22	;call to abstracted procedure
  8022  0256  008A               	movwf	10
  8023  0257  3F00               	moviw [0]fsr0
  8024  0258  000A               	callw
  8025  0259  3180               	pagesel	$
  8026  025A  2A50               	goto	l3367
  8027  025B                     __end_of_Clear_RX_Buffer:	
  8028  025B                     __ptext36:	
  8029 ;; *************** function _CheckResponse *****************
  8030 ;; Defined at:
  8031 ;;		line 121 in file "main.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;  chkString1      2    6[COMMON] PTR const unsigned char 
  8034 ;;		 -> openStr(5), 
  8035 ;;  chkString2      1    8[COMMON] PTR const unsigned char 
  8036 ;;		 -> failedStr(7), 
  8037 ;;  chkString3      1    9[COMMON] PTR const unsigned char 
  8038 ;;		 -> errStr(4), 
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;  input           1    8[BANK0 ] unsigned char 
  8041 ;;  i2              2   11[BANK0 ] unsigned int 
  8042 ;;  i1              2    9[BANK0 ] unsigned int 
  8043 ;;  i3              2    6[BANK0 ] unsigned int 
  8044 ;;  length2         2    4[BANK0 ] unsigned int 
  8045 ;;  length1         2    2[BANK0 ] unsigned int 
  8046 ;;  length3         2    0[BANK0 ] unsigned int 
  8047 ;; Return value:  Size  Location     Type
  8048 ;;                  1    wreg      unsigned char 
  8049 ;; Registers used:
  8050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8051 ;; Tracked objects:
  8052 ;;		On entry : 10/0
  8053 ;;		On exit  : 1F/0
  8054 ;;		Unchanged: 0/0
  8055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8056 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8059 ;;      Totals:         5      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8060 ;;Total ram usage:       18 bytes
  8061 ;; Hardware stack levels used:    1
  8062 ;; Hardware stack levels required when called:    7
  8063 ;; This function calls:
  8064 ;;		_WiFly_ReadChar
  8065 ;;		_strlen
  8066 ;; This function is called by:
  8067 ;;		_connect_socket
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           
  8072                           ;psect for function _CheckResponse
  8073  025B                     _CheckResponse:	
  8074                           
  8075                           ;main.c: 122: size_t length1 = strlen(chkString1);
  8076                           
  8077                           ;incstack = 0
  8078                           ; Regs used in _CheckResponse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8079  025B  0877               	movf	CheckResponse@chkString1+1,w
  8080  025C  00F2               	movwf	strlen@s+1
  8081  025D  0876               	movf	CheckResponse@chkString1,w
  8082  025E  00F1               	movwf	strlen@s
  8083  025F  22D3  3180         	fcall	_strlen
  8084  0261  0872               	movf	?_strlen+1,w
  8085  0262  0020               	movlb	0	; select bank0
  8086  0263  00A3               	movwf	CheckResponse@length1+1
  8087  0264  0871               	movf	?_strlen,w
  8088  0265  00A2               	movwf	CheckResponse@length1
  8089                           
  8090                           ;main.c: 123: size_t i1 = 0;
  8091  0266  01A9               	clrf	CheckResponse@i1
  8092  0267  01AA               	clrf	CheckResponse@i1+1
  8093                           
  8094                           ;main.c: 124: size_t length2 = strlen(chkString2);
  8095  0268  0878               	movf	CheckResponse@chkString2,w
  8096  0269  00F1               	movwf	strlen@s
  8097  026A  01F2               	clrf	strlen@s+1
  8098  026B  22D3  3180         	fcall	_strlen
  8099  026D  0872               	movf	?_strlen+1,w
  8100  026E  0020               	movlb	0	; select bank0
  8101  026F  00A5               	movwf	CheckResponse@length2+1
  8102  0270  0871               	movf	?_strlen,w
  8103  0271  00A4               	movwf	CheckResponse@length2
  8104                           
  8105                           ;main.c: 125: size_t i2 = 0;
  8106  0272  01AB               	clrf	CheckResponse@i2
  8107  0273  01AC               	clrf	CheckResponse@i2+1
  8108                           
  8109                           ;main.c: 126: size_t length3 = strlen(chkString3);
  8110  0274  0879               	movf	CheckResponse@chkString3,w
  8111  0275  00F1               	movwf	strlen@s
  8112  0276  01F2               	clrf	strlen@s+1
  8113  0277  22D3  3180         	fcall	_strlen
  8114  0279  0872               	movf	?_strlen+1,w
  8115  027A  0020               	movlb	0	; select bank0
  8116  027B  00A1               	movwf	CheckResponse@length3+1
  8117  027C  0871               	movf	?_strlen,w
  8118  027D  00A0               	movwf	CheckResponse@length3
  8119  027E                     l3709:	
  8120                           
  8121                           ;main.c: 127: size_t i3 = 0;
  8122  027E  01A6               	clrf	CheckResponse@i3
  8123  027F  01A7               	clrf	CheckResponse@i3+1
  8124                           
  8125                           ;main.c: 129: while (i1 < length1 && i2 < length2 && i3 < length3) {
  8126  0280  2AAA               	goto	l3731
  8127  0281                     l3711:	
  8128                           
  8129                           ;main.c: 130: char input = WiFly_ReadChar();
  8130  0281  21EF  3180         	fcall	_WiFly_ReadChar
  8131  0283  0020               	movlb	0	; select bank0
  8132  0284  00A8               	movwf	CheckResponse@input
  8133                           
  8134                           ;main.c: 131: if (input == chkString1[i1]) {
  8135  0285  0876               	movf	CheckResponse@chkString1,w
  8136  0286  0729               	addwf	CheckResponse@i1,w
  8137  0287  0084               	movwf	4
  8138  0288  0877               	movf	CheckResponse@chkString1+1,w
  8139  0289  3D2A               	addwfc	CheckResponse@i1+1,w
  8140  028A  0085               	movwf	5
  8141  028B  0800               	movf	0,w	;code access
  8142  028C  0628               	xorwf	CheckResponse@input,w
  8143  028D  1D03               	skipz
  8144  028E  2A93               	goto	l3717
  8145                           
  8146                           ;main.c: 132: i1++;
  8147  028F  0AA9               	incf	CheckResponse@i1,f
  8148  0290  1903               	skipnz
  8149  0291  0AAA               	incf	CheckResponse@i1+1,f
  8150                           
  8151                           ;main.c: 133: } else {
  8152  0292  2A95               	goto	l3719
  8153  0293                     l3717:	
  8154                           
  8155                           ;main.c: 134: i1 = 0;
  8156  0293  01A9               	clrf	CheckResponse@i1
  8157  0294  01AA               	clrf	CheckResponse@i1+1
  8158  0295                     l3719:	
  8159                           
  8160                           ;main.c: 135: }
  8161                           ;main.c: 137: if (input == chkString2[i2]) {
  8162  0295  082B               	movf	CheckResponse@i2,w
  8163  0296  0778               	addwf	CheckResponse@chkString2,w
  8164  0297  27B4  3180         	fcall	PL24	;call to abstracted procedure
  8165  0299  1D03               	skipz
  8166  029A  2A9F               	goto	l3723
  8167                           
  8168                           ;main.c: 138: i2++;
  8169  029B  0AAB               	incf	CheckResponse@i2,f
  8170  029C  1903               	skipnz
  8171  029D  0AAC               	incf	CheckResponse@i2+1,f
  8172                           
  8173                           ;main.c: 139: } else {
  8174  029E  2AA1               	goto	l3725
  8175  029F                     l3723:	
  8176                           
  8177                           ;main.c: 140: i2 = 0;
  8178  029F  01AB               	clrf	CheckResponse@i2
  8179  02A0  01AC               	clrf	CheckResponse@i2+1
  8180  02A1                     l3725:	
  8181                           
  8182                           ;main.c: 141: }
  8183                           ;main.c: 143: if (input == chkString3[i3]) {
  8184  02A1  0826               	movf	CheckResponse@i3,w
  8185  02A2  0779               	addwf	CheckResponse@chkString3,w
  8186  02A3  27B4  3180         	fcall	PL24	;call to abstracted procedure
  8187  02A5  1D03               	skipz
  8188  02A6  2A7E               	goto	l3709
  8189                           
  8190                           ;main.c: 144: i3++;
  8191  02A7  0AA6               	incf	CheckResponse@i3,f
  8192  02A8  1903               	skipnz
  8193  02A9  0AA7               	incf	CheckResponse@i3+1,f
  8194  02AA                     l3731:	
  8195                           ;main.c: 145: } else {
  8196                           
  8197  02AA  0823               	movf	CheckResponse@length1+1,w
  8198  02AB  022A               	subwf	CheckResponse@i1+1,w
  8199  02AC  1D03               	skipz
  8200  02AD  2AB0               	goto	u3115
  8201  02AE  0822               	movf	CheckResponse@length1,w
  8202  02AF  0229               	subwf	CheckResponse@i1,w
  8203  02B0                     u3115:	
  8204  02B0  1803               	skipnc
  8205  02B1  2AC2               	goto	l3737
  8206  02B2  0825               	movf	CheckResponse@length2+1,w
  8207  02B3  022C               	subwf	CheckResponse@i2+1,w
  8208  02B4  1D03               	skipz
  8209  02B5  2AB8               	goto	u3125
  8210  02B6  0824               	movf	CheckResponse@length2,w
  8211  02B7  022B               	subwf	CheckResponse@i2,w
  8212  02B8                     u3125:	
  8213  02B8  1803               	skipnc
  8214  02B9  2AC2               	goto	l3737
  8215  02BA  0821               	movf	CheckResponse@length3+1,w
  8216  02BB  0227               	subwf	CheckResponse@i3+1,w
  8217  02BC  1D03               	skipz
  8218  02BD  2AC0               	goto	u3135
  8219  02BE  0820               	movf	CheckResponse@length3,w
  8220  02BF  0226               	subwf	CheckResponse@i3,w
  8221  02C0                     u3135:	
  8222  02C0  1C03               	skipc
  8223  02C1  2A81               	goto	l3711
  8224  02C2                     l3737:	
  8225                           
  8226                           ;main.c: 147: }
  8227                           ;main.c: 148: }
  8228                           ;main.c: 150: if (i1 == length1) {
  8229  02C2  0823               	movf	CheckResponse@length1+1,w
  8230  02C3  062A               	xorwf	CheckResponse@i1+1,w
  8231  02C4  1D03               	skipz
  8232  02C5  2AC8               	goto	u3145
  8233  02C6  0822               	movf	CheckResponse@length1,w
  8234  02C7  0629               	xorwf	CheckResponse@i1,w
  8235  02C8                     u3145:	
  8236  02C8  1903               	btfsc	3,2
  8237                           
  8238                           ;main.c: 151: return 1;
  8239  02C9  3401               	retlw	1
  8240  02CA  0825               	movf	CheckResponse@length2+1,w
  8241  02CB  062C               	xorwf	CheckResponse@i2+1,w
  8242  02CC  1D03               	skipz
  8243  02CD  2AD0               	goto	u3155
  8244  02CE  0824               	movf	CheckResponse@length2,w
  8245  02CF  062B               	xorwf	CheckResponse@i2,w
  8246  02D0                     u3155:	
  8247  02D0  1903               	btfsc	3,2
  8248                           
  8249                           ;main.c: 153: return 2;
  8250  02D1  3402               	retlw	2
  8251                           
  8252                           ;main.c: 155: return 3;
  8253  02D2  3403               	retlw	3
  8254  02D3                     __end_of_CheckResponse:	
  8255  02D3                     __ptext54:	
  8256 ;; *************** function _strlen *****************
  8257 ;; Defined at:
  8258 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\strlen.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;  s               2    1[COMMON] PTR const unsigned char 
  8261 ;;		 -> STR_24(8), STR_21(7), errStr(4), failedStr(7), 
  8262 ;;		 -> STR_18(5), STR_16(7), STR_14(8), openStr(5), 
  8263 ;;		 -> STR_12(6), hardRebootStr(6), softRebootStr(7), aokStr(4), 
  8264 ;;		 -> endStr(5), cmdStr(4), 
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;  cp              2    4[COMMON] PTR const unsigned char 
  8267 ;;		 -> STR_24(8), STR_21(7), errStr(4), failedStr(7), 
  8268 ;;		 -> STR_18(5), STR_16(7), STR_14(8), openStr(5), 
  8269 ;;		 -> STR_12(6), hardRebootStr(6), softRebootStr(7), aokStr(4), 
  8270 ;;		 -> endStr(5), cmdStr(4), 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  2    1[COMMON] unsigned int 
  8273 ;; Registers used:
  8274 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8275 ;; Tracked objects:
  8276 ;;		On entry : 10/1
  8277 ;;		On exit  : 10/0
  8278 ;;		Unchanged: 10/0
  8279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;Total ram usage:        5 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    5
  8287 ;; This function calls:
  8288 ;;		Nothing
  8289 ;; This function is called by:
  8290 ;;		_WiFly_CheckRecv
  8291 ;;		_CheckResponse
  8292 ;;		_WaitResponse
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _strlen
  8298  02D3                     _strlen:	
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  8302  02D3  0872               	movf	strlen@s+1,w
  8303  02D4  00F5               	movwf	strlen@cp+1
  8304  02D5  0871               	movf	strlen@s,w
  8305  02D6  00F4               	movwf	strlen@cp
  8306  02D7                     l3335:	
  8307  02D7  0874               	movf	strlen@cp,w
  8308  02D8  0084               	movwf	4
  8309  02D9  0875               	movf	strlen@cp+1,w
  8310  02DA  0085               	movwf	5
  8311  02DB  0012               	moviw fsr0++
  8312  02DC  1903               	btfsc	3,2
  8313  02DD  2AE2               	goto	l3337
  8314  02DE  0AF4               	incf	strlen@cp,f
  8315  02DF  1903               	skipnz
  8316  02E0  0AF5               	incf	strlen@cp+1,f
  8317  02E1  2AD7               	goto	l3335
  8318  02E2                     l3337:	
  8319  02E2  0871               	movf	strlen@s,w
  8320  02E3  0274               	subwf	strlen@cp,w
  8321  02E4  00F1               	movwf	?_strlen
  8322  02E5  0872               	movf	strlen@s+1,w
  8323  02E6  3B75               	subwfb	strlen@cp+1,w
  8324  02E7  00F2               	movwf	?_strlen+1
  8325  02E8  0008               	return
  8326  02E9                     __end_of_strlen:	
  8327  02E9                     __ptext25:	
  8328 ;; *************** function _connect_socket *****************
  8329 ;; Defined at:
  8330 ;;		line 160 in file "main.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;  addr            2   72[BANK0 ] PTR const unsigned char 
  8333 ;;		 -> STR_22(12), 
  8334 ;;  port            2   74[BANK0 ] PTR const unsigned char 
  8335 ;;		 -> STR_23(5), 
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  1    wreg      void 
  8340 ;; Registers used:
  8341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 1F/0
  8344 ;;		On exit  : 1F/1
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8347 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;Total ram usage:        4 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:   10
  8354 ;; This function calls:
  8355 ;;		_CheckResponse
  8356 ;;		_WiFly_SendCMD_DoubleArg
  8357 ;; This function is called by:
  8358 ;;		_send_message
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _connect_socket
  8364  02E9                     _connect_socket:	
  8365  02E9                     l533:	
  8366                           ;incstack = 0
  8367                           ; Regs used in _connect_socket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8368                           ;main.c: 161: do {
  8369                           
  8370                           
  8371                           ;main.c: 162: WiFly_SendCMD_DoubleArg("open %s %s\r\n", addr, port);
  8372  02E9  30C9               	movlw	low (STR_13| (0+32768))
  8373  02EA  00BA               	movwf	WiFly_SendCMD_DoubleArg@cmdFormat
  8374  02EB  3090               	movlw	high (STR_13| (0+32768))
  8375  02EC  00BB               	movwf	WiFly_SendCMD_DoubleArg@cmdFormat+1
  8376  02ED  0869               	movf	connect_socket@addr+1,w
  8377  02EE  00BD               	movwf	WiFly_SendCMD_DoubleArg@arg1+1
  8378  02EF  0868               	movf	connect_socket@addr,w
  8379  02F0  00BC               	movwf	WiFly_SendCMD_DoubleArg@arg1
  8380  02F1  086B               	movf	connect_socket@port+1,w
  8381  02F2  00BF               	movwf	WiFly_SendCMD_DoubleArg@arg2+1
  8382  02F3  086A               	movf	connect_socket@port,w
  8383  02F4  00BE               	movwf	WiFly_SendCMD_DoubleArg@arg2
  8384  02F5  2307  3180         	fcall	_WiFly_SendCMD_DoubleArg
  8385                           
  8386                           ;main.c: 163: } while (CheckResponse(openStr, failedStr, errStr) != 1);
  8387  02F7  3063               	movlw	low (_openStr| (0+32768))
  8388  02F8  00F6               	movwf	CheckResponse@chkString1
  8389  02F9  3091               	movlw	high (_openStr| (0+32768))
  8390  02FA  00F7               	movwf	CheckResponse@chkString1+1
  8391  02FB  30B3               	movlw	(low (_failedStr| 0))& (0+255)
  8392  02FC  00F8               	movwf	CheckResponse@chkString2
  8393  02FD  30BA               	movlw	(low (_errStr| 0))& (0+255)
  8394  02FE  00F9               	movwf	CheckResponse@chkString3
  8395  02FF  225B  3180         	fcall	_CheckResponse
  8396  0301  3A01               	xorlw	1
  8397  0302  1D03               	skipz
  8398  0303  2AE9               	goto	l533
  8399                           
  8400                           ;main.c: 165: inCMD = 0;
  8401  0304  0021               	movlb	1	; select bank1
  8402  0305  01EB               	clrf	_inCMD^(0+128)
  8403  0306  0008               	return
  8404  0307                     __end_of_connect_socket:	
  8405  0307                     __ptext26:	
  8406 ;; *************** function _WiFly_SendCMD_DoubleArg *****************
  8407 ;; Defined at:
  8408 ;;		line 124 in file "mcc_generated_files/WiFly.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  cmdFormat       2   26[BANK0 ] PTR const unsigned char 
  8411 ;;		 -> STR_20(13), STR_13(13), 
  8412 ;;  arg1            2   28[BANK0 ] PTR const unsigned char 
  8413 ;;		 -> STR_22(12), 
  8414 ;;  arg2            2   30[BANK0 ] PTR const unsigned char 
  8415 ;;		 -> STR_23(5), 
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;  txBuffer       40   32[BANK0 ] unsigned char [40]
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  1    wreg      void 
  8420 ;; Registers used:
  8421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8422 ;; Tracked objects:
  8423 ;;		On entry : 1F/0
  8424 ;;		On exit  : 10/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8427 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;Total ram usage:       46 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    9
  8434 ;; This function calls:
  8435 ;;		_Clear_RX_Buffer
  8436 ;;		_WiFly_CheckInCMD
  8437 ;;		_WiFly_Send
  8438 ;;		_sprintf
  8439 ;; This function is called by:
  8440 ;;		_connect_socket
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           
  8445                           ;psect for function _WiFly_SendCMD_DoubleArg
  8446  0307                     _WiFly_SendCMD_DoubleArg:	
  8447                           
  8448                           ;WiFly.c: 126: WiFly_CheckInCMD();
  8449                           
  8450                           ;incstack = 0
  8451                           ; Regs used in _WiFly_SendCMD_DoubleArg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8452  0307  2320  3180         	fcall	_WiFly_CheckInCMD
  8453                           
  8454                           ;WiFly.c: 127: Clear_RX_Buffer();
  8455  0309  2250  3180         	fcall	_Clear_RX_Buffer
  8456                           
  8457                           ;WiFly.c: 128: char txBuffer[40];
  8458                           ;WiFly.c: 129: sprintf(txBuffer, cmdFormat, arg1, arg2);
  8459  030B  0020               	movlb	0	; select bank0
  8460  030C  083B               	movf	WiFly_SendCMD_DoubleArg@cmdFormat+1,w
  8461  030D  00A2               	movwf	sprintf@f+1
  8462  030E  083A               	movf	WiFly_SendCMD_DoubleArg@cmdFormat,w
  8463  030F  00A1               	movwf	sprintf@f
  8464  0310  083D               	movf	WiFly_SendCMD_DoubleArg@arg1+1,w
  8465  0311  00A4               	movwf	(low ((?_sprintf| 0+2))+1)
  8466  0312  083C               	movf	WiFly_SendCMD_DoubleArg@arg1,w
  8467  0313  00A3               	movwf	low ((?_sprintf| 0+2))
  8468  0314  083F               	movf	WiFly_SendCMD_DoubleArg@arg2+1,w
  8469  0315  00A6               	movwf	(low ((?_sprintf| 0+4))+1)
  8470  0316  083E               	movf	WiFly_SendCMD_DoubleArg@arg2,w
  8471  0317  00A5               	movwf	low ((?_sprintf| 0+4))
  8472  0318  3040               	movlw	(low (WiFly_SendCMD_DoubleArg@txBuffer| 0))& (0+255)
  8473  0319  23DB  3180         	fcall	_sprintf
  8474                           
  8475                           ;WiFly.c: 130: WiFly_Send(txBuffer);
  8476  031B  3040               	movlw	low WiFly_SendCMD_DoubleArg@txBuffer
  8477  031C  00F2               	movwf	WiFly_Send@command
  8478  031D  3000               	movlw	high WiFly_SendCMD_DoubleArg@txBuffer
  8479  031E  00F3               	movwf	WiFly_Send@command+1
  8480  031F  2E77               	ljmp	l2425
  8481  0320                     __end_of_WiFly_SendCMD_DoubleArg:	
  8482  0320                     __ptext33:	
  8483 ;; *************** function _WiFly_CheckInCMD *****************
  8484 ;; Defined at:
  8485 ;;		line 61 in file "mcc_generated_files/WiFly.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;		None
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;		None
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  1    wreg      void 
  8492 ;; Registers used:
  8493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8494 ;; Tracked objects:
  8495 ;;		On entry : 10/0
  8496 ;;		On exit  : 1F/1
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;Total ram usage:        0 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    8
  8506 ;; This function calls:
  8507 ;;		_WiFly_EnterCMDMode
  8508 ;; This function is called by:
  8509 ;;		_WiFly_SendCMD_SingleArg
  8510 ;;		_WiFly_SendCMD_DoubleArg
  8511 ;;		_WiFly_SendCMD
  8512 ;;		_WiFly_RebootCMD
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           
  8517                           ;psect for function _WiFly_CheckInCMD
  8518  0320                     _WiFly_CheckInCMD:	
  8519                           
  8520                           ;WiFly.c: 62: if (!inCMD) {
  8521                           
  8522                           ;incstack = 0
  8523                           ; Regs used in _WiFly_CheckInCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8524  0320  0021               	movlb	1	; select bank1
  8525  0321  086B               	movf	_inCMD^(0+128),w
  8526  0322  1D03               	btfss	3,2
  8527  0323  0008               	return
  8528                           
  8529                           ;WiFly.c: 63: WiFly_EnterCMDMode();
  8530  0324  285D               	ljmp	l3383
  8531  0325                     __end_of_WiFly_CheckInCMD:	
  8532  0325                     __ptext22:	
  8533 ;; *************** function _eeprom_write *****************
  8534 ;; Defined at:
  8535 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic\eewrite.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;  addr            1    wreg     unsigned char 
  8538 ;;  value           1    1[COMMON] unsigned char 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  addr            1    2[COMMON] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2
  8545 ;; Tracked objects:
  8546 ;;		On entry : 1F/1
  8547 ;;		On exit  : 1F/10
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8550 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;Total ram usage:        2 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    5
  8557 ;; This function calls:
  8558 ;;		Nothing
  8559 ;; This function is called by:
  8560 ;;		_Pair
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           
  8565                           ;psect for function _eeprom_write
  8566  0325                     _eeprom_write:	
  8567                           
  8568                           ;incstack = 0
  8569                           ; Regs used in _eeprom_write: [wreg+status,2]
  8570                           ;eeprom_write@addr stored from wreg
  8571  0325  00F2               	movwf	eeprom_write@addr
  8572  0326                     l915:	
  8573  0326  0030               	movlb	16	; select bank16
  8574  0327  189E               	btfsc	30,1	;volsfr
  8575  0328  2B26               	goto	l915
  8576  0329  171E               	bsf	30,6	;volsfr
  8577  032A  0872               	movf	eeprom_write@addr,w
  8578  032B  009A               	movwf	26	;volatile
  8579  032C  3070               	movlw	112
  8580  032D  009B               	movwf	27	;volatile
  8581  032E  019D               	clrf	29	;volatile
  8582  032F  0871               	movf	eeprom_write@value,w
  8583  0330  009C               	movwf	28	;volatile
  8584  0331  1003               	bcf	3,0	;volatile
  8585  0332  1B8B               	btfsc	11,7	;volatile
  8586  0333  1403               	bsf	3,0	;volatile
  8587  0334  138B               	bcf	11,7	;volatile
  8588  0335  151E               	bsf	30,2	;volsfr
  8589  0336  3055               	movlw	85
  8590  0337  009F               	movwf	31	;volsfr
  8591  0338  30AA               	movlw	170
  8592  0339  009F               	movwf	31	;volsfr
  8593  033A  149E               	bsf	30,1	;volsfr
  8594  033B                     l919:	
  8595  033B  189E               	btfsc	30,1	;volsfr
  8596  033C  2B3B               	goto	l919
  8597  033D  111E               	bcf	30,2	;volsfr
  8598  033E  1803               	btfsc	3,0	;volatile
  8599  033F  178B               	bsf	11,7	;volatile
  8600  0340  0008               	return
  8601  0341                     __end_of_eeprom_write:	
  8602  0341                     __ptext15:	
  8603 ;; *************** function _TMR2_SetInterruptHandler *****************
  8604 ;; Defined at:
  8605 ;;		line 180 in file "mcc_generated_files/tmr2.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  8608 ;;		 -> TMR2_DefaultInterruptHandler(1), blink(1), 
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;		None
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      void 
  8613 ;; Registers used:
  8614 ;;		wreg
  8615 ;; Tracked objects:
  8616 ;;		On entry : 1F/E
  8617 ;;		On exit  : 1F/1
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:        2 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    5
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_main
  8631 ;;		_TMR2_Initialize
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           
  8636                           ;psect for function _TMR2_SetInterruptHandler
  8637  0341                     _TMR2_SetInterruptHandler:	
  8638                           
  8639                           ;tmr2.c: 181: TMR2_InterruptHandler = InterruptHandler;
  8640                           
  8641                           ;incstack = 0
  8642                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  8643  0341  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  8644  0342  0021               	movlb	1	; select bank1
  8645  0343  00E4               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
  8646  0344  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  8647  0345  00E3               	movwf	_TMR2_InterruptHandler^(0+128)
  8648  0346  0008               	return
  8649  0347                     __end_of_TMR2_SetInterruptHandler:	
  8650  0347                     __ptext13:	
  8651 ;; *************** function _TMR4_SetInterruptHandler *****************
  8652 ;; Defined at:
  8653 ;;		line 180 in file "mcc_generated_files/tmr4.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  8656 ;;		 -> TMR4_DefaultInterruptHandler(1), setFlag(1), 
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;		None
  8659 ;; Return value:  Size  Location     Type
  8660 ;;                  1    wreg      void 
  8661 ;; Registers used:
  8662 ;;		wreg
  8663 ;; Tracked objects:
  8664 ;;		On entry : 10/1
  8665 ;;		On exit  : 1F/1
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8668 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;Total ram usage:        2 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    5
  8675 ;; This function calls:
  8676 ;;		Nothing
  8677 ;; This function is called by:
  8678 ;;		_main
  8679 ;;		_TMR4_Initialize
  8680 ;; This function uses a non-reentrant model
  8681 ;;
  8682                           
  8683                           
  8684                           ;psect for function _TMR4_SetInterruptHandler
  8685  0347                     _TMR4_SetInterruptHandler:	
  8686                           
  8687                           ;tmr4.c: 181: TMR4_InterruptHandler = InterruptHandler;
  8688                           
  8689                           ;incstack = 0
  8690                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
  8691  0347  0872               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
  8692  0348  0021               	movlb	1	; select bank1
  8693  0349  00E2               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
  8694  034A  0871               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
  8695  034B  00E1               	movwf	_TMR4_InterruptHandler^(0+128)
  8696  034C  0008               	return
  8697  034D                     __end_of_TMR4_SetInterruptHandler:	
  8698  034D                     __ptext10:	
  8699 ;; *************** function _SYSTEM_Initialize *****************
  8700 ;; Defined at:
  8701 ;;		line 83 in file "mcc_generated_files/mcc.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;		None
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;		None
  8706 ;; Return value:  Size  Location     Type
  8707 ;;                  1    wreg      void 
  8708 ;; Registers used:
  8709 ;;		wreg, status,2, status,0, pclath, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : B1F/10
  8712 ;;		On exit  : 1F/E
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;Total ram usage:        0 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    7
  8722 ;; This function calls:
  8723 ;;		_EUSART_Initialize
  8724 ;;		_OSCILLATOR_Initialize
  8725 ;;		_PIN_MANAGER_Initialize
  8726 ;;		_TMR2_Initialize
  8727 ;;		_TMR4_Initialize
  8728 ;;		_WWDT_Initialize
  8729 ;; This function is called by:
  8730 ;;		_main
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           
  8735                           ;psect for function _SYSTEM_Initialize
  8736  034D                     _SYSTEM_Initialize:	
  8737                           
  8738                           ;mcc.c: 86: PIN_MANAGER_Initialize();
  8739                           
  8740                           ;incstack = 0
  8741                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8742  034D  2361  3180         	fcall	_PIN_MANAGER_Initialize
  8743                           
  8744                           ;mcc.c: 87: OSCILLATOR_Initialize();
  8745  034F  2358  3180         	fcall	_OSCILLATOR_Initialize
  8746                           
  8747                           ;mcc.c: 88: WWDT_Initialize();
  8748  0351  23AF  3180         	fcall	_WWDT_Initialize
  8749                           
  8750                           ;mcc.c: 89: TMR4_Initialize();
  8751  0353  2398  3180         	fcall	_TMR4_Initialize
  8752                           
  8753                           ;mcc.c: 90: TMR2_Initialize();
  8754  0355  2731  3180         	fcall	_TMR2_Initialize
  8755                           
  8756                           ;mcc.c: 91: EUSART_Initialize();
  8757  0357  2F04               	ljmp	l3049
  8758  0358                     __end_of_SYSTEM_Initialize:	
  8759  0358                     __ptext17:	
  8760 ;; *************** function _OSCILLATOR_Initialize *****************
  8761 ;; Defined at:
  8762 ;;		line 94 in file "mcc_generated_files/mcc.c"
  8763 ;; Parameters:    Size  Location     Type
  8764 ;;		None
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;		None
  8767 ;; Return value:  Size  Location     Type
  8768 ;;                  1    wreg      void 
  8769 ;; Registers used:
  8770 ;;		wreg, status,2
  8771 ;; Tracked objects:
  8772 ;;		On entry : 0/10
  8773 ;;		On exit  : 1F/11
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;Total ram usage:        0 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:    5
  8783 ;; This function calls:
  8784 ;;		Nothing
  8785 ;; This function is called by:
  8786 ;;		_SYSTEM_Initialize
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           
  8791                           ;psect for function _OSCILLATOR_Initialize
  8792  0358                     _OSCILLATOR_Initialize:	
  8793                           
  8794                           ;mcc.c: 97: OSCCON1 = 0x60;
  8795                           
  8796                           ;incstack = 0
  8797                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8798  0358  3060               	movlw	96
  8799  0359  0031               	movlb	17	; select bank17
  8800  035A  008D               	movwf	13	;volatile
  8801                           
  8802                           ;mcc.c: 99: OSCCON3 = 0x00;
  8803  035B  018F               	clrf	15	;volatile
  8804                           
  8805                           ;mcc.c: 101: OSCEN = 0x00;
  8806  035C  0191               	clrf	17	;volatile
  8807                           
  8808                           ;mcc.c: 103: OSCFRQ = 0x05;
  8809  035D  3005               	movlw	5
  8810  035E  0093               	movwf	19	;volatile
  8811                           
  8812                           ;mcc.c: 105: OSCTUNE = 0x00;
  8813  035F  0192               	clrf	18	;volatile
  8814  0360  0008               	return
  8815  0361                     __end_of_OSCILLATOR_Initialize:	
  8816  0361                     __ptext16:	
  8817 ;; *************** function _PIN_MANAGER_Initialize *****************
  8818 ;; Defined at:
  8819 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;		None
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;  state           1    1[COMMON] unsigned char 
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  1    wreg      void 
  8826 ;; Registers used:
  8827 ;;		wreg, status,2, status,0
  8828 ;; Tracked objects:
  8829 ;;		On entry : B1F/10
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8834 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;Total ram usage:        1 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    5
  8840 ;; This function calls:
  8841 ;;		Nothing
  8842 ;; This function is called by:
  8843 ;;		_SYSTEM_Initialize
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           
  8848                           ;psect for function _PIN_MANAGER_Initialize
  8849  0361                     _PIN_MANAGER_Initialize:	
  8850                           
  8851                           ;pin_manager.c: 57: LATA = 0x00;
  8852                           
  8853                           ;incstack = 0
  8854                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  8855  0361  0020               	movlb	0	; select bank0
  8856  0362  0196               	clrf	22	;volatile
  8857                           
  8858                           ;pin_manager.c: 58: LATB = 0x00;
  8859  0363  0197               	clrf	23	;volatile
  8860                           
  8861                           ;pin_manager.c: 59: LATC = 0x00;
  8862  0364  0198               	clrf	24	;volatile
  8863                           
  8864                           ;pin_manager.c: 64: TRISA = 0xF0;
  8865  0365  30F0               	movlw	240
  8866  0366  0091               	movwf	17	;volatile
  8867                           
  8868                           ;pin_manager.c: 65: TRISB = 0xF9;
  8869  0367  30F9               	movlw	249
  8870  0368  0092               	movwf	18	;volatile
  8871                           
  8872                           ;pin_manager.c: 66: TRISC = 0xDF;
  8873  0369  30DF               	movlw	223
  8874  036A  0093               	movwf	19	;volatile
  8875                           
  8876                           ;pin_manager.c: 71: ANSELC = 0xBB;
  8877  036B  30BB               	movlw	187
  8878  036C  003E               	movlb	30	; select bank30
  8879  036D  00CE               	movwf	78	;volatile
  8880                           
  8881                           ;pin_manager.c: 72: ANSELB = 0xF9;
  8882  036E  30F9               	movlw	249
  8883  036F  00C3               	movwf	67	;volatile
  8884                           
  8885                           ;pin_manager.c: 73: ANSELA = 0xDF;
  8886  0370  30DF               	movlw	223
  8887  0371  00B8               	movwf	56	;volatile
  8888                           
  8889                           ;pin_manager.c: 78: WPUE = 0x00;
  8890  0372  01E5               	clrf	101	;volatile
  8891                           
  8892                           ;pin_manager.c: 79: WPUB = 0x00;
  8893  0373  01C4               	clrf	68	;volatile
  8894                           
  8895                           ;pin_manager.c: 80: WPUA = 0x00;
  8896  0374  01B9               	clrf	57	;volatile
  8897                           
  8898                           ;pin_manager.c: 81: WPUC = 0x04;
  8899  0375  3004               	movlw	4
  8900  0376  00CF               	movwf	79	;volatile
  8901                           
  8902                           ;pin_manager.c: 86: ODCONA = 0x00;
  8903  0377  01BA               	clrf	58	;volatile
  8904                           
  8905                           ;pin_manager.c: 87: ODCONB = 0x00;
  8906  0378  01C5               	clrf	69	;volatile
  8907                           
  8908                           ;pin_manager.c: 88: ODCONC = 0x00;
  8909  0379  01D0               	clrf	80	;volatile
  8910                           
  8911                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
  8912  037A  3000               	movlw	0
  8913  037B  1B8B               	btfsc	11,7	;volatile
  8914  037C  3001               	movlw	1
  8915  037D  00F1               	movwf	PIN_MANAGER_Initialize@state
  8916                           
  8917                           ;pin_manager.c: 96: GIE = 0;
  8918  037E  138B               	bcf	11,7	;volatile
  8919                           
  8920                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  8921  037F  3055               	movlw	85
  8922  0380  003D               	movlb	29	; select bank29
  8923  0381  008F               	movwf	15	;volatile
  8924                           
  8925                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  8926  0382  30AA               	movlw	170
  8927  0383  008F               	movwf	15	;volatile
  8928                           
  8929                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
  8930  0384  100F               	bcf	15,0	;volatile
  8931                           
  8932                           ;pin_manager.c: 101: RC5PPS = 0x10;
  8933  0385  3010               	movlw	16
  8934  0386  003E               	movlb	30	; select bank30
  8935  0387  00A5               	movwf	37	;volatile
  8936                           
  8937                           ;pin_manager.c: 102: RXPPSbits.RXPPS = 0x16;
  8938  0388  003D               	movlb	29	; select bank29
  8939  0389  084B               	movf	75,w	;volatile
  8940  038A  39E0               	andlw	-32
  8941  038B  3816               	iorlw	22
  8942  038C  00CB               	movwf	75	;volatile
  8943                           
  8944                           ;pin_manager.c: 104: PPSLOCK = 0x55;
  8945  038D  3055               	movlw	85
  8946  038E  008F               	movwf	15	;volatile
  8947                           
  8948                           ;pin_manager.c: 105: PPSLOCK = 0xAA;
  8949  038F  30AA               	movlw	170
  8950  0390  008F               	movwf	15	;volatile
  8951                           
  8952                           ;pin_manager.c: 106: PPSLOCKbits.PPSLOCKED = 0x01;
  8953  0391  140F               	bsf	15,0	;volatile
  8954                           
  8955                           ;pin_manager.c: 108: GIE = state;
  8956  0392  1C71               	btfss	PIN_MANAGER_Initialize@state,0
  8957  0393  2B96               	goto	u2080
  8958  0394  178B               	bsf	11,7	;volatile
  8959  0395  0008               	return
  8960  0396                     u2080:	
  8961  0396  138B               	bcf	11,7	;volatile
  8962  0397  0008               	return
  8963  0398                     __end_of_PIN_MANAGER_Initialize:	
  8964  0398                     __ptext12:	
  8965 ;; *************** function _TMR4_Initialize *****************
  8966 ;; Defined at:
  8967 ;;		line 63 in file "mcc_generated_files/tmr4.c"
  8968 ;; Parameters:    Size  Location     Type
  8969 ;;		None
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;		None
  8972 ;; Return value:  Size  Location     Type
  8973 ;;                  1    wreg      void 
  8974 ;; Registers used:
  8975 ;;		wreg, status,2, status,0, pclath, cstack
  8976 ;; Tracked objects:
  8977 ;;		On entry : 1F/10
  8978 ;;		On exit  : 1F/5
  8979 ;;		Unchanged: 0/0
  8980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;Total ram usage:        0 bytes
  8986 ;; Hardware stack levels used:    1
  8987 ;; Hardware stack levels required when called:    6
  8988 ;; This function calls:
  8989 ;;		_TMR4_SetInterruptHandler
  8990 ;;		_TMR4_Start
  8991 ;; This function is called by:
  8992 ;;		_SYSTEM_Initialize
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           
  8997                           ;psect for function _TMR4_Initialize
  8998  0398                     _TMR4_Initialize:	
  8999                           
  9000                           ;tmr4.c: 68: T4CON = 0x7F;
  9001                           
  9002                           ;incstack = 0
  9003                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9004  0398  307F               	movlw	127
  9005  0399  0025               	movlb	5	; select bank5
  9006  039A  0094               	movwf	20	;volatile
  9007                           
  9008                           ;tmr4.c: 71: T4CLKCON = 0x04;
  9009  039B  3004               	movlw	4
  9010  039C  0096               	movwf	22	;volatile
  9011                           
  9012                           ;tmr4.c: 74: T4HLT = 0x00;
  9013  039D  0195               	clrf	21	;volatile
  9014                           
  9015                           ;tmr4.c: 77: T4RST = 0x00;
  9016  039E  0197               	clrf	23	;volatile
  9017                           
  9018                           ;tmr4.c: 80: T4PR = 0x4B;
  9019  039F  304B               	movlw	75
  9020  03A0  0093               	movwf	19	;volatile
  9021                           
  9022                           ;tmr4.c: 83: T4TMR = 0x00;
  9023  03A1  0192               	clrf	18	;volatile
  9024                           
  9025                           ;tmr4.c: 86: PIR4bits.TMR4IF = 0;
  9026  03A2  002E               	movlb	14	; select bank14
  9027  03A3  1190               	bcf	16,3	;volatile
  9028                           
  9029                           ;tmr4.c: 89: PIE4bits.TMR4IE = 1;
  9030  03A4  159A               	bsf	26,3	;volatile
  9031                           
  9032                           ;tmr4.c: 92: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
  9033  03A5  3003               	movlw	low _TMR4_DefaultInterruptHandler
  9034  03A6  00F1               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  9035  03A7  3000               	movlw	high _TMR4_DefaultInterruptHandler
  9036  03A8  00F2               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  9037  03A9  2347  3180         	fcall	_TMR4_SetInterruptHandler
  9038                           
  9039                           ;tmr4.c: 95: TMR4_Start();
  9040  03AB  2BAC               	ljmp	l3677
  9041  03AC                     __end_of_TMR4_Initialize:	
  9042  03AC                     __ptext46:	
  9043 ;; *************** function _TMR4_Start *****************
  9044 ;; Defined at:
  9045 ;;		line 110 in file "mcc_generated_files/tmr4.c"
  9046 ;; Parameters:    Size  Location     Type
  9047 ;;		None
  9048 ;; Auto vars:     Size  Location     Type
  9049 ;;		None
  9050 ;; Return value:  Size  Location     Type
  9051 ;;                  1    wreg      void 
  9052 ;; Registers used:
  9053 ;;		None
  9054 ;; Tracked objects:
  9055 ;;		On entry : 1E/1
  9056 ;;		On exit  : 1F/5
  9057 ;;		Unchanged: 0/0
  9058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;Total ram usage:        0 bytes
  9064 ;; Hardware stack levels used:    1
  9065 ;; Hardware stack levels required when called:    5
  9066 ;; This function calls:
  9067 ;;		Nothing
  9068 ;; This function is called by:
  9069 ;;		_TMR4_Initialize
  9070 ;;		_TMR4_StartTimer
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function _TMR4_Start
  9076  03AC                     _TMR4_Start:	
  9077  03AC                     l3677:	
  9078                           ;incstack = 0
  9079                           ; Regs used in _TMR4_Start: []
  9080                           
  9081                           
  9082                           ;tmr4.c: 113: T4CONbits.TMR4ON = 1;
  9083  03AC  0025               	movlb	5	; select bank5
  9084  03AD  1794               	bsf	20,7	;volatile
  9085  03AE  0008               	return
  9086  03AF                     __end_of_TMR4_Start:	
  9087  03AF                     __ptext11:	
  9088 ;; *************** function _WWDT_Initialize *****************
  9089 ;; Defined at:
  9090 ;;		line 109 in file "mcc_generated_files/mcc.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;		None
  9093 ;; Auto vars:     Size  Location     Type
  9094 ;;		None
  9095 ;; Return value:  Size  Location     Type
  9096 ;;                  1    wreg      void 
  9097 ;; Registers used:
  9098 ;;		wreg
  9099 ;; Tracked objects:
  9100 ;;		On entry : 1F/11
  9101 ;;		On exit  : 1F/10
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;Total ram usage:        0 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; Hardware stack levels required when called:    5
  9111 ;; This function calls:
  9112 ;;		Nothing
  9113 ;; This function is called by:
  9114 ;;		_SYSTEM_Initialize
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           
  9119                           ;psect for function _WWDT_Initialize
  9120  03AF                     _WWDT_Initialize:	
  9121                           
  9122                           ;mcc.c: 112: WDTCON0 = 36;
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _WWDT_Initialize: [wreg]
  9126  03AF  3024               	movlw	36
  9127  03B0  0030               	movlb	16	; select bank16
  9128  03B1  008C               	movwf	12	;volatile
  9129                           
  9130                           ;mcc.c: 113: WDTCON1 = 7|0;
  9131  03B2  3007               	movlw	7
  9132  03B3  008D               	movwf	13	;volatile
  9133  03B4  0008               	return
  9134  03B5                     __end_of_WWDT_Initialize:	
  9135  03B5                     __ptext5:	
  9136 ;; *************** function _WiFly_FactoryReset *****************
  9137 ;; Defined at:
  9138 ;;		line 155 in file "mcc_generated_files/WiFly.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;		None
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  1    wreg      void 
  9145 ;; Registers used:
  9146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 1E/1
  9149 ;;		On exit  : 1F/1
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;Total ram usage:        2 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:   11
  9159 ;; This function calls:
  9160 ;;		_WiFly_CheckRecv
  9161 ;;		_WiFly_RebootCMD
  9162 ;;		_WiFly_SaveConfig
  9163 ;;		_WiFly_SendCMD
  9164 ;;		_WiFly_SendString
  9165 ;; This function is called by:
  9166 ;;		_WiFly_Example_InitializeAsClient
  9167 ;;		_main
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           
  9172                           ;psect for function _WiFly_FactoryReset
  9173  03B5                     _WiFly_FactoryReset:	
  9174                           
  9175                           ;incstack = 0
  9176                           ; Regs used in _WiFly_FactoryReset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9177                           ;WiFly.c: 157: do { LATBbits.LATB1 = 0; } while(0);
  9178  03B5  0020               	movlb	0	; select bank0
  9179  03B6  1097               	bcf	23,1	;volatile
  9180                           
  9181                           ;WiFly.c: 158: inCMD = 0;
  9182  03B7  0021               	movlb	1	; select bank1
  9183  03B8  3002               	movlw	2
  9184  03B9  01EB               	clrf	_inCMD^(0+128)
  9185                           
  9186                           ;WiFly.c: 159: _delay((unsigned long)((50)*(16000000/4000.0)));
  9187  03BA  00FA               	movwf	??_WiFly_FactoryReset+1
  9188  03BB  3004               	movlw	4
  9189  03BC  00F9               	movwf	??_WiFly_FactoryReset
  9190  03BD  30BA               	movlw	186
  9191  03BE                     u3357:	
  9192  03BE  0B89               	decfsz	9,f
  9193  03BF  2BBE               	goto	u3357
  9194  03C0  0BF9               	decfsz	??_WiFly_FactoryReset,f
  9195  03C1  2BBE               	goto	u3357
  9196  03C2  0BFA               	decfsz	??_WiFly_FactoryReset+1,f
  9197  03C3  2BBE               	goto	u3357
  9198  03C4  3200               	nop2
  9199  03C5  0020               	movlb	0	; select bank0
  9200  03C6  1497               	bsf	23,1	;volatile
  9201                           
  9202                           ;WiFly.c: 161: WiFly_CheckRecv(hardRebootStr);
  9203  03C7  27BF  3180         	fcall	PL28	;call to abstracted procedure
  9204  03C9  2641  3180         	fcall	_WiFly_CheckRecv
  9205                           
  9206                           ;WiFly.c: 163: WiFly_SendString("factory RESET\r\n");
  9207  03CB  309D               	movlw	low (STR_5| (0+32768))
  9208  03CC  00F5               	movwf	WiFly_SendString@sendString
  9209  03CD  3090               	movlw	high (STR_5| (0+32768))
  9210  03CE  00F6               	movwf	WiFly_SendString@sendString+1
  9211  03CF  2638  3180         	fcall	_WiFly_SendString
  9212                           
  9213                           ;WiFly.c: 164: WiFly_RebootCMD();
  9214  03D1  206E  3180         	fcall	_WiFly_RebootCMD
  9215                           
  9216                           ;WiFly.c: 165: WiFly_SendCMD("set uart mode 0x11\r\n");
  9217  03D3  302E               	movlw	low (STR_6| (0+32768))
  9218  03D4  0020               	movlb	0	; select bank0
  9219  03D5  00A4               	movwf	WiFly_SendCMD@cmd
  9220  03D6  3090               	movlw	high (STR_6| (0+32768))
  9221  03D7  00A5               	movwf	WiFly_SendCMD@cmd+1
  9222  03D8  262C  3180         	fcall	_WiFly_SendCMD
  9223                           
  9224                           ;WiFly.c: 166: WiFly_SaveConfig();
  9225  03DA  2E91               	ljmp	l3685
  9226  03DB                     __end_of_WiFly_FactoryReset:	
  9227  03DB                     __ptext27:	
  9228 ;; *************** function _sprintf *****************
  9229 ;; Defined at:
  9230 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;  sp              1    wreg     PTR unsigned char 
  9233 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), WiFly_SendCMD_DoubleArg@txBuffer(40), 
  9234 ;;		 -> WiFly_SendCMD_SingleArg@txBuffer(40), 
  9235 ;;  f               2    1[BANK0 ] PTR const unsigned char 
  9236 ;;		 -> STR_27(11), STR_26(14), STR_25(10), STR_20(13), 
  9237 ;;		 -> STR_13(13), STR_9(19), STR_8(25), 
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;  sp              1   22[BANK0 ] PTR unsigned char 
  9240 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), WiFly_SendCMD_DoubleArg@txBuffer(40), 
  9241 ;;		 -> WiFly_SendCMD_SingleArg@txBuffer(40), 
  9242 ;;  idx             1   11[BANK0 ] unsigned char 
  9243 ;;  tmpval          4    0        struct .
  9244 ;;  width           2   23[BANK0 ] int 
  9245 ;;  flag            2   20[BANK0 ] unsigned short 
  9246 ;;  val             2   17[BANK0 ] unsigned int 
  9247 ;;  len             2   15[BANK0 ] unsigned int 
  9248 ;;  cp              2   12[BANK0 ] PTR const unsigned char 
  9249 ;;		 -> STR_30(7), sprintf@c(1), STR_29(10), STR_28(4), 
  9250 ;;		 -> STR_23(5), STR_22(12), 
  9251 ;;  c               1   25[BANK0 ] char 
  9252 ;;  prec            1   19[BANK0 ] char 
  9253 ;;  ap              1   14[BANK0 ] PTR void [1]
  9254 ;;		 -> ?_sprintf(2), 
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  2    1[BANK0 ] int 
  9257 ;; Registers used:
  9258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 1F/0
  9261 ;;		On exit  : 1F/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9264 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;Total ram usage:       25 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    6
  9271 ;; This function calls:
  9272 ;;		___bmul
  9273 ;;		___lwdiv
  9274 ;;		___lwmod
  9275 ;;		___wmul
  9276 ;;		_isdigit
  9277 ;; This function is called by:
  9278 ;;		_WiFly_SendCMD_SingleArg
  9279 ;;		_WiFly_SendCMD_DoubleArg
  9280 ;;		_Pair
  9281 ;;		_Validate
  9282 ;;		_Knock
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           
  9287                           ;psect for function _sprintf
  9288  03DB                     _sprintf:	
  9289                           
  9290                           ;incstack = 0
  9291                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9292                           ;sprintf@sp stored from wreg
  9293  03DB  00B6               	movwf	sprintf@sp
  9294                           
  9295                           ;doprnt.c: 494: va_list ap;
  9296                           ;doprnt.c: 499: signed char c;
  9297                           ;doprnt.c: 501: int width;
  9298                           ;doprnt.c: 506: signed char prec;
  9299                           ;doprnt.c: 508: unsigned short flag;
  9300                           ;doprnt.c: 523: union {
  9301                           ;doprnt.c: 524: unsigned long vd;
  9302                           ;doprnt.c: 525: double integ;
  9303                           ;doprnt.c: 526: } tmpval;
  9304                           ;doprnt.c: 528: unsigned int val;
  9305                           ;doprnt.c: 529: unsigned len;
  9306                           ;doprnt.c: 530: const char * cp;
  9307                           ;doprnt.c: 533: *ap = __va_start();
  9308  03DC  3023               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  9309  03DD  00AE               	movwf	sprintf@ap
  9310  03DE                     l3663:	
  9311                           ;doprnt.c: 536: while(c = *f++) {
  9312                           
  9313  03DE  0020               	movlb	0	; select bank0
  9314  03DF  2758  3180         	fcall	PL4	;call to abstracted procedure
  9315  03E1  0839               	movf	sprintf@c,w
  9316  03E2  1903               	btfsc	3,2
  9317  03E3  2DF4               	goto	l3665
  9318                           
  9319                           ;doprnt.c: 538: if(c != '%')
  9320  03E4  3025               	movlw	37
  9321  03E5  0639               	xorwf	sprintf@c,w
  9322  03E6  1903               	btfsc	3,2
  9323  03E7  2BEF               	goto	l3429
  9324                           
  9325                           ;doprnt.c: 540: {
  9326                           ;doprnt.c: 541: ((*sp++ = (c)));
  9327  03E8  0836               	movf	sprintf@sp,w
  9328  03E9  0086               	movwf	6
  9329  03EA  0187               	clrf	7
  9330  03EB  0839               	movf	sprintf@c,w
  9331  03EC  0081               	movwf	1
  9332  03ED  0AB6               	incf	sprintf@sp,f
  9333                           
  9334                           ;doprnt.c: 542: continue;
  9335  03EE  2BDE               	goto	l3663
  9336  03EF                     l3429:	
  9337                           
  9338                           ;doprnt.c: 543: }
  9339                           ;doprnt.c: 546: width = 0;
  9340  03EF  01B7               	clrf	sprintf@width
  9341  03F0  01B8               	clrf	sprintf@width+1
  9342                           
  9343                           ;doprnt.c: 548: flag = 0;
  9344  03F1  01B4               	clrf	sprintf@flag
  9345  03F2  01B5               	clrf	sprintf@flag+1
  9346  03F3  2BFA               	goto	l3437
  9347  03F4                     l793:	
  9348                           ;doprnt.c: 553: case '-':
  9349                           
  9350                           
  9351                           ;doprnt.c: 554: flag |= 0x08;
  9352  03F4  15B4               	bsf	sprintf@flag,3
  9353                           
  9354                           ;doprnt.c: 556: continue;
  9355  03F5  2BF7               	goto	l3431
  9356  03F6                     l795:	
  9357                           ;doprnt.c: 579: case '0':
  9358                           
  9359                           
  9360                           ;doprnt.c: 580: flag |= 0x04;
  9361  03F6  1534               	bsf	sprintf@flag,2
  9362  03F7                     l3431:	
  9363                           
  9364                           ;doprnt.c: 555: f++;
  9365  03F7  0AA1               	incf	sprintf@f,f
  9366  03F8  1903               	skipnz
  9367  03F9  0AA2               	incf	sprintf@f+1,f
  9368  03FA                     l3437:	
  9369  03FA  2771  3180         	fcall	PL8	;call to abstracted procedure
  9370                           
  9371                           ; Switch size 1, requested type "space"
  9372                           ; Number of cases is 2, Range of values is 45 to 48
  9373                           ; switch strategies available:
  9374                           ; Name         Instructions Cycles
  9375                           ; simple_byte            7     4 (average)
  9376                           ; direct_byte           17     9 (fixed)
  9377                           ; jumptable            263     9 (fixed)
  9378                           ;	Chosen strategy is simple_byte
  9379  03FC  3A2D               	xorlw	45	; case 45
  9380  03FD  1903               	skipnz
  9381  03FE  2BF4               	goto	l793
  9382  03FF  3A1D               	xorlw	29	; case 48
  9383  0400  1903               	skipnz
  9384  0401  2BF6               	goto	l795
  9385  0402  2C03               	goto	l797
  9386  0403                     l797:	
  9387                           
  9388                           ;doprnt.c: 593: if(flag & 0x08)
  9389  0403  1DB4               	btfss	sprintf@flag,3
  9390  0404  2C06               	goto	l3441
  9391                           
  9392                           ;doprnt.c: 594: flag &= ~0x04;
  9393  0405  1134               	bcf	sprintf@flag,2
  9394  0406                     l3441:	
  9395                           
  9396                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9397  0406  2771  3180         	fcall	PL8	;call to abstracted procedure
  9398  0408  25F9  3180         	fcall	_isdigit
  9399  040A  1C03               	btfss	3,0
  9400  040B  2C30               	goto	l3453
  9401                           
  9402                           ;doprnt.c: 598: width = 0;
  9403  040C  01B7               	clrf	sprintf@width
  9404  040D  01B8               	clrf	sprintf@width+1
  9405  040E                     l3445:	
  9406                           
  9407                           ;doprnt.c: 600: width *= 10;
  9408  040E  300A               	movlw	10
  9409  040F  00F1               	movwf	___wmul@multiplier
  9410  0410  01F2               	clrf	___wmul@multiplier+1
  9411  0411  0838               	movf	sprintf@width+1,w
  9412  0412  00F4               	movwf	___wmul@multiplicand+1
  9413  0413  0837               	movf	sprintf@width,w
  9414  0414  00F3               	movwf	___wmul@multiplicand
  9415  0415  26C4  3180         	fcall	___wmul
  9416  0417  0872               	movf	?___wmul+1,w
  9417  0418  00B8               	movwf	sprintf@width+1
  9418  0419  0871               	movf	?___wmul,w
  9419  041A  00B7               	movwf	sprintf@width
  9420                           
  9421                           ;doprnt.c: 601: width += *f++ - '0';
  9422  041B  2771  3180         	fcall	PL8	;call to abstracted procedure
  9423  041D  3ED0               	addlw	208
  9424  041E  00A7               	movwf	??_sprintf
  9425  041F  30FF               	movlw	255
  9426  0420  1803               	skipnc
  9427  0421  3000               	movlw	0
  9428  0422  00A8               	movwf	??_sprintf+1
  9429  0423  0827               	movf	??_sprintf,w
  9430  0424  07B7               	addwf	sprintf@width,f
  9431  0425  0828               	movf	??_sprintf+1,w
  9432  0426  3DB8               	addwfc	sprintf@width+1,f
  9433  0427  0AA1               	incf	sprintf@f,f
  9434  0428  1903               	skipnz
  9435  0429  0AA2               	incf	sprintf@f+1,f
  9436                           
  9437                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9438  042A  2771  3180         	fcall	PL8	;call to abstracted procedure
  9439  042C  25F9  3180         	fcall	_isdigit
  9440  042E  1803               	btfsc	3,0
  9441  042F  2C0E               	goto	l3445
  9442  0430                     l3453:	
  9443                           
  9444                           ;doprnt.c: 608: }
  9445                           ;doprnt.c: 611: if(*f == '.') {
  9446  0430  0821               	movf	sprintf@f,w
  9447  0431  0084               	movwf	4
  9448  0432  0822               	movf	sprintf@f+1,w
  9449  0433  0085               	movwf	5
  9450  0434  0012               	moviw fsr0++
  9451  0435  3A2E               	xorlw	46
  9452  0436  1D03               	btfss	3,2
  9453  0437  2C52               	goto	l3467
  9454                           
  9455                           ;doprnt.c: 612: flag |= 0x4000;
  9456  0438  1735               	bsf	sprintf@flag+1,6
  9457                           
  9458                           ;doprnt.c: 613: f++;
  9459  0439  0AA1               	incf	sprintf@f,f
  9460  043A  1903               	skipnz
  9461  043B  0AA2               	incf	sprintf@f+1,f
  9462                           
  9463                           ;doprnt.c: 620: {
  9464                           ;doprnt.c: 621: prec = 0;
  9465  043C  01B3               	clrf	sprintf@prec
  9466  043D                     l3465:	
  9467                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  9468                           
  9469  043D  2771  3180         	fcall	PL8	;call to abstracted procedure
  9470  043F  25F9  3180         	fcall	_isdigit
  9471  0441  1C03               	btfss	3,0
  9472  0442  2CD5               	goto	l3527
  9473                           
  9474                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  9475  0443  2771  3180         	fcall	PL8	;call to abstracted procedure
  9476  0445  00A7               	movwf	??_sprintf
  9477  0446  300A               	movlw	10
  9478  0447  00F1               	movwf	___bmul@multiplicand
  9479  0448  0833               	movf	sprintf@prec,w
  9480  0449  2698  3180         	fcall	___bmul
  9481  044B  0727               	addwf	??_sprintf,w
  9482  044C  3ED0               	addlw	-48
  9483  044D  00B3               	movwf	sprintf@prec
  9484  044E  0AA1               	incf	sprintf@f,f
  9485  044F  1903               	skipnz
  9486  0450  0AA2               	incf	sprintf@f+1,f
  9487  0451  2C3D               	goto	l3465
  9488  0452                     l3467:	
  9489                           
  9490                           ;doprnt.c: 626: prec = 0;
  9491  0452  01B3               	clrf	sprintf@prec
  9492  0453  2CD5               	goto	l3527
  9493  0454                     l814:	
  9494                           
  9495                           ;doprnt.c: 718: case 'x':
  9496                           ;doprnt.c: 721: flag |= 0x80;
  9497  0454  17B4               	bsf	sprintf@flag,7
  9498                           
  9499                           ;doprnt.c: 723: break;
  9500  0455  2CEA               	goto	l812
  9501  0456                     l3469:	
  9502                           
  9503                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9504  0456  082E               	movf	sprintf@ap,w
  9505  0457  0086               	movwf	6
  9506  0458  0187               	clrf	7
  9507  0459  3F40               	moviw [0]fsr1
  9508  045A  00AC               	movwf	sprintf@cp
  9509  045B  3F41               	moviw [1]fsr1
  9510  045C  00AD               	movwf	sprintf@cp+1
  9511  045D  0AAE               	incf	sprintf@ap,f
  9512  045E  0AAE               	incf	sprintf@ap,f
  9513                           
  9514                           ;doprnt.c: 740: if(!cp)
  9515  045F  042C               	iorwf	sprintf@cp,w
  9516  0460  1D03               	btfss	3,2
  9517  0461  2C66               	goto	l3477
  9518                           
  9519                           ;doprnt.c: 741: cp = "(null)";
  9520  0462  3034               	movlw	low (STR_30| (0+32768))
  9521  0463  00AC               	movwf	sprintf@cp
  9522  0464  3091               	movlw	high (STR_30| (0+32768))
  9523  0465  00AD               	movwf	sprintf@cp+1
  9524  0466                     l3477:	
  9525                           
  9526                           ;doprnt.c: 745: len = 0;
  9527  0466  01AF               	clrf	sprintf@len
  9528  0467  01B0               	clrf	sprintf@len+1
  9529  0468                     l3481:	
  9530                           ;doprnt.c: 746: while(cp[len])
  9531                           
  9532  0468  082C               	movf	sprintf@cp,w
  9533  0469  072F               	addwf	sprintf@len,w
  9534  046A  0084               	movwf	4
  9535  046B  082D               	movf	sprintf@cp+1,w
  9536  046C  3D30               	addwfc	sprintf@len+1,w
  9537  046D  0085               	movwf	5
  9538  046E  0012               	moviw fsr0++
  9539  046F  1903               	btfsc	3,2
  9540  0470  2C75               	goto	l3483
  9541                           
  9542                           ;doprnt.c: 747: len++;
  9543  0471  0AAF               	incf	sprintf@len,f
  9544  0472  1903               	skipnz
  9545  0473  0AB0               	incf	sprintf@len+1,f
  9546  0474  2C68               	goto	l3481
  9547  0475                     l3483:	
  9548                           
  9549                           ;doprnt.c: 753: if(prec && prec < len)
  9550  0475  0833               	movf	sprintf@prec,w
  9551  0476  1903               	btfsc	3,2
  9552  0477  2C8A               	goto	l3489
  9553  0478  0833               	movf	sprintf@prec,w
  9554  0479  00A7               	movwf	??_sprintf
  9555  047A  01A8               	clrf	??_sprintf+1
  9556  047B  1BA7               	btfsc	??_sprintf,7
  9557  047C  03A8               	decf	??_sprintf+1,f
  9558  047D  0830               	movf	sprintf@len+1,w
  9559  047E  0228               	subwf	??_sprintf+1,w
  9560  047F  1D03               	skipz
  9561  0480  2C83               	goto	u2735
  9562  0481  082F               	movf	sprintf@len,w
  9563  0482  0227               	subwf	??_sprintf,w
  9564  0483                     u2735:	
  9565  0483  1803               	skipnc
  9566  0484  2C8A               	goto	l3489
  9567                           
  9568                           ;doprnt.c: 754: len = prec;
  9569  0485  0833               	movf	sprintf@prec,w
  9570  0486  00AF               	movwf	sprintf@len
  9571  0487  01B0               	clrf	sprintf@len+1
  9572  0488  1BAF               	btfsc	sprintf@len,7
  9573  0489  03B0               	decf	sprintf@len+1,f
  9574  048A                     l3489:	
  9575                           
  9576                           ;doprnt.c: 757: if(width > len)
  9577  048A  0838               	movf	sprintf@width+1,w
  9578  048B  0230               	subwf	sprintf@len+1,w
  9579  048C  1D03               	skipz
  9580  048D  2C90               	goto	u2745
  9581  048E  0837               	movf	sprintf@width,w
  9582  048F  022F               	subwf	sprintf@len,w
  9583  0490                     u2745:	
  9584  0490  1803               	skipnc
  9585  0491  2C97               	goto	l3493
  9586                           
  9587                           ;doprnt.c: 758: width -= len;
  9588  0492  082F               	movf	sprintf@len,w
  9589  0493  02B7               	subwf	sprintf@width,f
  9590  0494  0830               	movf	sprintf@len+1,w
  9591  0495  3BB8               	subwfb	sprintf@width+1,f
  9592  0496  2C99               	goto	l3495
  9593  0497                     l3493:	
  9594                           
  9595                           ;doprnt.c: 759: else
  9596                           ;doprnt.c: 760: width = 0;
  9597  0497  01B7               	clrf	sprintf@width
  9598  0498  01B8               	clrf	sprintf@width+1
  9599  0499                     l3495:	
  9600                           
  9601                           ;doprnt.c: 762: if(!(flag & 0x08))
  9602  0499  1DB4               	btfss	sprintf@flag,3
  9603  049A  2C9E               	goto	l3503
  9604  049B  2CB5               	goto	l3511
  9605  049C                     l3499:	
  9606                           
  9607                           ;doprnt.c: 765: ((*sp++ = (' ')));
  9608  049C  2799  3180         	fcall	PL16	;call to abstracted procedure
  9609  049E                     l3503:	
  9610  049E  30FF               	movlw	-1
  9611  049F  07B7               	addwf	sprintf@width,f
  9612  04A0  1C03               	skipc
  9613  04A1  03B8               	decf	sprintf@width+1,f
  9614  04A2  0F37               	incfsz	sprintf@width,w
  9615  04A3  2C9C               	goto	l3499
  9616  04A4  0A38               	incf	sprintf@width+1,w
  9617  04A5  1903               	btfsc	3,2
  9618  04A6  2CB5               	goto	l3511
  9619  04A7  2C9C               	goto	l3499
  9620  04A8                     l3505:	
  9621                           
  9622                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  9623  04A8  0836               	movf	sprintf@sp,w
  9624  04A9  0086               	movwf	6
  9625  04AA  0187               	clrf	7
  9626  04AB  082C               	movf	sprintf@cp,w
  9627  04AC  0084               	movwf	4
  9628  04AD  082D               	movf	sprintf@cp+1,w
  9629  04AE  0085               	movwf	5
  9630  04AF  0800               	movf	0,w	;code access
  9631  04B0  0081               	movwf	1
  9632  04B1  0AAC               	incf	sprintf@cp,f
  9633  04B2  1903               	skipnz
  9634  04B3  0AAD               	incf	sprintf@cp+1,f
  9635  04B4  0AB6               	incf	sprintf@sp,f
  9636  04B5                     l3511:	
  9637  04B5  3001               	movlw	1
  9638  04B6  02AF               	subwf	sprintf@len,f
  9639  04B7  3000               	movlw	0
  9640  04B8  3BB0               	subwfb	sprintf@len+1,f
  9641  04B9  0F2F               	incfsz	sprintf@len,w
  9642  04BA  2CA8               	goto	l3505
  9643  04BB  0A30               	incf	sprintf@len+1,w
  9644  04BC  1D03               	btfss	3,2
  9645  04BD  2CA8               	goto	l3505
  9646                           
  9647                           ;doprnt.c: 770: if(flag & 0x08)
  9648  04BE  19B4               	btfsc	sprintf@flag,3
  9649  04BF  2CC3               	goto	l3519
  9650  04C0  2BDE               	goto	l3663
  9651  04C1                     l3515:	
  9652                           
  9653                           ;doprnt.c: 772: ((*sp++ = (' ')));
  9654  04C1  2799  3180         	fcall	PL16	;call to abstracted procedure
  9655  04C3                     l3519:	
  9656  04C3  30FF               	movlw	-1
  9657  04C4  07B7               	addwf	sprintf@width,f
  9658  04C5  1C03               	skipc
  9659  04C6  03B8               	decf	sprintf@width+1,f
  9660  04C7  0F37               	incfsz	sprintf@width,w
  9661  04C8  2CC1               	goto	l3515
  9662  04C9  0A38               	incf	sprintf@width+1,w
  9663  04CA  1903               	btfsc	3,2
  9664  04CB  2BDE               	goto	l3663
  9665  04CC  2CC1               	goto	l3515
  9666  04CD                     l3521:	
  9667                           
  9668                           ;doprnt.c: 805: cp = (char *)&c;
  9669  04CD  3039               	movlw	low sprintf@c
  9670  04CE  00AC               	movwf	sprintf@cp
  9671  04CF  3000               	movlw	high sprintf@c
  9672  04D0  00AD               	movwf	sprintf@cp+1
  9673                           
  9674                           ;doprnt.c: 806: len = 1;
  9675  04D1  01AF               	clrf	sprintf@len
  9676  04D2  0AAF               	incf	sprintf@len,f
  9677  04D3  01B0               	clrf	sprintf@len+1
  9678                           
  9679                           ;doprnt.c: 807: goto dostring;
  9680  04D4  2C75               	goto	l3483
  9681  04D5                     l3527:	
  9682  04D5  2758  3180         	fcall	PL4	;call to abstracted procedure
  9683                           
  9684                           ; Switch size 1, requested type "space"
  9685                           ; Number of cases is 6, Range of values is 0 to 120
  9686                           ; switch strategies available:
  9687                           ; Name         Instructions Cycles
  9688                           ; simple_byte           19    10 (average)
  9689                           ; direct_byte          248     6 (fixed)
  9690                           ; jumptable            260     6 (fixed)
  9691                           ;	Chosen strategy is simple_byte
  9692  04D7  3A00               	xorlw	0	; case 0
  9693  04D8  1903               	skipnz
  9694  04D9  2DF4               	goto	l3665
  9695  04DA  3A64               	xorlw	100	; case 100
  9696  04DB  1903               	skipnz
  9697  04DC  2CEA               	goto	l812
  9698  04DD  3A0D               	xorlw	13	; case 105
  9699  04DE  1903               	skipnz
  9700  04DF  2CEA               	goto	l812
  9701  04E0  3A19               	xorlw	25	; case 112
  9702  04E1  1903               	skipnz
  9703  04E2  2C54               	goto	l814
  9704  04E3  3A03               	xorlw	3	; case 115
  9705  04E4  1903               	skipnz
  9706  04E5  2C56               	goto	l3469
  9707  04E6  3A0B               	xorlw	11	; case 120
  9708  04E7  1903               	skipnz
  9709  04E8  2C54               	goto	l814
  9710  04E9  2CCD               	goto	l3521
  9711  04EA                     l812:	
  9712                           
  9713                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9714  04EA  1BB4               	btfsc	sprintf@flag,7
  9715  04EB  2CF8               	goto	l3539
  9716                           
  9717                           ;doprnt.c: 1253: {
  9718                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9719  04EC  278F  3180         	fcall	PL14	;call to abstracted procedure
  9720                           
  9721                           ;doprnt.c: 1261: if((int)val < 0) {
  9722  04EE  1FB2               	btfss	sprintf@val+1,7
  9723  04EF  2CFA               	goto	l3543
  9724                           
  9725                           ;doprnt.c: 1262: flag |= 0x03;
  9726  04F0  3003               	movlw	3
  9727  04F1  04B4               	iorwf	sprintf@flag,f
  9728                           
  9729                           ;doprnt.c: 1263: val = -val;
  9730  04F2  09B1               	comf	sprintf@val,f
  9731  04F3  09B2               	comf	sprintf@val+1,f
  9732  04F4  0AB1               	incf	sprintf@val,f
  9733  04F5  1903               	skipnz
  9734  04F6  0AB2               	incf	sprintf@val+1,f
  9735  04F7  2CFA               	goto	l3543
  9736  04F8                     l3539:	
  9737                           
  9738                           ;doprnt.c: 1268: else
  9739                           ;doprnt.c: 1273: {
  9740                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9741  04F8  278F  3180         	fcall	PL14	;call to abstracted procedure
  9742  04FA                     l3543:	
  9743                           
  9744                           ;doprnt.c: 1287: }
  9745                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  9746  04FA  0833               	movf	sprintf@prec,w
  9747  04FB  1D03               	btfss	3,2
  9748  04FC  2D2B               	goto	l3575
  9749  04FD  0831               	movf	sprintf@val,w
  9750  04FE  0432               	iorwf	sprintf@val+1,w
  9751  04FF  1D03               	btfss	3,2
  9752  0500  2D2B               	goto	l3575
  9753                           
  9754                           ;doprnt.c: 1291: prec++;
  9755  0501  0AB3               	incf	sprintf@prec,f
  9756  0502  2D2B               	goto	l3575
  9757  0503                     l841:	
  9758                           ;doprnt.c: 1299: case 0x00:
  9759                           
  9760                           
  9761                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9762  0503  01B9               	clrf	sprintf@c
  9763  0504                     L3:	
  9764  0504  3005               	movlw	5
  9765  0505  0AB9               	incf	sprintf@c,f
  9766  0506  0639               	xorwf	sprintf@c,w
  9767  0507  1903               	btfsc	3,2
  9768  0508  2D33               	goto	l3577
  9769                           
  9770                           ;doprnt.c: 1306: if(val < dpowers[c])
  9771  0509  0839               	movf	sprintf@c,w
  9772  050A  2783  3180         	fcall	PL12	;call to abstracted procedure
  9773  050C  00A9               	movwf	??_sprintf+2
  9774  050D  3F01               	moviw [1]fsr0
  9775  050E  00AA               	movwf	??_sprintf+3
  9776  050F  0232               	subwf	sprintf@val+1,w
  9777  0510  1D03               	skipz
  9778  0511  2D14               	goto	u2855
  9779  0512  0829               	movf	??_sprintf+2,w
  9780  0513  0231               	subwf	sprintf@val,w
  9781  0514                     u2855:	
  9782  0514  1C03               	btfss	3,0
  9783  0515  2D33               	goto	l3577
  9784  0516  2D04               	goto	L3
  9785  0517                     l846:	
  9786                           ;doprnt.c: 1314: case 0x80:
  9787                           
  9788                           
  9789                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9790  0517  01B9               	clrf	sprintf@c
  9791  0518                     L4:	
  9792  0518  3004               	movlw	4
  9793  0519  0AB9               	incf	sprintf@c,f
  9794  051A  0639               	xorwf	sprintf@c,w
  9795  051B  1903               	btfsc	3,2
  9796  051C  2D33               	goto	l3577
  9797                           
  9798                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9799  051D  0839               	movf	sprintf@c,w
  9800  051E  2765  3180         	fcall	PL6	;call to abstracted procedure
  9801  0520  00A9               	movwf	??_sprintf+2
  9802  0521  3F01               	moviw [1]fsr0
  9803  0522  00AA               	movwf	??_sprintf+3
  9804  0523  0232               	subwf	sprintf@val+1,w
  9805  0524  1D03               	skipz
  9806  0525  2D28               	goto	u2875
  9807  0526  0829               	movf	??_sprintf+2,w
  9808  0527  0231               	subwf	sprintf@val,w
  9809  0528                     u2875:	
  9810  0528  1C03               	btfss	3,0
  9811  0529  2D33               	goto	l3577
  9812  052A  2D18               	goto	L4
  9813  052B                     l3575:	
  9814  052B  0834               	movf	sprintf@flag,w
  9815  052C  3980               	andlw	128
  9816                           
  9817                           ; Switch size 1, requested type "space"
  9818                           ; Number of cases is 2, Range of values is 0 to 128
  9819                           ; switch strategies available:
  9820                           ; Name         Instructions Cycles
  9821                           ; simple_byte            7     4 (average)
  9822                           ; jumptable            260     6 (fixed)
  9823                           ;	Chosen strategy is simple_byte
  9824  052D  1903               	skipnz
  9825  052E  2D03               	goto	l841
  9826  052F  3A80               	xorlw	128	; case 128
  9827  0530  1903               	skipnz
  9828  0531  2D17               	goto	l846
  9829  0532  2D33               	goto	l3577
  9830  0533                     l3577:	
  9831                           
  9832                           ;doprnt.c: 1339: if(c < prec)
  9833  0533  0839               	movf	sprintf@c,w
  9834  0534  3A80               	xorlw	128
  9835  0535  00A7               	movwf	??_sprintf
  9836  0536  0833               	movf	sprintf@prec,w
  9837  0537  3A80               	xorlw	128
  9838  0538  02A7               	subwf	??_sprintf,f
  9839                           
  9840                           ;doprnt.c: 1340: c = prec;
  9841  0539  0833               	movf	sprintf@prec,w
  9842  053A  1803               	skipnc
  9843  053B  2D3E               	goto	L7
  9844  053C  00B9               	movwf	sprintf@c
  9845  053D  2D47               	goto	l3585
  9846  053E                     L7:	
  9847                           ;doprnt.c: 1341: else if(prec < c)
  9848                           
  9849  053E  3A80               	xorlw	128
  9850  053F  00A7               	movwf	??_sprintf
  9851  0540  0839               	movf	sprintf@c,w
  9852  0541  3A80               	xorlw	128
  9853  0542  02A7               	subwf	??_sprintf,f
  9854  0543  1803               	skipnc
  9855  0544  2D47               	goto	l3585
  9856                           
  9857                           ;doprnt.c: 1342: prec = c;
  9858  0545  0839               	movf	sprintf@c,w
  9859  0546  00B3               	movwf	sprintf@prec
  9860  0547                     l3585:	
  9861                           
  9862                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9863  0547  0837               	movf	sprintf@width,w
  9864  0548  0438               	iorwf	sprintf@width+1,w
  9865  0549  1903               	btfsc	3,2
  9866  054A  2D53               	goto	l3591
  9867  054B  0834               	movf	sprintf@flag,w
  9868  054C  3903               	andlw	3
  9869  054D  1903               	btfsc	3,2
  9870  054E  2D53               	goto	l3591
  9871                           
  9872                           ;doprnt.c: 1346: width--;
  9873  054F  30FF               	movlw	-1
  9874  0550  07B7               	addwf	sprintf@width,f
  9875  0551  1C03               	skipc
  9876  0552  03B8               	decf	sprintf@width+1,f
  9877  0553                     l3591:	
  9878                           
  9879                           ;doprnt.c: 1348: if(flag & 0x4000) {
  9880  0553  1F35               	btfss	sprintf@flag+1,6
  9881  0554  2D62               	goto	l3599
  9882                           
  9883                           ;doprnt.c: 1349: if(width > prec)
  9884  0555  0833               	movf	sprintf@prec,w
  9885  0556  2749  3180         	fcall	PL2	;call to abstracted procedure
  9886  0558  1803               	skipnc
  9887  0559  2D5F               	goto	l3597
  9888                           
  9889                           ;doprnt.c: 1350: width -= prec;
  9890  055A  0020               	movlb	0	; select bank0
  9891  055B  0833               	movf	sprintf@prec,w
  9892  055C  27A0  3180         	fcall	PL18	;call to abstracted procedure
  9893  055E  2D62               	goto	l3599
  9894  055F                     l3597:	
  9895                           
  9896                           ;doprnt.c: 1351: else
  9897                           ;doprnt.c: 1352: width = 0;
  9898  055F  0020               	movlb	0	; select bank0
  9899  0560  01B7               	clrf	sprintf@width
  9900  0561  01B8               	clrf	sprintf@width+1
  9901  0562                     l3599:	
  9902                           
  9903                           ;doprnt.c: 1353: }
  9904                           ;doprnt.c: 1381: if(width > c)
  9905  0562  0839               	movf	sprintf@c,w
  9906  0563  2749  3180         	fcall	PL2	;call to abstracted procedure
  9907  0565  1803               	skipnc
  9908  0566  2D6C               	goto	l3603
  9909                           
  9910                           ;doprnt.c: 1382: width -= c;
  9911  0567  0020               	movlb	0	; select bank0
  9912  0568  0839               	movf	sprintf@c,w
  9913  0569  27A0  3180         	fcall	PL18	;call to abstracted procedure
  9914  056B  2D6F               	goto	l3605
  9915  056C                     l3603:	
  9916                           
  9917                           ;doprnt.c: 1383: else
  9918                           ;doprnt.c: 1384: width = 0;
  9919  056C  0020               	movlb	0	; select bank0
  9920  056D  01B7               	clrf	sprintf@width
  9921  056E  01B8               	clrf	sprintf@width+1
  9922  056F                     l3605:	
  9923                           
  9924                           ;doprnt.c: 1387: if(flag & 0x04) {
  9925  056F  1D34               	btfss	sprintf@flag,2
  9926  0570  2D8A               	goto	l3621
  9927                           
  9928                           ;doprnt.c: 1392: if(flag & 0x03)
  9929  0571  0834               	movf	sprintf@flag,w
  9930  0572  3903               	andlw	3
  9931  0573  1903               	btfsc	3,2
  9932  0574  2D7B               	goto	l3613
  9933                           
  9934                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9935  0575  0836               	movf	sprintf@sp,w
  9936  0576  0086               	movwf	6
  9937  0577  302D               	movlw	45
  9938  0578  0187               	clrf	7
  9939  0579  0081               	movwf	1
  9940  057A  0AB6               	incf	sprintf@sp,f
  9941  057B                     l3613:	
  9942                           
  9943                           ;doprnt.c: 1415: if(width)
  9944  057B  0837               	movf	sprintf@width,w
  9945  057C  0438               	iorwf	sprintf@width+1,w
  9946  057D  1903               	btfsc	3,2
  9947  057E  2DDD               	goto	l3653
  9948                           
  9949                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9950  057F  0836               	movf	sprintf@sp,w
  9951  0580  0086               	movwf	6
  9952  0581  3030               	movlw	48
  9953  0582  0187               	clrf	7
  9954  0583  0081               	movwf	1
  9955  0584  30FF               	movlw	-1
  9956  0585  0AB6               	incf	sprintf@sp,f
  9957                           
  9958                           ;doprnt.c: 1418: while(--width);
  9959  0586  07B7               	addwf	sprintf@width,f
  9960  0587  1C03               	skipc
  9961  0588  03B8               	decf	sprintf@width+1,f
  9962  0589  2D7B               	goto	l3613
  9963  058A                     l3621:	
  9964                           
  9965                           ;doprnt.c: 1422: {
  9966                           ;doprnt.c: 1424: if(width
  9967                           ;doprnt.c: 1426: && !(flag & 0x08)
  9968                           ;doprnt.c: 1428: )
  9969  058A  0837               	movf	sprintf@width,w
  9970  058B  0438               	iorwf	sprintf@width+1,w
  9971  058C  1D03               	btfss	3,2
  9972  058D  19B4               	btfsc	sprintf@flag,3
  9973  058E  2D94               	goto	l3631
  9974  058F                     l3625:	
  9975                           
  9976                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9977  058F  0836               	movf	sprintf@sp,w
  9978                           
  9979                           ;doprnt.c: 1431: while(--width);
  9980  0590  2777  3180         	fcall	PL10	;call to abstracted procedure
  9981  0592  1D03               	btfss	3,2
  9982  0593  2D8F               	goto	l3625
  9983  0594                     l3631:	
  9984                           
  9985                           ;doprnt.c: 1438: if(flag & 0x03)
  9986  0594  0834               	movf	sprintf@flag,w
  9987  0595  3903               	andlw	3
  9988  0596  1903               	btfsc	3,2
  9989  0597  2DDD               	goto	l3653
  9990                           
  9991                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9992  0598  0836               	movf	sprintf@sp,w
  9993  0599  0086               	movwf	6
  9994  059A  302D               	movlw	45
  9995  059B  0187               	clrf	7
  9996  059C  2DDB               	goto	L6
  9997  059D                     l3637:	
  9998                           
  9999                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10000  059D  300A               	movlw	10
 10001  059E  00F8               	movwf	___lwmod@divisor
 10002  059F  01F9               	clrf	___lwmod@divisor+1
 10003  05A0  0833               	movf	sprintf@prec,w
 10004  05A1  2783  3180         	fcall	PL12	;call to abstracted procedure
 10005  05A3  00F1               	movwf	___lwdiv@divisor
 10006  05A4  3F01               	moviw [1]fsr0
 10007  05A5  00F2               	movwf	___lwdiv@divisor+1
 10008  05A6  0832               	movf	sprintf@val+1,w
 10009  05A7  00F4               	movwf	___lwdiv@dividend+1
 10010  05A8  0831               	movf	sprintf@val,w
 10011  05A9  00F3               	movwf	___lwdiv@dividend
 10012  05AA  2607  3180         	fcall	___lwdiv
 10013  05AC  0872               	movf	?___lwdiv+1,w
 10014  05AD  00FB               	movwf	___lwmod@dividend+1
 10015  05AE  0871               	movf	?___lwdiv,w
 10016  05AF  00FA               	movwf	___lwmod@dividend
 10017  05B0  26A4  3180         	fcall	___lwmod
 10018  05B2  0878               	movf	?___lwmod,w
 10019  05B3  3E30               	addlw	48
 10020  05B4  2DCD               	goto	L5
 10021  05B5                     l3639:	
 10022                           ;doprnt.c: 1491: break;
 10023                           
 10024                           
 10025                           ;doprnt.c: 1499: {
 10026                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10027  05B5  0832               	movf	sprintf@val+1,w
 10028  05B6  00F4               	movwf	___lwdiv@dividend+1
 10029  05B7  0831               	movf	sprintf@val,w
 10030  05B8  00F3               	movwf	___lwdiv@dividend
 10031  05B9  0833               	movf	sprintf@prec,w
 10032  05BA  2765  3180         	fcall	PL6	;call to abstracted procedure
 10033  05BC  00F1               	movwf	___lwdiv@divisor
 10034  05BD  3F01               	moviw [1]fsr0
 10035  05BE  00F2               	movwf	___lwdiv@divisor+1
 10036  05BF  2607  3180         	fcall	___lwdiv
 10037  05C1  0871               	movf	?___lwdiv,w
 10038  05C2  00AB               	movwf	sprintf@idx
 10039  05C3  300F               	movlw	15
 10040  05C4  05AB               	andwf	sprintf@idx,f
 10041                           
 10042                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10043  05C5  082B               	movf	sprintf@idx,w
 10044  05C6  3E7C               	addlw	low (STR_31| (0+32768))
 10045  05C7  0084               	movwf	4
 10046  05C8  3090               	movlw	high (STR_31| (0+32768))
 10047  05C9  1803               	skipnc
 10048  05CA  3E01               	addlw	1
 10049  05CB  0085               	movwf	5
 10050  05CC  0800               	movf	0,w	;code access
 10051  05CD                     L5:	
 10052  05CD  00B9               	movwf	sprintf@c
 10053                           
 10054                           ;doprnt.c: 1508: }
 10055                           ;doprnt.c: 1510: break;
 10056  05CE  2DD7               	goto	l3649
 10057  05CF                     l3647:	
 10058  05CF  0834               	movf	sprintf@flag,w
 10059  05D0  3980               	andlw	128
 10060                           
 10061                           ; Switch size 1, requested type "space"
 10062                           ; Number of cases is 2, Range of values is 0 to 128
 10063                           ; switch strategies available:
 10064                           ; Name         Instructions Cycles
 10065                           ; simple_byte            7     4 (average)
 10066                           ; jumptable            260     6 (fixed)
 10067                           ;	Chosen strategy is simple_byte
 10068  05D1  1903               	skipnz
 10069  05D2  2D9D               	goto	l3637
 10070  05D3  3A80               	xorlw	128	; case 128
 10071  05D4  1903               	skipnz
 10072  05D5  2DB5               	goto	l3639
 10073  05D6  2DD7               	goto	l3649
 10074  05D7                     l3649:	
 10075                           
 10076                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10077  05D7  0836               	movf	sprintf@sp,w
 10078  05D8  0086               	movwf	6
 10079  05D9  0187               	clrf	7
 10080  05DA  0839               	movf	sprintf@c,w
 10081  05DB                     L6:	
 10082  05DB  0081               	movwf	1
 10083  05DC  0AB6               	incf	sprintf@sp,f
 10084  05DD                     l3653:	
 10085  05DD  03B3               	decf	sprintf@prec,f
 10086  05DE  0F33               	incfsz	sprintf@prec,w
 10087  05DF  2DCF               	goto	l3647
 10088                           
 10089                           ;doprnt.c: 1525: }
 10090                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 10091  05E0  1DB4               	btfss	sprintf@flag,3
 10092  05E1  2BDE               	goto	l3663
 10093  05E2  0838               	movf	sprintf@width+1,w
 10094  05E3  3A80               	xorlw	128
 10095  05E4  00A7               	movwf	??_sprintf
 10096  05E5  3080               	movlw	128
 10097  05E6  0227               	subwf	??_sprintf,w
 10098  05E7  1D03               	skipz
 10099  05E8  2DEB               	goto	u3055
 10100  05E9  3001               	movlw	1
 10101  05EA  0237               	subwf	sprintf@width,w
 10102  05EB                     u3055:	
 10103  05EB  1C03               	skipc
 10104  05EC  2BDE               	goto	l3663
 10105  05ED                     l3657:	
 10106                           
 10107                           ;doprnt.c: 1530: ((*sp++ = (' ')));
 10108  05ED  0020               	movlb	0	; select bank0
 10109  05EE  0836               	movf	sprintf@sp,w
 10110                           
 10111                           ;doprnt.c: 1531: while(--width);
 10112  05EF  2777  3180         	fcall	PL10	;call to abstracted procedure
 10113  05F1  1903               	btfsc	3,2
 10114  05F2  2BDE               	goto	l3663
 10115  05F3  2DED               	goto	l3657
 10116  05F4                     l3665:	
 10117                           
 10118                           ;doprnt.c: 1538: *sp = 0;
 10119  05F4  0836               	movf	sprintf@sp,w
 10120  05F5  0086               	movwf	6
 10121  05F6  0187               	clrf	7
 10122  05F7  0181               	clrf	1
 10123  05F8  0008               	return
 10124  05F9                     __end_of_sprintf:	
 10125  05F9                     __ptext28:	
 10126 ;; *************** function _isdigit *****************
 10127 ;; Defined at:
 10128 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
 10129 ;; Parameters:    Size  Location     Type
 10130 ;;  c               1    wreg     unsigned char 
 10131 ;; Auto vars:     Size  Location     Type
 10132 ;;  c               1    2[COMMON] unsigned char 
 10133 ;; Return value:  Size  Location     Type
 10134 ;;		None               void
 10135 ;; Registers used:
 10136 ;;		wreg, status,2, status,0
 10137 ;; Tracked objects:
 10138 ;;		On entry : 1F/0
 10139 ;;		On exit  : 1F/0
 10140 ;;		Unchanged: 1F/0
 10141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;Total ram usage:        2 bytes
 10147 ;; Hardware stack levels used:    1
 10148 ;; Hardware stack levels required when called:    5
 10149 ;; This function calls:
 10150 ;;		Nothing
 10151 ;; This function is called by:
 10152 ;;		_sprintf
 10153 ;; This function uses a non-reentrant model
 10154 ;;
 10155                           
 10156                           
 10157                           ;psect for function _isdigit
 10158  05F9                     _isdigit:	
 10159                           
 10160                           ;incstack = 0
 10161                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 10162                           ;isdigit@c stored from wreg
 10163  05F9  00F2               	movwf	isdigit@c
 10164  05FA  303A               	movlw	58
 10165  05FB  01F1               	clrf	_isdigit$1851
 10166  05FC  0272               	subwf	isdigit@c,w
 10167  05FD  1803               	skipnc
 10168  05FE  2E05               	goto	l2465
 10169  05FF  3030               	movlw	48
 10170  0600  0272               	subwf	isdigit@c,w
 10171  0601  1C03               	skipc
 10172  0602  2E05               	goto	l2465
 10173  0603  01F1               	clrf	_isdigit$1851
 10174  0604  0AF1               	incf	_isdigit$1851,f
 10175  0605                     l2465:	
 10176  0605  0C71               	rrf	_isdigit$1851,w
 10177  0606  0008               	return
 10178  0607                     __end_of_isdigit:	
 10179  0607                     __ptext31:	
 10180 ;; *************** function ___lwdiv *****************
 10181 ;; Defined at:
 10182 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
 10183 ;; Parameters:    Size  Location     Type
 10184 ;;  divisor         2    1[COMMON] unsigned int 
 10185 ;;  dividend        2    3[COMMON] unsigned int 
 10186 ;; Auto vars:     Size  Location     Type
 10187 ;;  quotient        2    5[COMMON] unsigned int 
 10188 ;;  counter         1    7[COMMON] unsigned char 
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  2    1[COMMON] unsigned int 
 10191 ;; Registers used:
 10192 ;;		wreg, status,2, status,0
 10193 ;; Tracked objects:
 10194 ;;		On entry : 1F/0
 10195 ;;		On exit  : 1F/0
 10196 ;;		Unchanged: 1F/0
 10197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10198 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10199 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10201 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;Total ram usage:        7 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    5
 10205 ;; This function calls:
 10206 ;;		Nothing
 10207 ;; This function is called by:
 10208 ;;		_sprintf
 10209 ;; This function uses a non-reentrant model
 10210 ;;
 10211                           
 10212                           
 10213                           ;psect for function ___lwdiv
 10214  0607                     ___lwdiv:	
 10215                           
 10216                           ;incstack = 0
 10217                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10218  0607  01F5               	clrf	___lwdiv@quotient
 10219  0608  01F6               	clrf	___lwdiv@quotient+1
 10220  0609  0871               	movf	___lwdiv@divisor,w
 10221  060A  0472               	iorwf	___lwdiv@divisor+1,w
 10222  060B  1903               	btfsc	3,2
 10223  060C  2E27               	goto	l2521
 10224  060D  01F7               	clrf	___lwdiv@counter
 10225  060E                     L9:	
 10226  060E  0AF7               	incf	___lwdiv@counter,f
 10227  060F  1BF2               	btfsc	___lwdiv@divisor+1,7
 10228  0610  2E14               	goto	l2509
 10229  0611  35F1               	lslf	___lwdiv@divisor,f
 10230  0612  0DF2               	rlf	___lwdiv@divisor+1,f
 10231  0613  2E0E               	goto	L9
 10232  0614                     l2509:	
 10233  0614  35F5               	lslf	___lwdiv@quotient,f
 10234  0615  0DF6               	rlf	___lwdiv@quotient+1,f
 10235  0616  0872               	movf	___lwdiv@divisor+1,w
 10236  0617  0274               	subwf	___lwdiv@dividend+1,w
 10237  0618  1D03               	skipz
 10238  0619  2E1C               	goto	u1465
 10239  061A  0871               	movf	___lwdiv@divisor,w
 10240  061B  0273               	subwf	___lwdiv@dividend,w
 10241  061C                     u1465:	
 10242  061C  1C03               	skipc
 10243  061D  2E23               	goto	l2517
 10244  061E  0871               	movf	___lwdiv@divisor,w
 10245  061F  02F3               	subwf	___lwdiv@dividend,f
 10246  0620  0872               	movf	___lwdiv@divisor+1,w
 10247  0621  3BF4               	subwfb	___lwdiv@dividend+1,f
 10248  0622  1475               	bsf	___lwdiv@quotient,0
 10249  0623                     l2517:	
 10250  0623  36F2               	lsrf	___lwdiv@divisor+1,f
 10251  0624  0CF1               	rrf	___lwdiv@divisor,f
 10252  0625  0BF7               	decfsz	___lwdiv@counter,f
 10253  0626  2E14               	goto	l2509
 10254  0627                     l2521:	
 10255  0627  0876               	movf	___lwdiv@quotient+1,w
 10256  0628  00F2               	movwf	?___lwdiv+1
 10257  0629  0875               	movf	___lwdiv@quotient,w
 10258  062A  00F1               	movwf	?___lwdiv
 10259  062B  0008               	return
 10260  062C                     __end_of___lwdiv:	
 10261  062C                     __ptext6:	
 10262 ;; *************** function _WiFly_SendCMD *****************
 10263 ;; Defined at:
 10264 ;;		line 133 in file "mcc_generated_files/WiFly.c"
 10265 ;; Parameters:    Size  Location     Type
 10266 ;;  cmd             2    4[BANK0 ] PTR const unsigned char 
 10267 ;;		 -> STR_10(18), STR_7(16), STR_6(21), 
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;		None
 10270 ;; Return value:  Size  Location     Type
 10271 ;;                  1    wreg      void 
 10272 ;; Registers used:
 10273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10274 ;; Tracked objects:
 10275 ;;		On entry : 1F/0
 10276 ;;		On exit  : 1F/0
 10277 ;;		Unchanged: 0/0
 10278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10279 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10282 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;Total ram usage:        2 bytes
 10284 ;; Hardware stack levels used:    1
 10285 ;; Hardware stack levels required when called:    9
 10286 ;; This function calls:
 10287 ;;		_WiFly_CheckInCMD
 10288 ;;		_WiFly_CheckRecv
 10289 ;;		_WiFly_SendString
 10290 ;; This function is called by:
 10291 ;;		_WiFly_FactoryReset
 10292 ;;		_WiFly_Example_InitializeAsClient
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           
 10297                           ;psect for function _WiFly_SendCMD
 10298  062C                     _WiFly_SendCMD:	
 10299                           
 10300                           ;WiFly.c: 135: WiFly_CheckInCMD();
 10301                           
 10302                           ;incstack = 0
 10303                           ; Regs used in _WiFly_SendCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10304  062C  2320  3180         	fcall	_WiFly_CheckInCMD
 10305                           
 10306                           ;WiFly.c: 136: WiFly_SendString(cmd);
 10307  062E  0020               	movlb	0	; select bank0
 10308  062F  0825               	movf	WiFly_SendCMD@cmd+1,w
 10309  0630  00F6               	movwf	WiFly_SendString@sendString+1
 10310  0631  0824               	movf	WiFly_SendCMD@cmd,w
 10311  0632  00F5               	movwf	WiFly_SendString@sendString
 10312  0633  2638  3180         	fcall	_WiFly_SendString
 10313                           
 10314                           ;WiFly.c: 137: WiFly_CheckRecv(aokStr);
 10315  0635  27BA  3180         	fcall	PL26	;call to abstracted procedure
 10316  0637  2E41               	ljmp	l3369
 10317  0638                     __end_of_WiFly_SendCMD:	
 10318  0638                     __ptext37:	
 10319 ;; *************** function _WiFly_SendString *****************
 10320 ;; Defined at:
 10321 ;;		line 67 in file "mcc_generated_files/WiFly.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;  sendString      2    5[COMMON] PTR const unsigned char 
 10324 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), STR_19(387), 
 10325 ;;		 -> STR_17(9), STR_15(14), STR_11(21), STR_10(18), 
 10326 ;;		 -> STR_7(16), STR_6(21), STR_5(16), STR_4(7), 
 10327 ;;		 -> STR_3(9), STR_2(7), 
 10328 ;; Auto vars:     Size  Location     Type
 10329 ;;		None
 10330 ;; Return value:  Size  Location     Type
 10331 ;;                  1    wreg      void 
 10332 ;; Registers used:
 10333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10334 ;; Tracked objects:
 10335 ;;		On entry : 10/0
 10336 ;;		On exit  : 10/0
 10337 ;;		Unchanged: 0/0
 10338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10339 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;Total ram usage:        2 bytes
 10344 ;; Hardware stack levels used:    1
 10345 ;; Hardware stack levels required when called:    7
 10346 ;; This function calls:
 10347 ;;		_Clear_RX_Buffer
 10348 ;;		_WiFly_Send
 10349 ;; This function is called by:
 10350 ;;		_WiFly_SendCMD
 10351 ;;		_WiFly_RebootCMD
 10352 ;;		_WiFly_SaveConfig
 10353 ;;		_WiFly_FactoryReset
 10354 ;;		_WiFly_Example_InitializeAsClient
 10355 ;;		_send_message
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           
 10360                           ;psect for function _WiFly_SendString
 10361  0638                     _WiFly_SendString:	
 10362  0638                     l3391:	
 10363                           ;incstack = 0
 10364                           ; Regs used in _WiFly_SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10365                           
 10366                           
 10367                           ;WiFly.c: 68: Clear_RX_Buffer();
 10368  0638  2250  3180         	fcall	_Clear_RX_Buffer
 10369                           
 10370                           ;WiFly.c: 70: Clear_RX_Buffer();
 10371  063A  2250  3180         	fcall	_Clear_RX_Buffer
 10372                           
 10373                           ;WiFly.c: 71: WiFly_Send(sendString);
 10374  063C  0876               	movf	WiFly_SendString@sendString+1,w
 10375  063D  00F3               	movwf	WiFly_Send@command+1
 10376  063E  0875               	movf	WiFly_SendString@sendString,w
 10377  063F  00F2               	movwf	WiFly_Send@command
 10378  0640  2E77               	ljmp	l2425
 10379  0641                     __end_of_WiFly_SendString:	
 10380  0641                     __ptext35:	
 10381 ;; *************** function _WiFly_CheckRecv *****************
 10382 ;; Defined at:
 10383 ;;		line 81 in file "mcc_generated_files/WiFly.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;  chkString       2    6[COMMON] PTR const unsigned char 
 10386 ;;		 -> openStr(5), STR_12(6), hardRebootStr(6), softRebootStr(7), 
 10387 ;;		 -> aokStr(4), endStr(5), cmdStr(4), 
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  i               2    2[BANK0 ] unsigned int 
 10390 ;;  length          2    0[BANK0 ] unsigned int 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;                  1    wreg      void 
 10393 ;; Registers used:
 10394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : 10/1
 10397 ;;		On exit  : 1F/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:        7 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    6
 10407 ;; This function calls:
 10408 ;;		_EUSART_Read
 10409 ;;		_EUSART_is_rx_ready
 10410 ;;		_strlen
 10411 ;; This function is called by:
 10412 ;;		_WiFly_EnterCMDMode
 10413 ;;		_WiFly_SendCMD_SingleArg
 10414 ;;		_WiFly_SendCMD
 10415 ;;		_WiFly_RebootCMD
 10416 ;;		_WiFly_FactoryReset
 10417 ;;		_WiFly_Example_InitializeAsClient
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           
 10422                           ;psect for function _WiFly_CheckRecv
 10423  0641                     _WiFly_CheckRecv:	
 10424  0641                     l3369:	
 10425                           ;incstack = 0
 10426                           ; Regs used in _WiFly_CheckRecv: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10427                           
 10428                           
 10429                           ;WiFly.c: 82: size_t length = strlen(chkString);
 10430  0641  0877               	movf	WiFly_CheckRecv@chkString+1,w
 10431  0642  00F2               	movwf	strlen@s+1
 10432  0643  0876               	movf	WiFly_CheckRecv@chkString,w
 10433  0644  00F1               	movwf	strlen@s
 10434  0645  22D3  3180         	fcall	_strlen
 10435  0647  0872               	movf	?_strlen+1,w
 10436  0648  0020               	movlb	0	; select bank0
 10437  0649  00A1               	movwf	WiFly_CheckRecv@length+1
 10438  064A  0871               	movf	?_strlen,w
 10439  064B  00A0               	movwf	WiFly_CheckRecv@length
 10440                           
 10441                           ;WiFly.c: 83: size_t i = 0;
 10442  064C  01A2               	clrf	WiFly_CheckRecv@i
 10443  064D  01A3               	clrf	WiFly_CheckRecv@i+1
 10444                           
 10445                           ;WiFly.c: 85: while (i < length) {
 10446  064E  2E6D               	goto	l3381
 10447  064F                     l3373:	
 10448                           
 10449                           ;WiFly.c: 87: if (uart[WiFly].Read() == chkString[i]) {
 10450  064F  0876               	movf	WiFly_CheckRecv@chkString,w
 10451  0650  0020               	movlb	0	; select bank0
 10452  0651  0722               	addwf	WiFly_CheckRecv@i,w
 10453  0652  0084               	movwf	4
 10454  0653  0877               	movf	WiFly_CheckRecv@chkString+1,w
 10455  0654  3D23               	addwfc	WiFly_CheckRecv@i+1,w
 10456  0655  0085               	movwf	5
 10457  0656  0800               	movf	0,w	;code access
 10458  0657  00F8               	movwf	??_WiFly_CheckRecv
 10459  0658  27AE               	fcall	PL22	;call to abstracted procedure
 10460  0659  008A               	movwf	10
 10461  065A  3F00               	moviw [0]fsr0
 10462  065B  000A               	callw
 10463  065C  3180               	pagesel	$
 10464  065D  0678               	xorwf	??_WiFly_CheckRecv,w
 10465  065E  1D03               	skipz
 10466  065F  2E65               	goto	l3377
 10467                           
 10468                           ;WiFly.c: 88: i++;
 10469  0660  0020               	movlb	0	; select bank0
 10470  0661  0AA2               	incf	WiFly_CheckRecv@i,f
 10471  0662  1903               	skipnz
 10472  0663  0AA3               	incf	WiFly_CheckRecv@i+1,f
 10473                           
 10474                           ;WiFly.c: 89: } else {
 10475  0664  2E68               	goto	l3379
 10476  0665                     l3377:	
 10477                           
 10478                           ;WiFly.c: 90: i = 0;
 10479  0665  0020               	movlb	0	; select bank0
 10480  0666  01A2               	clrf	WiFly_CheckRecv@i
 10481  0667  01A3               	clrf	WiFly_CheckRecv@i+1
 10482  0668                     l3379:	
 10483  0668  2248  3180         	fcall	_EUSART_is_rx_ready
 10484  066A  3A00               	xorlw	0
 10485  066B  1D03               	skipz
 10486  066C  2E4F               	goto	l3373
 10487  066D                     l3381:	
 10488  066D  0020               	movlb	0	; select bank0
 10489  066E  0821               	movf	WiFly_CheckRecv@length+1,w
 10490  066F  0223               	subwf	WiFly_CheckRecv@i+1,w
 10491  0670  1D03               	skipz
 10492  0671  2E74               	goto	u2575
 10493  0672  0820               	movf	WiFly_CheckRecv@length,w
 10494  0673  0222               	subwf	WiFly_CheckRecv@i,w
 10495  0674                     u2575:	
 10496  0674  1803               	btfsc	3,0
 10497  0675  0008               	return
 10498  0676  2E68               	goto	l3379
 10499  0677                     __end_of_WiFly_CheckRecv:	
 10500  0677                     __ptext38:	
 10501 ;; *************** function _WiFly_Send *****************
 10502 ;; Defined at:
 10503 ;;		line 50 in file "mcc_generated_files/WiFly.c"
 10504 ;; Parameters:    Size  Location     Type
 10505 ;;  command         2    2[COMMON] PTR unsigned char 
 10506 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), STR_19(387), 
 10507 ;;		 -> STR_17(9), STR_15(14), STR_11(21), STR_10(18), 
 10508 ;;		 -> STR_7(16), STR_6(21), STR_5(16), STR_4(7), 
 10509 ;;		 -> STR_3(9), WiFly_SendCMD_DoubleArg@txBuffer(40), WiFly_SendCMD_SingleArg@txBuffer(40), STR_2(7), 
 10510 ;;		 -> STR_1(4), 
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;		None
 10513 ;; Return value:  Size  Location     Type
 10514 ;;                  1    wreg      void 
 10515 ;; Registers used:
 10516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10517 ;; Tracked objects:
 10518 ;;		On entry : 1E/0
 10519 ;;		On exit  : 10/0
 10520 ;;		Unchanged: 0/0
 10521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10522 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;Total ram usage:        3 bytes
 10527 ;; Hardware stack levels used:    1
 10528 ;; Hardware stack levels required when called:    6
 10529 ;; This function calls:
 10530 ;;		_EUSART_Write
 10531 ;; This function is called by:
 10532 ;;		_WiFly_SendString
 10533 ;;		_WiFly_EnterCMDMode
 10534 ;;		_WiFly_SendCMD_SingleArg
 10535 ;;		_WiFly_SendCMD_DoubleArg
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           
 10540                           ;psect for function _WiFly_Send
 10541  0677                     _WiFly_Send:	
 10542  0677                     l2425:	
 10543                           ;WiFly.c: 51: while (*command != '\0')
 10544                           
 10545                           ;incstack = 0
 10546                           ; Regs used in _WiFly_Send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10547                           
 10548  0677  0872               	movf	WiFly_Send@command,w
 10549  0678  0084               	movwf	4
 10550  0679  0873               	movf	WiFly_Send@command+1,w
 10551  067A  0085               	movwf	5
 10552  067B  0012               	moviw fsr0++
 10553  067C  1903               	btfsc	3,2
 10554  067D  0008               	return
 10555                           
 10556                           ;WiFly.c: 52: uart[WiFly].Write(*command++);
 10557  067E  0872               	movf	WiFly_Send@command,w
 10558  067F  0084               	movwf	4
 10559  0680  0873               	movf	WiFly_Send@command+1,w
 10560  0681  0085               	movwf	5
 10561  0682  0800               	movf	0,w	;code access
 10562  0683  00F1               	movwf	EUSART_Write@txData
 10563  0684  3055               	movlw	low ((_uart+18)| (0+32768))
 10564  0685  0084               	movwf	4
 10565  0686  3090               	movlw	high ((_uart+18)| (0+32768))
 10566  0687  0085               	movwf	5
 10567  0688  3F01               	moviw [1]fsr0
 10568  0689  008A               	movwf	10
 10569  068A  3F00               	moviw [0]fsr0
 10570  068B  000A               	callw
 10571  068C  3180               	pagesel	$
 10572  068D  0AF2               	incf	WiFly_Send@command,f
 10573  068E  1903               	skipnz
 10574  068F  0AF3               	incf	WiFly_Send@command+1,f
 10575  0690  2E77               	goto	l2425
 10576  0691                     __end_of_WiFly_Send:	
 10577  0691                     __ptext7:	
 10578 ;; *************** function _WiFly_SaveConfig *****************
 10579 ;; Defined at:
 10580 ;;		line 149 in file "mcc_generated_files/WiFly.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;		None
 10583 ;; Auto vars:     Size  Location     Type
 10584 ;;		None
 10585 ;; Return value:  Size  Location     Type
 10586 ;;                  1    wreg      void 
 10587 ;; Registers used:
 10588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10589 ;; Tracked objects:
 10590 ;;		On entry : 10/0
 10591 ;;		On exit  : 1F/1
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;Total ram usage:        0 bytes
 10599 ;; Hardware stack levels used:    1
 10600 ;; Hardware stack levels required when called:   10
 10601 ;; This function calls:
 10602 ;;		_WiFly_RebootCMD
 10603 ;;		_WiFly_SendString
 10604 ;; This function is called by:
 10605 ;;		_WiFly_FactoryReset
 10606 ;;		_WiFly_Example_InitializeAsClient
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           
 10611                           ;psect for function _WiFly_SaveConfig
 10612  0691                     _WiFly_SaveConfig:	
 10613  0691                     l3685:	
 10614                           ;incstack = 0
 10615                           ; Regs used in _WiFly_SaveConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10616                           
 10617                           
 10618                           ;WiFly.c: 151: WiFly_SendString("save\r\n");
 10619  0691  3049               	movlw	low (STR_4| (0+32768))
 10620  0692  00F5               	movwf	WiFly_SendString@sendString
 10621  0693  3091               	movlw	high (STR_4| (0+32768))
 10622  0694  00F6               	movwf	WiFly_SendString@sendString+1
 10623  0695  2638  3180         	fcall	_WiFly_SendString
 10624                           
 10625                           ;WiFly.c: 152: WiFly_RebootCMD();
 10626  0697  286E               	ljmp	l3669
 10627  0698                     __end_of_WiFly_SaveConfig:	
 10628  0698                     __ptext32:	
 10629 ;; *************** function ___bmul *****************
 10630 ;; Defined at:
 10631 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul8.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;  multiplier      1    wreg     unsigned char 
 10634 ;;  multiplicand    1    1[COMMON] unsigned char 
 10635 ;; Auto vars:     Size  Location     Type
 10636 ;;  multiplier      1    3[COMMON] unsigned char 
 10637 ;;  product         1    2[COMMON] unsigned char 
 10638 ;; Return value:  Size  Location     Type
 10639 ;;                  1    wreg      unsigned char 
 10640 ;; Registers used:
 10641 ;;		wreg, status,2, status,0
 10642 ;; Tracked objects:
 10643 ;;		On entry : 1F/0
 10644 ;;		On exit  : 1F/0
 10645 ;;		Unchanged: 1F/0
 10646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10647 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10650 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;Total ram usage:        3 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:    5
 10654 ;; This function calls:
 10655 ;;		Nothing
 10656 ;; This function is called by:
 10657 ;;		_sprintf
 10658 ;; This function uses a non-reentrant model
 10659 ;;
 10660                           
 10661                           
 10662                           ;psect for function ___bmul
 10663  0698                     ___bmul:	
 10664                           
 10665                           ;incstack = 0
 10666                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10667                           ;___bmul@multiplier stored from wreg
 10668  0698  00F3               	movwf	___bmul@multiplier
 10669  0699  01F2               	clrf	___bmul@product
 10670  069A                     l2487:	
 10671  069A  0871               	movf	___bmul@multiplicand,w
 10672  069B  1873               	btfsc	___bmul@multiplier,0
 10673  069C  07F2               	addwf	___bmul@product,f
 10674  069D  35F1               	lslf	___bmul@multiplicand,f
 10675  069E  36F3               	lsrf	___bmul@multiplier,f
 10676  069F  0873               	movf	___bmul@multiplier,w
 10677  06A0  1D03               	btfss	3,2
 10678  06A1  2E9A               	goto	l2487
 10679  06A2  0872               	movf	___bmul@product,w
 10680  06A3  0008               	return
 10681  06A4                     __end_of___bmul:	
 10682  06A4                     __ptext30:	
 10683 ;; *************** function ___lwmod *****************
 10684 ;; Defined at:
 10685 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 10686 ;; Parameters:    Size  Location     Type
 10687 ;;  divisor         2    8[COMMON] unsigned int 
 10688 ;;  dividend        2   10[COMMON] unsigned int 
 10689 ;; Auto vars:     Size  Location     Type
 10690 ;;  counter         1    0[BANK0 ] unsigned char 
 10691 ;; Return value:  Size  Location     Type
 10692 ;;                  2    8[COMMON] unsigned int 
 10693 ;; Registers used:
 10694 ;;		wreg, status,2, status,0
 10695 ;; Tracked objects:
 10696 ;;		On entry : 1F/0
 10697 ;;		On exit  : 1F/0
 10698 ;;		Unchanged: 0/0
 10699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10703 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;Total ram usage:        5 bytes
 10705 ;; Hardware stack levels used:    1
 10706 ;; Hardware stack levels required when called:    5
 10707 ;; This function calls:
 10708 ;;		Nothing
 10709 ;; This function is called by:
 10710 ;;		_sprintf
 10711 ;; This function uses a non-reentrant model
 10712 ;;
 10713                           
 10714                           
 10715                           ;psect for function ___lwmod
 10716  06A4                     ___lwmod:	
 10717                           
 10718                           ;incstack = 0
 10719                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 10720  06A4  0878               	movf	___lwmod@divisor,w
 10721  06A5  0479               	iorwf	___lwmod@divisor+1,w
 10722  06A6  1903               	btfsc	3,2
 10723  06A7  2EBF               	goto	l3409
 10724  06A8  01A0               	clrf	___lwmod@counter
 10725  06A9                     L8:	
 10726  06A9  0AA0               	incf	___lwmod@counter,f
 10727  06AA  1BF9               	btfsc	___lwmod@divisor+1,7
 10728  06AB  2EAF               	goto	l3401
 10729  06AC  35F8               	lslf	___lwmod@divisor,f
 10730  06AD  0DF9               	rlf	___lwmod@divisor+1,f
 10731  06AE  2EA9               	goto	L8
 10732  06AF                     l3401:	
 10733  06AF  0879               	movf	___lwmod@divisor+1,w
 10734  06B0  027B               	subwf	___lwmod@dividend+1,w
 10735  06B1  1D03               	skipz
 10736  06B2  2EB5               	goto	u2615
 10737  06B3  0878               	movf	___lwmod@divisor,w
 10738  06B4  027A               	subwf	___lwmod@dividend,w
 10739  06B5                     u2615:	
 10740  06B5  1C03               	skipc
 10741  06B6  2EBB               	goto	l3405
 10742  06B7  0878               	movf	___lwmod@divisor,w
 10743  06B8  02FA               	subwf	___lwmod@dividend,f
 10744  06B9  0879               	movf	___lwmod@divisor+1,w
 10745  06BA  3BFB               	subwfb	___lwmod@dividend+1,f
 10746  06BB                     l3405:	
 10747  06BB  36F9               	lsrf	___lwmod@divisor+1,f
 10748  06BC  0CF8               	rrf	___lwmod@divisor,f
 10749  06BD  0BA0               	decfsz	___lwmod@counter,f
 10750  06BE  2EAF               	goto	l3401
 10751  06BF                     l3409:	
 10752  06BF  087B               	movf	___lwmod@dividend+1,w
 10753  06C0  00F9               	movwf	?___lwmod+1
 10754  06C1  087A               	movf	___lwmod@dividend,w
 10755  06C2  00F8               	movwf	?___lwmod
 10756  06C3  0008               	return
 10757  06C4                     __end_of___lwmod:	
 10758  06C4                     __ptext29:	
 10759 ;; *************** function ___wmul *****************
 10760 ;; Defined at:
 10761 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;  multiplier      2    1[COMMON] unsigned int 
 10764 ;;  multiplicand    2    3[COMMON] unsigned int 
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;  product         2    5[COMMON] unsigned int 
 10767 ;; Return value:  Size  Location     Type
 10768 ;;                  2    1[COMMON] unsigned int 
 10769 ;; Registers used:
 10770 ;;		wreg, status,2, status,0
 10771 ;; Tracked objects:
 10772 ;;		On entry : 1F/0
 10773 ;;		On exit  : 1F/0
 10774 ;;		Unchanged: 1F/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10776 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;Total ram usage:        6 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    5
 10783 ;; This function calls:
 10784 ;;		Nothing
 10785 ;; This function is called by:
 10786 ;;		_sprintf
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           
 10791                           ;psect for function ___wmul
 10792  06C4                     ___wmul:	
 10793                           
 10794                           ;incstack = 0
 10795                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10796  06C4  01F5               	clrf	___wmul@product
 10797  06C5  01F6               	clrf	___wmul@product+1
 10798  06C6                     l2471:	
 10799  06C6  1C71               	btfss	___wmul@multiplier,0
 10800  06C7  2ECC               	goto	l2475
 10801  06C8  0873               	movf	___wmul@multiplicand,w
 10802  06C9  07F5               	addwf	___wmul@product,f
 10803  06CA  0874               	movf	___wmul@multiplicand+1,w
 10804  06CB  3DF6               	addwfc	___wmul@product+1,f
 10805  06CC                     l2475:	
 10806  06CC  35F3               	lslf	___wmul@multiplicand,f
 10807  06CD  0DF4               	rlf	___wmul@multiplicand+1,f
 10808  06CE  36F2               	lsrf	___wmul@multiplier+1,f
 10809  06CF  0CF1               	rrf	___wmul@multiplier,f
 10810  06D0  0871               	movf	___wmul@multiplier,w
 10811  06D1  0472               	iorwf	___wmul@multiplier+1,w
 10812  06D2  1D03               	btfss	3,2
 10813  06D3  2EC6               	goto	l2471
 10814  06D4  0876               	movf	___wmul@product+1,w
 10815  06D5  00F2               	movwf	?___wmul+1
 10816  06D6  0875               	movf	___wmul@product,w
 10817  06D7  00F1               	movwf	?___wmul
 10818  06D8  0008               	return
 10819  06D9                     __end_of___wmul:	
 10820  06D9                     __ptext2:	
 10821 ;; *************** function _connect_network *****************
 10822 ;; Defined at:
 10823 ;;		line 267 in file "main.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;  ssid            2    0[BANK1 ] PTR const unsigned char 
 10826 ;;		 -> STR_28(4), 
 10827 ;;  passwd          2    2[BANK1 ] PTR const unsigned char 
 10828 ;;		 -> STR_29(10), 
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;		None
 10831 ;; Return value:  Size  Location     Type
 10832 ;;                  1    wreg      void 
 10833 ;; Registers used:
 10834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10835 ;; Tracked objects:
 10836 ;;		On entry : 1F/1
 10837 ;;		On exit  : 1F/0
 10838 ;;		Unchanged: 0/0
 10839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10840 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;Total ram usage:        4 bytes
 10845 ;; Hardware stack levels used:    1
 10846 ;; Hardware stack levels required when called:   13
 10847 ;; This function calls:
 10848 ;;		_WiFly_Example_InitializeAsClient
 10849 ;; This function is called by:
 10850 ;;		_main
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function _connect_network
 10856  06D9                     _connect_network:	
 10857                           
 10858                           ;main.c: 269: WiFly_Example_InitializeAsClient(ssid, passwd);
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _connect_network: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10862  06D9  0853               	movf	(connect_network@ssid+1)^(0+128),w
 10863  06DA  0020               	movlb	0	; select bank0
 10864  06DB  00E7               	movwf	WiFly_Example_InitializeAsClient@ssid+1
 10865  06DC  0021               	movlb	1	; select bank1
 10866  06DD  0852               	movf	connect_network@ssid^(0+128),w
 10867  06DE  0020               	movlb	0	; select bank0
 10868  06DF  00E6               	movwf	WiFly_Example_InitializeAsClient@ssid
 10869  06E0  0021               	movlb	1	; select bank1
 10870  06E1  0855               	movf	(connect_network@passwd+1)^(0+128),w
 10871  06E2  0020               	movlb	0	; select bank0
 10872  06E3  00E9               	movwf	WiFly_Example_InitializeAsClient@password+1
 10873  06E4  0021               	movlb	1	; select bank1
 10874  06E5  0854               	movf	connect_network@passwd^(0+128),w
 10875  06E6  0020               	movlb	0	; select bank0
 10876  06E7  00E8               	movwf	WiFly_Example_InitializeAsClient@password
 10877  06E8  2882               	ljmp	l151
 10878  06E9                     __end_of_connect_network:	
 10879  06E9                     __ptext1:	
 10880 ;; *************** function _eeprom_read *****************
 10881 ;; Defined at:
 10882 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic\eeread.c"
 10883 ;; Parameters:    Size  Location     Type
 10884 ;;  addr            1    wreg     unsigned char 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;  addr            1    1[COMMON] unsigned char 
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  1    wreg      unsigned char 
 10889 ;; Registers used:
 10890 ;;		wreg
 10891 ;; Tracked objects:
 10892 ;;		On entry : 1F/5
 10893 ;;		On exit  : 1F/10
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;Total ram usage:        1 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:    5
 10903 ;; This function calls:
 10904 ;;		Nothing
 10905 ;; This function is called by:
 10906 ;;		_main
 10907 ;; This function uses a non-reentrant model
 10908 ;;
 10909                           
 10910                           
 10911                           ;psect for function _eeprom_read
 10912  06E9                     _eeprom_read:	
 10913                           
 10914                           ;incstack = 0
 10915                           ; Regs used in _eeprom_read: [wreg]
 10916                           ;eeprom_read@addr stored from wreg
 10917  06E9  00F1               	movwf	eeprom_read@addr
 10918  06EA  2EEC               	goto	l893
 10919  06EB                     u2341:	
 10920  06EB  0025               	movlb	5	; select bank5
 10921  06EC                     l893:	
 10922  06EC  0064               	clrwdt	;# 
 10923  06ED  0030               	movlb	16	; select bank16
 10924  06EE  189E               	btfsc	30,1	;volsfr
 10925  06EF  2EEB               	goto	u2341
 10926  06F0  171E               	bsf	30,6	;volsfr
 10927  06F1  0871               	movf	eeprom_read@addr,w
 10928  06F2  009A               	movwf	26	;volatile
 10929  06F3  3070               	movlw	112
 10930  06F4  009B               	movwf	27	;volatile
 10931  06F5  141E               	bsf	30,0	;volsfr
 10932  06F6  081C               	movf	28,w	;volatile
 10933  06F7  0008               	return
 10934  06F8                     __end_of_eeprom_read:	
 10935  06F8                     __ptext52:	
 10936 ;; *************** function _ClearIndicators *****************
 10937 ;; Defined at:
 10938 ;;		line 72 in file "main.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;		None
 10941 ;; Auto vars:     Size  Location     Type
 10942 ;;		None
 10943 ;; Return value:  Size  Location     Type
 10944 ;;                  1    wreg      void 
 10945 ;; Registers used:
 10946 ;;		status,2
 10947 ;; Tracked objects:
 10948 ;;		On entry : 1F/5
 10949 ;;		On exit  : 1F/1
 10950 ;;		Unchanged: 0/0
 10951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;Total ram usage:        0 bytes
 10957 ;; Hardware stack levels used:    1
 10958 ;; Hardware stack levels required when called:    5
 10959 ;; This function calls:
 10960 ;;		Nothing
 10961 ;; This function is called by:
 10962 ;;		_goto_mode
 10963 ;; This function uses a non-reentrant model
 10964 ;;
 10965                           
 10966                           
 10967                           ;psect for function _ClearIndicators
 10968  06F8                     _ClearIndicators:	
 10969  06F8                     l3687:	
 10970                           ;incstack = 0
 10971                           ; Regs used in _ClearIndicators: [status,2]
 10972                           
 10973                           
 10974                           ;main.c: 73: indStatus = 0;
 10975  06F8  0021               	movlb	1	; select bank1
 10976  06F9  01CE               	clrf	_indStatus^(0+128)
 10977  06FA  0008               	return
 10978  06FB                     __end_of_ClearIndicators:	
 10979  06FB                     __ptext50:	
 10980 ;; *************** function _TMR2_Start *****************
 10981 ;; Defined at:
 10982 ;;		line 110 in file "mcc_generated_files/tmr2.c"
 10983 ;; Parameters:    Size  Location     Type
 10984 ;;		None
 10985 ;; Auto vars:     Size  Location     Type
 10986 ;;		None
 10987 ;; Return value:  Size  Location     Type
 10988 ;;                  1    wreg      void 
 10989 ;; Registers used:
 10990 ;;		None
 10991 ;; Tracked objects:
 10992 ;;		On entry : 0/1
 10993 ;;		On exit  : 1F/5
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;Total ram usage:        0 bytes
 11001 ;; Hardware stack levels used:    1
 11002 ;; Hardware stack levels required when called:    5
 11003 ;; This function calls:
 11004 ;;		Nothing
 11005 ;; This function is called by:
 11006 ;;		_TMR2_Initialize
 11007 ;;		_TMR2_StartTimer
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           
 11012                           ;psect for function _TMR2_Start
 11013  06FB                     _TMR2_Start:	
 11014  06FB                     l3673:	
 11015                           ;incstack = 0
 11016                           ; Regs used in _TMR2_Start: []
 11017                           
 11018                           
 11019                           ;tmr2.c: 113: T2CONbits.TMR2ON = 1;
 11020  06FB  0025               	movlb	5	; select bank5
 11021  06FC  178E               	bsf	14,7	;volatile
 11022  06FD  0008               	return
 11023  06FE                     __end_of_TMR2_Start:	
 11024  06FE                     __ptext48:	
 11025 ;; *************** function _TMR2_Stop *****************
 11026 ;; Defined at:
 11027 ;;		line 121 in file "mcc_generated_files/tmr2.c"
 11028 ;; Parameters:    Size  Location     Type
 11029 ;;		None
 11030 ;; Auto vars:     Size  Location     Type
 11031 ;;		None
 11032 ;; Return value:  Size  Location     Type
 11033 ;;                  1    wreg      void 
 11034 ;; Registers used:
 11035 ;;		None
 11036 ;; Tracked objects:
 11037 ;;		On entry : 0/1
 11038 ;;		On exit  : 1F/5
 11039 ;;		Unchanged: 0/0
 11040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;Total ram usage:        0 bytes
 11046 ;; Hardware stack levels used:    1
 11047 ;; Hardware stack levels required when called:    5
 11048 ;; This function calls:
 11049 ;;		Nothing
 11050 ;; This function is called by:
 11051 ;;		_TMR2_StopTimer
 11052 ;; This function uses a non-reentrant model
 11053 ;;
 11054                           
 11055                           
 11056                           ;psect for function _TMR2_Stop
 11057  06FE                     _TMR2_Stop:	
 11058  06FE                     l3675:	
 11059                           ;incstack = 0
 11060                           ; Regs used in _TMR2_Stop: []
 11061                           
 11062                           
 11063                           ;tmr2.c: 124: T2CONbits.TMR2ON = 0;
 11064  06FE  0025               	movlb	5	; select bank5
 11065  06FF  138E               	bcf	14,7	;volatile
 11066  0700  0008               	return
 11067  0701                     __end_of_TMR2_Stop:	
 11068  0701                     __ptext44:	
 11069 ;; *************** function _TMR4_Stop *****************
 11070 ;; Defined at:
 11071 ;;		line 121 in file "mcc_generated_files/tmr4.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;		None
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;		None
 11076 ;; Return value:  Size  Location     Type
 11077 ;;                  1    wreg      void 
 11078 ;; Registers used:
 11079 ;;		None
 11080 ;; Tracked objects:
 11081 ;;		On entry : 1A/5
 11082 ;;		On exit  : 1F/5
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;Total ram usage:        0 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; Hardware stack levels required when called:    5
 11092 ;; This function calls:
 11093 ;;		Nothing
 11094 ;; This function is called by:
 11095 ;;		_TMR4_StopTimer
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           
 11100                           ;psect for function _TMR4_Stop
 11101  0701                     _TMR4_Stop:	
 11102  0701                     l3679:	
 11103                           ;incstack = 0
 11104                           ; Regs used in _TMR4_Stop: []
 11105                           
 11106                           
 11107                           ;tmr4.c: 124: T4CONbits.TMR4ON = 0;
 11108  0701  0025               	movlb	5	; select bank5
 11109  0702  1394               	bcf	20,7	;volatile
 11110  0703  0008               	return
 11111  0704                     __end_of_TMR4_Stop:	
 11112  0704                     __ptext18:	
 11113 ;; *************** function _EUSART_Initialize *****************
 11114 ;; Defined at:
 11115 ;;		line 75 in file "mcc_generated_files/eusart.c"
 11116 ;; Parameters:    Size  Location     Type
 11117 ;;		None
 11118 ;; Auto vars:     Size  Location     Type
 11119 ;;		None
 11120 ;; Return value:  Size  Location     Type
 11121 ;;                  1    wreg      void 
 11122 ;; Registers used:
 11123 ;;		wreg, status,2, status,0, pclath, cstack
 11124 ;; Tracked objects:
 11125 ;;		On entry : 1F/5
 11126 ;;		On exit  : 1F/E
 11127 ;;		Unchanged: 0/0
 11128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11133 ;;Total ram usage:        0 bytes
 11134 ;; Hardware stack levels used:    1
 11135 ;; Hardware stack levels required when called:    6
 11136 ;; This function calls:
 11137 ;;		_EUSART_SetRxInterruptHandler
 11138 ;;		_EUSART_SetTxInterruptHandler
 11139 ;; This function is called by:
 11140 ;;		_SYSTEM_Initialize
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144                           
 11145                           ;psect for function _EUSART_Initialize
 11146  0704                     _EUSART_Initialize:	
 11147  0704                     l3049:	
 11148                           ;incstack = 0
 11149                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11150                           
 11151                           
 11152                           ;eusart.c: 78: PIE3bits.RCIE = 0;
 11153  0704  002E               	movlb	14	; select bank14
 11154  0705  1299               	bcf	25,5	;volatile
 11155                           
 11156                           ;eusart.c: 79: PIE3bits.TXIE = 0;
 11157  0706  1219               	bcf	25,4	;volatile
 11158                           
 11159                           ;eusart.c: 81: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
 11160  0707  3096               	movlw	low _EUSART_Transmit_ISR
 11161  0708  00F1               	movwf	EUSART_SetTxInterruptHandler@handler
 11162  0709  300F               	movlw	high _EUSART_Transmit_ISR
 11163  070A  00F2               	movwf	EUSART_SetTxInterruptHandler@handler+1
 11164  070B  272B  3180         	fcall	_EUSART_SetTxInterruptHandler
 11165                           
 11166                           ;eusart.c: 82: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 11167  070D  3080               	movlw	low _EUSART_Receive_ISR
 11168  070E  00F1               	movwf	EUSART_SetRxInterruptHandler@handler
 11169  070F  300F               	movlw	high _EUSART_Receive_ISR
 11170  0710  00F2               	movwf	EUSART_SetRxInterruptHandler@handler+1
 11171  0711  2744               	fcall	_EUSART_SetRxInterruptHandler
 11172                           
 11173                           ;eusart.c: 87: BAUD1CON = 0x08;
 11174  0712  3008               	movlw	8
 11175  0713  0022               	movlb	2	; select bank2
 11176  0714  009F               	movwf	31	;volatile
 11177                           
 11178                           ;eusart.c: 90: RC1STA = 0x90;
 11179  0715  3090               	movlw	144
 11180  0716  009D               	movwf	29	;volatile
 11181                           
 11182                           ;eusart.c: 93: TX1STA = 0x24;
 11183  0717  3024               	movlw	36
 11184  0718  009E               	movwf	30	;volatile
 11185                           
 11186                           ;eusart.c: 96: SP1BRGL = 0xA0;
 11187  0719  30A0               	movlw	160
 11188  071A  009B               	movwf	27	;volatile
 11189                           
 11190                           ;eusart.c: 99: SP1BRGH = 0x01;
 11191  071B  3001               	movlw	1
 11192  071C  009C               	movwf	28	;volatile
 11193                           
 11194                           ;eusart.c: 103: eusartTxHead = 0;
 11195  071D  01FC               	clrf	_eusartTxHead	;volatile
 11196                           
 11197                           ;eusart.c: 104: eusartTxTail = 0;
 11198  071E  0020               	movlb	0	; select bank0
 11199  071F  01EF               	clrf	_eusartTxTail	;volatile
 11200                           
 11201                           ;eusart.c: 105: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 11202  0720  3008               	movlw	8
 11203  0721  0021               	movlb	1	; select bank1
 11204  0722  00EA               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 11205                           
 11206                           ;eusart.c: 107: eusartRxHead = 0;
 11207  0723  0020               	movlb	0	; select bank0
 11208  0724  01EE               	clrf	_eusartRxHead	;volatile
 11209                           
 11210                           ;eusart.c: 108: eusartRxTail = 0;
 11211  0725  01ED               	clrf	_eusartRxTail	;volatile
 11212                           
 11213                           ;eusart.c: 109: eusartRxCount = 0;
 11214  0726  0021               	movlb	1	; select bank1
 11215  0727  01D1               	clrf	_eusartRxCount^(0+128)	;volatile
 11216                           
 11217                           ;eusart.c: 112: PIE3bits.RCIE = 1;
 11218  0728  002E               	movlb	14	; select bank14
 11219  0729  1699               	bsf	25,5	;volatile
 11220  072A  0008               	return
 11221  072B                     __end_of_EUSART_Initialize:	
 11222  072B                     __ptext19:	
 11223 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 11224 ;; Defined at:
 11225 ;;		line 212 in file "mcc_generated_files/eusart.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;  handler         2    1[COMMON] PTR void 
 11228 ;;		 -> EUSART_Transmit_ISR(1), 
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;		None
 11231 ;; Return value:  Size  Location     Type
 11232 ;;                  1    wreg      void 
 11233 ;; Registers used:
 11234 ;;		wreg
 11235 ;; Tracked objects:
 11236 ;;		On entry : 1F/E
 11237 ;;		On exit  : 1F/1
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11240 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;Total ram usage:        2 bytes
 11245 ;; Hardware stack levels used:    1
 11246 ;; Hardware stack levels required when called:    5
 11247 ;; This function calls:
 11248 ;;		Nothing
 11249 ;; This function is called by:
 11250 ;;		_EUSART_Initialize
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           
 11255                           ;psect for function _EUSART_SetTxInterruptHandler
 11256  072B                     _EUSART_SetTxInterruptHandler:	
 11257                           
 11258                           ;eusart.c: 213: EUSART_TxDefaultInterruptHandler = handler;
 11259                           
 11260                           ;incstack = 0
 11261                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 11262  072B  0872               	movf	EUSART_SetTxInterruptHandler@handler+1,w
 11263  072C  0021               	movlb	1	; select bank1
 11264  072D  00E8               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
 11265  072E  0871               	movf	EUSART_SetTxInterruptHandler@handler,w
 11266  072F  00E7               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
 11267  0730  0008               	return
 11268  0731                     __end_of_EUSART_SetTxInterruptHandler:	
 11269  0731                     __ptext14:	
 11270 ;; *************** function _TMR2_Initialize *****************
 11271 ;; Defined at:
 11272 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;		None
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;		None
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  1    wreg      void 
 11279 ;; Registers used:
 11280 ;;		wreg, status,2, status,0, pclath, cstack
 11281 ;; Tracked objects:
 11282 ;;		On entry : 1F/5
 11283 ;;		On exit  : 1F/5
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;Total ram usage:        0 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:    6
 11293 ;; This function calls:
 11294 ;;		_TMR2_SetInterruptHandler
 11295 ;;		_TMR2_Start
 11296 ;; This function is called by:
 11297 ;;		_SYSTEM_Initialize
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function _TMR2_Initialize
 11303  0731                     _TMR2_Initialize:	
 11304                           
 11305                           ;tmr2.c: 68: T2CON = 0x7F;
 11306                           
 11307                           ;incstack = 0
 11308                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11309  0731  307F               	movlw	127
 11310  0732  008E               	movwf	14	;volatile
 11311                           
 11312                           ;tmr2.c: 71: T2CLKCON = 0x04;
 11313  0733  3004               	movlw	4
 11314  0734  0090               	movwf	16	;volatile
 11315                           
 11316                           ;tmr2.c: 74: T2HLT = 0x00;
 11317  0735  018F               	clrf	15	;volatile
 11318                           
 11319                           ;tmr2.c: 77: T2RST = 0x00;
 11320  0736  0191               	clrf	17	;volatile
 11321                           
 11322                           ;tmr2.c: 80: T2PR = 0x0E;
 11323  0737  300E               	movlw	14
 11324  0738  008D               	movwf	13	;volatile
 11325                           
 11326                           ;tmr2.c: 83: T2TMR = 0x00;
 11327  0739  018C               	clrf	12	;volatile
 11328                           
 11329                           ;tmr2.c: 86: PIR4bits.TMR2IF = 0;
 11330  073A  002E               	movlb	14	; select bank14
 11331  073B  1090               	bcf	16,1	;volatile
 11332                           
 11333                           ;tmr2.c: 89: PIE4bits.TMR2IE = 1;
 11334  073C  149A               	bsf	26,1	;volatile
 11335                           
 11336                           ;tmr2.c: 92: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 11337  073D  3002               	movlw	low _TMR2_DefaultInterruptHandler
 11338  073E  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 11339  073F  3000               	movlw	high _TMR2_DefaultInterruptHandler
 11340  0740  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 11341  0741  2341  3180         	fcall	_TMR2_SetInterruptHandler
 11342                           
 11343                           ;tmr2.c: 95: TMR2_Start();
 11344  0743  2EFB               	ljmp	l3673
 11345  0744                     __end_of_TMR2_Initialize:	
 11346  0744                     __ptext20:	
 11347 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 11348 ;; Defined at:
 11349 ;;		line 216 in file "mcc_generated_files/eusart.c"
 11350 ;; Parameters:    Size  Location     Type
 11351 ;;  handler         2    1[COMMON] PTR void 
 11352 ;;		 -> EUSART_Receive_ISR(1), 
 11353 ;; Auto vars:     Size  Location     Type
 11354 ;;		None
 11355 ;; Return value:  Size  Location     Type
 11356 ;;                  1    wreg      void 
 11357 ;; Registers used:
 11358 ;;		wreg
 11359 ;; Tracked objects:
 11360 ;;		On entry : 1F/1
 11361 ;;		On exit  : 1F/1
 11362 ;;		Unchanged: 0/0
 11363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11364 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;Total ram usage:        2 bytes
 11369 ;; Hardware stack levels used:    1
 11370 ;; Hardware stack levels required when called:    5
 11371 ;; This function calls:
 11372 ;;		Nothing
 11373 ;; This function is called by:
 11374 ;;		_EUSART_Initialize
 11375 ;; This function uses a non-reentrant model
 11376 ;;
 11377                           
 11378                           
 11379                           ;psect for function _EUSART_SetRxInterruptHandler
 11380  0744                     _EUSART_SetRxInterruptHandler:	
 11381                           
 11382                           ;eusart.c: 217: EUSART_RxDefaultInterruptHandler = handler;
 11383                           
 11384                           ;incstack = 0
 11385                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 11386  0744  0872               	movf	EUSART_SetRxInterruptHandler@handler+1,w
 11387  0745  00E6               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
 11388  0746  0871               	movf	EUSART_SetRxInterruptHandler@handler,w
 11389  0747  00E5               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
 11390  0748  0008               	return
 11391  0749                     __end_of_EUSART_SetRxInterruptHandler:	
 11392  0749                     PL2:	
 11393  0749  00A7               	movwf	??_sprintf
 11394  074A  01A8               	clrf	??_sprintf+1
 11395  074B  1BA7               	btfsc	??_sprintf,7
 11396  074C  03A8               	decf	??_sprintf+1,f
 11397  074D  0828               	movf	??_sprintf+1,w
 11398  074E  3A80               	xorlw	128
 11399  074F  00A9               	movwf	??_sprintf+2
 11400  0750  0838               	movf	sprintf@width+1,w
 11401  0751  3A80               	xorlw	128
 11402  0752  0229               	subwf	??_sprintf+2,w
 11403  0753  1D03               	skipz
 11404  0754  0008               	return
 11405  0755  0837               	movf	sprintf@width,w
 11406  0756  0227               	subwf	??_sprintf,w
 11407  0757  0008               	return
 11408  0758                     __end_ofPL2:	
 11409  0758                     PL4:	
 11410  0758  0822               	movf	sprintf@f+1,w
 11411  0759  00A8               	movwf	??_sprintf+1
 11412  075A  0821               	movf	sprintf@f,w
 11413  075B  00A7               	movwf	??_sprintf
 11414  075C  0AA1               	incf	sprintf@f,f
 11415  075D  1903               	skipnz
 11416  075E  0AA2               	incf	sprintf@f+1,f
 11417  075F  0084               	movwf	4
 11418  0760  0828               	movf	??_sprintf+1,w
 11419  0761  0085               	movwf	5
 11420  0762  0800               	movf	0,w	;code access
 11421  0763  00B9               	movwf	sprintf@c
 11422  0764  0008               	return
 11423  0765                     __end_ofPL4:	
 11424  0765                     PL6:	
 11425  0765  00A7               	movwf	??_sprintf
 11426  0766  301D               	movlw	low (_hexpowers| (0+32768))
 11427  0767  01A8               	clrf	??_sprintf+1
 11428  0768  35A7               	lslf	??_sprintf,f
 11429  0769  0DA8               	rlf	??_sprintf+1,f
 11430  076A  0727               	addwf	??_sprintf,w
 11431  076B  0084               	movwf	4
 11432  076C  3091               	movlw	high (_hexpowers| (0+32768))
 11433  076D  3D28               	addwfc	??_sprintf+1,w
 11434  076E  0085               	movwf	5
 11435  076F  3F00               	moviw [0]fsr0
 11436  0770  0008               	return
 11437  0771                     __end_ofPL6:	
 11438  0771                     PL8:	
 11439  0771  0821               	movf	sprintf@f,w
 11440  0772  0084               	movwf	4
 11441  0773  0822               	movf	sprintf@f+1,w
 11442  0774  0085               	movwf	5
 11443  0775  0800               	movf	0,w	;code access
 11444  0776  0008               	return
 11445  0777                     __end_ofPL8:	
 11446  0777                     PL10:	
 11447  0777  0086               	movwf	6
 11448  0778  3020               	movlw	32
 11449  0779  0187               	clrf	7
 11450  077A  0081               	movwf	1
 11451  077B  30FF               	movlw	-1
 11452  077C  0AB6               	incf	sprintf@sp,f
 11453  077D  07B7               	addwf	sprintf@width,f
 11454  077E  1C03               	skipc
 11455  077F  03B8               	decf	sprintf@width+1,f
 11456  0780  0837               	movf	sprintf@width,w
 11457  0781  0438               	iorwf	sprintf@width+1,w
 11458  0782  0008               	return
 11459  0783                     __end_ofPL10:	
 11460  0783                     PL12:	
 11461  0783  00A7               	movwf	??_sprintf
 11462  0784  30ED               	movlw	low (_dpowers| (0+32768))
 11463  0785  01A8               	clrf	??_sprintf+1
 11464  0786  35A7               	lslf	??_sprintf,f
 11465  0787  0DA8               	rlf	??_sprintf+1,f
 11466  0788  0727               	addwf	??_sprintf,w
 11467  0789  0084               	movwf	4
 11468  078A  3090               	movlw	high (_dpowers| (0+32768))
 11469  078B  3D28               	addwfc	??_sprintf+1,w
 11470  078C  0085               	movwf	5
 11471  078D  3F00               	moviw [0]fsr0
 11472  078E  0008               	return
 11473  078F                     __end_ofPL12:	
 11474  078F                     PL14:	
 11475  078F  082E               	movf	sprintf@ap,w
 11476  0790  0086               	movwf	6
 11477  0791  0187               	clrf	7
 11478  0792  3F40               	moviw [0]fsr1
 11479  0793  00B1               	movwf	sprintf@val
 11480  0794  3F41               	moviw [1]fsr1
 11481  0795  00B2               	movwf	sprintf@val+1
 11482  0796  0AAE               	incf	sprintf@ap,f
 11483  0797  0AAE               	incf	sprintf@ap,f
 11484  0798  0008               	return
 11485  0799                     __end_ofPL14:	
 11486  0799                     PL16:	
 11487  0799  0836               	movf	sprintf@sp,w
 11488  079A  0086               	movwf	6
 11489  079B  3020               	movlw	32
 11490  079C  0187               	clrf	7
 11491  079D  0081               	movwf	1
 11492  079E  0AB6               	incf	sprintf@sp,f
 11493  079F  0008               	return
 11494  07A0                     __end_ofPL16:	
 11495  07A0                     PL18:	
 11496  07A0  00A7               	movwf	??_sprintf
 11497  07A1  01A8               	clrf	??_sprintf+1
 11498  07A2  1BA7               	btfsc	??_sprintf,7
 11499  07A3  03A8               	decf	??_sprintf+1,f
 11500  07A4  02B7               	subwf	sprintf@width,f
 11501  07A5  0828               	movf	??_sprintf+1,w
 11502  07A6  3BB8               	subwfb	sprintf@width+1,f
 11503  07A7  0008               	return
 11504  07A8                     __end_ofPL18:	
 11505  07A8                     PL20:	
 11506  07A8  00A2               	movwf	sprintf@f+1
 11507  07A9  0021               	movlb	1	; select bank1
 11508  07AA  0869               	movf	_UID^(0+128),w
 11509  07AB  0020               	movlb	0	; select bank0
 11510  07AC  00A3               	movwf	?_sprintf+2
 11511  07AD  0008               	return
 11512  07AE                     __end_ofPL20:	
 11513  07AE                     PL22:	
 11514  07AE  3047               	movlw	low ((_uart+4)| (0+32768))
 11515  07AF  0084               	movwf	4
 11516  07B0  3090               	movlw	high ((_uart+4)| (0+32768))
 11517  07B1  0085               	movwf	5
 11518  07B2  3F01               	moviw [1]fsr0
 11519  07B3  0008               	return
 11520  07B4                     __end_ofPL22:	
 11521  07B4                     PL24:	
 11522  07B4  00FA               	movwf	??_CheckResponse
 11523  07B5  0086               	movwf	6
 11524  07B6  0187               	clrf	7
 11525  07B7  0801               	movf	1,w
 11526  07B8  0628               	xorwf	CheckResponse@input,w
 11527  07B9  0008               	return
 11528  07BA                     __end_ofPL24:	
 11529  07BA                     PL26:	
 11530  07BA  3077               	movlw	low (_aokStr| (0+32768))
 11531  07BB  00F6               	movwf	WiFly_CheckRecv@chkString
 11532  07BC  3091               	movlw	high (_aokStr| (0+32768))
 11533  07BD  00F7               	movwf	WiFly_CheckRecv@chkString+1
 11534  07BE  0008               	return
 11535  07BF                     __end_ofPL26:	
 11536  07BF                     PL28:	
 11537  07BF  3057               	movlw	low (_hardRebootStr| (0+32768))
 11538  07C0  00F6               	movwf	WiFly_CheckRecv@chkString
 11539  07C1  3091               	movlw	high (_hardRebootStr| (0+32768))
 11540  07C2  00F7               	movwf	WiFly_CheckRecv@chkString+1
 11541  07C3  0008               	return
 11542  07C4                     __end_ofPL28:	
 11543                           
 11544                           	psect	bssCOMMON
 11545  007C                     __pbssCOMMON:	
 11546  007C                     _eusartTxHead:	
 11547  007C                     	ds	1
 11548                           
 11549                           	psect	bssBANK0
 11550  006D                     __pbssBANK0:	
 11551  006D                     _eusartRxTail:	
 11552  006D                     	ds	1
 11553  006E                     _eusartRxHead:	
 11554  006E                     	ds	1
 11555  006F                     _eusartTxTail:	
 11556  006F                     	ds	1
 11557                           
 11558                           	psect	bssBANK1
 11559  00BE                     __pbssBANK1:	
 11560  00BE                     _eusartRxBuffer:	
 11561  00BE                     	ds	8
 11562  00C6                     _eusartTxBuffer:	
 11563  00C6                     	ds	8
 11564  00CE                     _indStatus:	
 11565  00CE                     	ds	1
 11566  00CF                     _pingTime:	
 11567  00CF                     	ds	1
 11568  00D0                     _mode:	
 11569  00D0                     	ds	1
 11570  00D1                     _eusartRxCount:	
 11571  00D1                     	ds	1
 11572                           
 11573                           	psect	dataBANK1
 11574  00A0                     __pdataBANK1:	
 11575  00A0                     Knock@F14741:	
 11576  00A0                     	ds	10
 11577  00AA                     Pair@F14733:	
 11578  00AA                     	ds	9
 11579  00B3                     _failedStr:	
 11580  00B3                     	ds	7
 11581  00BA                     _errStr:	
 11582  00BA                     	ds	4
 11583                           
 11584                           	psect	dataBANK2
 11585  0120                     __pdataBANK2:	
 11586  0120                     Validate@F14737:	
 11587  0120                     	ds	13
 11588                           
 11589                           	psect	inittext
 11590  0F40                     init_ram:	
 11591  0F40  00FE               	movwf	126
 11592  0F41                     initloop:	
 11593  0F41  0012               	moviw fsr0++
 11594  0F42  001E               	movwi fsr1++
 11595  0F43  0BFE               	decfsz	126,f
 11596  0F44  2F41               	goto	initloop
 11597  0F45  3400               	retlw	0
 11598                           
 11599                           	psect	clrtext
 11600  0F3A                     clear_ram0:	
 11601                           ;	Called with FSR0 containing the base address, and
 11602                           ;	WREG with the size to clear
 11603                           
 11604  0F3A  0064               	clrwdt	;clear the watchdog before getting into this loop
 11605  0F3B                     clrloop0:	
 11606  0F3B  0180               	clrf	0	;clear RAM location pointed to by FSR
 11607  0F3C  3101               	addfsr 0,1
 11608  0F3D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
 11609  0F3E  2F3B               	goto	clrloop0	;have we reached the end yet?
 11610  0F3F  3400               	retlw	0	;all done for this memory range, return
 11611                           
 11612                           	psect	cstackBANK1
 11613  00D2                     __pcstackBANK1:	
 11614  00D2                     ??_Pair:	
 11615  00D2                     ??_Validate:	
 11616                           ; 1 bytes @ 0x0
 11617                           
 11618  00D2                     ??_Knock:	
 11619                           ; 1 bytes @ 0x0
 11620                           
 11621  00D2                     ?_connect_network:	
 11622                           ; 1 bytes @ 0x0
 11623                           
 11624  00D2                     connect_network@ssid:	
 11625                           ; 1 bytes @ 0x0
 11626                           
 11627                           
 11628                           ; 2 bytes @ 0x0
 11629  00D2                     	ds	1
 11630  00D3                     Pair@pairString:	
 11631  00D3                     Knock@knockString:	
 11632                           ; 9 bytes @ 0x1
 11633                           
 11634  00D3                     Validate@valString:	
 11635                           ; 10 bytes @ 0x1
 11636                           
 11637                           
 11638                           ; 13 bytes @ 0x1
 11639  00D3                     	ds	1
 11640  00D4                     connect_network@passwd:	
 11641                           
 11642                           ; 2 bytes @ 0x2
 11643  00D4                     	ds	8
 11644  00DC                     Pair@returnVal:	
 11645                           
 11646                           ; 1 bytes @ 0xA
 11647  00DC                     	ds	1
 11648  00DD                     Knock@returnVal:	
 11649                           
 11650                           ; 1 bytes @ 0xB
 11651  00DD                     	ds	3
 11652  00E0                     Validate@returnVal:	
 11653                           
 11654                           ; 1 bytes @ 0xE
 11655  00E0                     	ds	1
 11656                           
 11657                           	psect	cstackCOMMON
 11658  0070                     __pcstackCOMMON:	
 11659  0070                     ?_isdigit:	
 11660  0070                     ?_EUSART_is_rx_ready:	
 11661                           ; 1 bit 
 11662                           
 11663  0070                     ?_WiFly_EnterCMDMode:	
 11664                           ; 1 bytes @ 0x0
 11665                           
 11666  0070                     ?_EUSART_Initialize:	
 11667                           ; 1 bytes @ 0x0
 11668                           
 11669  0070                     ?_EUSART_Read:	
 11670                           ; 1 bytes @ 0x0
 11671                           
 11672  0070                     ?_EUSART_Receive_ISR:	
 11673                           ; 1 bytes @ 0x0
 11674                           
 11675  0070                     ??_EUSART_Receive_ISR:	
 11676                           ; 1 bytes @ 0x0
 11677                           
 11678  0070                     ?_EUSART_Transmit_ISR:	
 11679                           ; 1 bytes @ 0x0
 11680                           
 11681  0070                     ??_EUSART_Transmit_ISR:	
 11682                           ; 1 bytes @ 0x0
 11683                           
 11684  0070                     ?_PIN_MANAGER_Initialize:	
 11685                           ; 1 bytes @ 0x0
 11686                           
 11687  0070                     ?_OSCILLATOR_Initialize:	
 11688                           ; 1 bytes @ 0x0
 11689                           
 11690  0070                     ?_WWDT_Initialize:	
 11691                           ; 1 bytes @ 0x0
 11692                           
 11693  0070                     ?_TMR4_Initialize:	
 11694                           ; 1 bytes @ 0x0
 11695                           
 11696  0070                     ?_TMR2_Initialize:	
 11697                           ; 1 bytes @ 0x0
 11698                           
 11699  0070                     ?_TMR4_ISR:	
 11700                           ; 1 bytes @ 0x0
 11701                           
 11702  0070                     ??_TMR4_ISR:	
 11703                           ; 1 bytes @ 0x0
 11704                           
 11705  0070                     ?_TMR2_ISR:	
 11706                           ; 1 bytes @ 0x0
 11707                           
 11708  0070                     ?_TMR2_StopTimer:	
 11709                           ; 1 bytes @ 0x0
 11710                           
 11711  0070                     ?_TMR4_StartTimer:	
 11712                           ; 1 bytes @ 0x0
 11713                           
 11714  0070                     ?_TMR2_StartTimer:	
 11715                           ; 1 bytes @ 0x0
 11716                           
 11717  0070                     ?_TMR4_StopTimer:	
 11718                           ; 1 bytes @ 0x0
 11719                           
 11720  0070                     ?_eeprom_read:	
 11721                           ; 1 bytes @ 0x0
 11722                           
 11723  0070                     ?_TMR2_DefaultInterruptHandler:	
 11724                           ; 1 bytes @ 0x0
 11725                           
 11726  0070                     ??_TMR2_DefaultInterruptHandler:	
 11727                           ; 1 bytes @ 0x0
 11728                           
 11729  0070                     ?_TMR2_Start:	
 11730                           ; 1 bytes @ 0x0
 11731                           
 11732  0070                     ?_TMR4_DefaultInterruptHandler:	
 11733                           ; 1 bytes @ 0x0
 11734                           
 11735  0070                     ??_TMR4_DefaultInterruptHandler:	
 11736                           ; 1 bytes @ 0x0
 11737                           
 11738  0070                     ?_TMR4_Start:	
 11739                           ; 1 bytes @ 0x0
 11740                           
 11741  0070                     ?_Clear_RX_Buffer:	
 11742                           ; 1 bytes @ 0x0
 11743                           
 11744  0070                     ?_WiFly_CheckInCMD:	
 11745                           ; 1 bytes @ 0x0
 11746                           
 11747  0070                     ?_WiFly_ReadChar:	
 11748                           ; 1 bytes @ 0x0
 11749                           
 11750  0070                     ?_WiFly_RebootCMD:	
 11751                           ; 1 bytes @ 0x0
 11752                           
 11753  0070                     ?_WiFly_SaveConfig:	
 11754                           ; 1 bytes @ 0x0
 11755                           
 11756  0070                     ?_WiFly_FactoryReset:	
 11757                           ; 1 bytes @ 0x0
 11758                           
 11759  0070                     ?_SYSTEM_Initialize:	
 11760                           ; 1 bytes @ 0x0
 11761                           
 11762  0070                     ?_INTERRUPT_InterruptManager:	
 11763                           ; 1 bytes @ 0x0
 11764                           
 11765  0070                     ?_ClearIndicators:	
 11766                           ; 1 bytes @ 0x0
 11767                           
 11768  0070                     ?_SetIndication:	
 11769                           ; 1 bytes @ 0x0
 11770                           
 11771  0070                     ?_goto_mode:	
 11772                           ; 1 bytes @ 0x0
 11773                           
 11774  0070                     ?_get_response:	
 11775                           ; 1 bytes @ 0x0
 11776                           
 11777  0070                     ?_send_message:	
 11778                           ; 1 bytes @ 0x0
 11779                           
 11780  0070                     ?_Pair:	
 11781                           ; 1 bytes @ 0x0
 11782                           
 11783  0070                     ?_Validate:	
 11784                           ; 1 bytes @ 0x0
 11785                           
 11786  0070                     ?_Knock:	
 11787                           ; 1 bytes @ 0x0
 11788                           
 11789  0070                     ?_blink:	
 11790                           ; 1 bytes @ 0x0
 11791                           
 11792  0070                     ?_setFlag:	
 11793                           ; 1 bytes @ 0x0
 11794                           
 11795  0070                     ??_setFlag:	
 11796                           ; 1 bytes @ 0x0
 11797                           
 11798  0070                     ?_main:	
 11799                           ; 1 bytes @ 0x0
 11800                           
 11801  0070                     ?_TMR2_Stop:	
 11802                           ; 1 bytes @ 0x0
 11803                           
 11804  0070                     ?_TMR4_Stop:	
 11805                           ; 1 bytes @ 0x0
 11806                           
 11807  0070                     ?i1_SetIndication:	
 11808                           ; 1 bytes @ 0x0
 11809                           
 11810  0070                     ??i1_SetIndication:	
 11811                           ; 1 bytes @ 0x0
 11812                           
 11813  0070                     ?i1_TMR4_Stop:	
 11814                           ; 1 bytes @ 0x0
 11815                           
 11816  0070                     ??i1_TMR4_Stop:	
 11817                           ; 1 bytes @ 0x0
 11818                           
 11819  0070                     ?i1_TMR4_StopTimer:	
 11820                           ; 1 bytes @ 0x0
 11821                           
 11822  0070                     ??i1_TMR4_StopTimer:	
 11823                           ; 1 bytes @ 0x0
 11824                           
 11825  0070                     i1SetIndication@set:	
 11826                           ; 1 bytes @ 0x0
 11827                           
 11828                           
 11829                           ; 1 bytes @ 0x0
 11830  0070                     	ds	1
 11831  0071                     ??_EUSART_is_rx_ready:	
 11832  0071                     ??_EUSART_Read:	
 11833                           ; 1 bytes @ 0x1
 11834                           
 11835  0071                     ?_EUSART_SetRxInterruptHandler:	
 11836                           ; 1 bytes @ 0x1
 11837                           
 11838  0071                     ?_EUSART_SetTxInterruptHandler:	
 11839                           ; 1 bytes @ 0x1
 11840                           
 11841  0071                     ?_EUSART_Write:	
 11842                           ; 1 bytes @ 0x1
 11843                           
 11844  0071                     ??_PIN_MANAGER_Initialize:	
 11845                           ; 1 bytes @ 0x1
 11846                           
 11847  0071                     ??_OSCILLATOR_Initialize:	
 11848                           ; 1 bytes @ 0x1
 11849                           
 11850  0071                     ??_WWDT_Initialize:	
 11851                           ; 1 bytes @ 0x1
 11852                           
 11853  0071                     ??_TMR2_ISR:	
 11854                           ; 1 bytes @ 0x1
 11855                           
 11856  0071                     ??_TMR2_StopTimer:	
 11857                           ; 1 bytes @ 0x1
 11858                           
 11859  0071                     ??_TMR4_StartTimer:	
 11860                           ; 1 bytes @ 0x1
 11861                           
 11862  0071                     ??_TMR2_StartTimer:	
 11863                           ; 1 bytes @ 0x1
 11864                           
 11865  0071                     ??_TMR4_StopTimer:	
 11866                           ; 1 bytes @ 0x1
 11867                           
 11868  0071                     ?_eeprom_write:	
 11869                           ; 1 bytes @ 0x1
 11870                           
 11871  0071                     ?_TMR2_SetInterruptHandler:	
 11872                           ; 1 bytes @ 0x1
 11873                           
 11874  0071                     ?_TMR4_SetInterruptHandler:	
 11875                           ; 1 bytes @ 0x1
 11876                           
 11877  0071                     ??_eeprom_read:	
 11878                           ; 1 bytes @ 0x1
 11879                           
 11880  0071                     ??_TMR2_Start:	
 11881                           ; 1 bytes @ 0x1
 11882                           
 11883  0071                     ??_TMR4_Start:	
 11884                           ; 1 bytes @ 0x1
 11885                           
 11886  0071                     ??_isdigit:	
 11887                           ; 1 bytes @ 0x1
 11888                           
 11889  0071                     ??_INTERRUPT_InterruptManager:	
 11890                           ; 1 bytes @ 0x1
 11891                           
 11892  0071                     ??_ClearIndicators:	
 11893                           ; 1 bytes @ 0x1
 11894                           
 11895  0071                     ??_SetIndication:	
 11896                           ; 1 bytes @ 0x1
 11897                           
 11898  0071                     ??_blink:	
 11899                           ; 1 bytes @ 0x1
 11900                           
 11901  0071                     ??_TMR2_Stop:	
 11902                           ; 1 bytes @ 0x1
 11903                           
 11904  0071                     ??_TMR4_Stop:	
 11905                           ; 1 bytes @ 0x1
 11906                           
 11907  0071                     ?___bmul:	
 11908                           ; 1 bytes @ 0x1
 11909                           
 11910  0071                     ?_strlen:	
 11911                           ; 1 bytes @ 0x1
 11912                           
 11913  0071                     ?___wmul:	
 11914                           ; 2 bytes @ 0x1
 11915                           
 11916  0071                     ?___lwdiv:	
 11917                           ; 2 bytes @ 0x1
 11918                           
 11919  0071                     EUSART_Read@readValue:	
 11920                           ; 2 bytes @ 0x1
 11921                           
 11922  0071                     EUSART_Write@txData:	
 11923                           ; 1 bytes @ 0x1
 11924                           
 11925  0071                     PIN_MANAGER_Initialize@state:	
 11926                           ; 1 bytes @ 0x1
 11927                           
 11928  0071                     SetIndication@set:	
 11929                           ; 1 bytes @ 0x1
 11930                           
 11931  0071                     eeprom_read@addr:	
 11932                           ; 1 bytes @ 0x1
 11933                           
 11934  0071                     eeprom_write@value:	
 11935                           ; 1 bytes @ 0x1
 11936                           
 11937  0071                     ___bmul@multiplicand:	
 11938                           ; 1 bytes @ 0x1
 11939                           
 11940  0071                     _isdigit$1851:	
 11941                           ; 1 bytes @ 0x1
 11942                           
 11943  0071                     EUSART_SetTxInterruptHandler@handler:	
 11944                           ; 1 bytes @ 0x1
 11945                           
 11946  0071                     EUSART_SetRxInterruptHandler@handler:	
 11947                           ; 2 bytes @ 0x1
 11948                           
 11949  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
 11950                           ; 2 bytes @ 0x1
 11951                           
 11952  0071                     TMR4_SetInterruptHandler@InterruptHandler:	
 11953                           ; 2 bytes @ 0x1
 11954                           
 11955  0071                     ___wmul@multiplier:	
 11956                           ; 2 bytes @ 0x1
 11957                           
 11958  0071                     ___lwdiv@divisor:	
 11959                           ; 2 bytes @ 0x1
 11960                           
 11961  0071                     strlen@s:	
 11962                           ; 2 bytes @ 0x1
 11963                           
 11964                           
 11965                           ; 2 bytes @ 0x1
 11966  0071                     	ds	1
 11967  0072                     ??_EUSART_Write:	
 11968  0072                     ??_eeprom_write:	
 11969                           ; 1 bytes @ 0x2
 11970                           
 11971  0072                     ?_WiFly_Send:	
 11972                           ; 1 bytes @ 0x2
 11973                           
 11974  0072                     ??_Clear_RX_Buffer:	
 11975                           ; 1 bytes @ 0x2
 11976                           
 11977  0072                     ??_WiFly_ReadChar:	
 11978                           ; 1 bytes @ 0x2
 11979                           
 11980  0072                     ??_goto_mode:	
 11981                           ; 1 bytes @ 0x2
 11982                           
 11983  0072                     ??___bmul:	
 11984                           ; 1 bytes @ 0x2
 11985                           
 11986  0072                     goto_mode@target:	
 11987                           ; 1 bytes @ 0x2
 11988                           
 11989  0072                     eeprom_write@addr:	
 11990                           ; 1 bytes @ 0x2
 11991                           
 11992  0072                     ___bmul@product:	
 11993                           ; 1 bytes @ 0x2
 11994                           
 11995  0072                     isdigit@c:	
 11996                           ; 1 bytes @ 0x2
 11997                           
 11998  0072                     WiFly_Send@command:	
 11999                           ; 1 bytes @ 0x2
 12000                           
 12001                           
 12002                           ; 2 bytes @ 0x2
 12003  0072                     	ds	1
 12004  0073                     ??_strlen:	
 12005  0073                     ??_EUSART_Initialize:	
 12006                           ; 1 bytes @ 0x3
 12007                           
 12008  0073                     ??_EUSART_SetRxInterruptHandler:	
 12009                           ; 1 bytes @ 0x3
 12010                           
 12011  0073                     ??_EUSART_SetTxInterruptHandler:	
 12012                           ; 1 bytes @ 0x3
 12013                           
 12014  0073                     ??_TMR4_Initialize:	
 12015                           ; 1 bytes @ 0x3
 12016                           
 12017  0073                     ??_TMR2_Initialize:	
 12018                           ; 1 bytes @ 0x3
 12019                           
 12020  0073                     ??_TMR2_SetInterruptHandler:	
 12021                           ; 1 bytes @ 0x3
 12022                           
 12023  0073                     ??_TMR4_SetInterruptHandler:	
 12024                           ; 1 bytes @ 0x3
 12025                           
 12026  0073                     ??_SYSTEM_Initialize:	
 12027                           ; 1 bytes @ 0x3
 12028                           
 12029  0073                     ___bmul@multiplier:	
 12030                           ; 1 bytes @ 0x3
 12031                           
 12032  0073                     ___wmul@multiplicand:	
 12033                           ; 1 bytes @ 0x3
 12034                           
 12035  0073                     ___lwdiv@dividend:	
 12036                           ; 2 bytes @ 0x3
 12037                           
 12038                           
 12039                           ; 2 bytes @ 0x3
 12040  0073                     	ds	1
 12041  0074                     ??_WiFly_Send:	
 12042  0074                     strlen@cp:	
 12043                           ; 1 bytes @ 0x4
 12044                           
 12045                           
 12046                           ; 2 bytes @ 0x4
 12047  0074                     	ds	1
 12048  0075                     ?_WiFly_SendString:	
 12049  0075                     ??___wmul:	
 12050                           ; 1 bytes @ 0x5
 12051                           
 12052  0075                     ??___lwdiv:	
 12053                           ; 1 bytes @ 0x5
 12054                           
 12055  0075                     WiFly_SendString@sendString:	
 12056                           ; 1 bytes @ 0x5
 12057                           
 12058  0075                     ___wmul@product:	
 12059                           ; 2 bytes @ 0x5
 12060                           
 12061  0075                     ___lwdiv@quotient:	
 12062                           ; 2 bytes @ 0x5
 12063                           
 12064                           
 12065                           ; 2 bytes @ 0x5
 12066  0075                     	ds	1
 12067  0076                     ?_WiFly_CheckRecv:	
 12068  0076                     ?_CheckResponse:	
 12069                           ; 1 bytes @ 0x6
 12070                           
 12071  0076                     ?_WaitResponse:	
 12072                           ; 1 bytes @ 0x6
 12073                           
 12074  0076                     WiFly_CheckRecv@chkString:	
 12075                           ; 1 bytes @ 0x6
 12076                           
 12077  0076                     CheckResponse@chkString1:	
 12078                           ; 2 bytes @ 0x6
 12079                           
 12080  0076                     WaitResponse@chkString:	
 12081                           ; 2 bytes @ 0x6
 12082                           
 12083                           
 12084                           ; 2 bytes @ 0x6
 12085  0076                     	ds	1
 12086  0077                     ??_WiFly_SendString:	
 12087  0077                     ___lwdiv@counter:	
 12088                           ; 1 bytes @ 0x7
 12089                           
 12090                           
 12091                           ; 1 bytes @ 0x7
 12092  0077                     	ds	1
 12093  0078                     ??_WiFly_CheckRecv:	
 12094  0078                     ??_WaitResponse:	
 12095                           ; 1 bytes @ 0x8
 12096                           
 12097  0078                     ?___lwmod:	
 12098                           ; 1 bytes @ 0x8
 12099                           
 12100  0078                     CheckResponse@chkString2:	
 12101                           ; 2 bytes @ 0x8
 12102                           
 12103  0078                     ___lwmod@divisor:	
 12104                           ; 1 bytes @ 0x8
 12105                           
 12106                           
 12107                           ; 2 bytes @ 0x8
 12108  0078                     	ds	1
 12109  0079                     ??_WiFly_EnterCMDMode:	
 12110  0079                     ??_WiFly_CheckInCMD:	
 12111                           ; 1 bytes @ 0x9
 12112                           
 12113  0079                     ??_WiFly_SendCMD:	
 12114                           ; 1 bytes @ 0x9
 12115                           
 12116  0079                     ??_WiFly_RebootCMD:	
 12117                           ; 1 bytes @ 0x9
 12118                           
 12119  0079                     ??_WiFly_SaveConfig:	
 12120                           ; 1 bytes @ 0x9
 12121                           
 12122  0079                     ??_WiFly_FactoryReset:	
 12123                           ; 1 bytes @ 0x9
 12124                           
 12125  0079                     ??_get_response:	
 12126                           ; 1 bytes @ 0x9
 12127                           
 12128  0079                     CheckResponse@chkString3:	
 12129                           ; 1 bytes @ 0x9
 12130                           
 12131  0079                     get_response@status:	
 12132                           ; 1 bytes @ 0x9
 12133                           
 12134                           
 12135                           ; 1 bytes @ 0x9
 12136  0079                     	ds	1
 12137  007A                     ??_CheckResponse:	
 12138  007A                     ___lwmod@dividend:	
 12139                           ; 1 bytes @ 0xA
 12140                           
 12141                           
 12142                           ; 2 bytes @ 0xA
 12143  007A                     	ds	2
 12144  007C                     ??_WiFly_SendCMD_SingleArg:	
 12145  007C                     ??_WiFly_SendCMD_DoubleArg:	
 12146                           ; 1 bytes @ 0xC
 12147                           
 12148  007C                     ??_WiFly_Example_InitializeAsClient:	
 12149                           ; 1 bytes @ 0xC
 12150                           
 12151  007C                     ??_connect_socket:	
 12152                           ; 1 bytes @ 0xC
 12153                           
 12154  007C                     ??_send_message:	
 12155                           ; 1 bytes @ 0xC
 12156                           
 12157  007C                     ??_connect_network:	
 12158                           ; 1 bytes @ 0xC
 12159                           
 12160  007C                     ??_main:	
 12161                           ; 1 bytes @ 0xC
 12162                           
 12163  007C                     ??___lwmod:	
 12164                           ; 1 bytes @ 0xC
 12165                           
 12166                           
 12167                           	psect	cstackBANK0
 12168  0020                     __pcstackBANK0:	
 12169                           ; 1 bytes @ 0xC
 12170                           
 12171  0020                     ___lwmod@counter:	
 12172  0020                     WiFly_CheckRecv@length:	
 12173                           ; 1 bytes @ 0x0
 12174                           
 12175  0020                     CheckResponse@length3:	
 12176                           ; 2 bytes @ 0x0
 12177                           
 12178  0020                     WaitResponse@length:	
 12179                           ; 2 bytes @ 0x0
 12180                           
 12181                           
 12182                           ; 2 bytes @ 0x0
 12183  0020                     	ds	1
 12184  0021                     ?_sprintf:	
 12185  0021                     sprintf@f:	
 12186                           ; 2 bytes @ 0x1
 12187                           
 12188                           
 12189                           ; 2 bytes @ 0x1
 12190  0021                     	ds	1
 12191  0022                     WiFly_CheckRecv@i:	
 12192  0022                     CheckResponse@length1:	
 12193                           ; 2 bytes @ 0x2
 12194                           
 12195  0022                     WaitResponse@i:	
 12196                           ; 2 bytes @ 0x2
 12197                           
 12198                           
 12199                           ; 2 bytes @ 0x2
 12200  0022                     	ds	2
 12201  0024                     ?_WiFly_SendCMD:	
 12202  0024                     WiFly_SendCMD@cmd:	
 12203                           ; 1 bytes @ 0x4
 12204                           
 12205  0024                     CheckResponse@length2:	
 12206                           ; 2 bytes @ 0x4
 12207                           
 12208                           
 12209                           ; 2 bytes @ 0x4
 12210  0024                     	ds	2
 12211  0026                     CheckResponse@i3:	
 12212                           
 12213                           ; 2 bytes @ 0x6
 12214  0026                     	ds	1
 12215  0027                     ??_sprintf:	
 12216                           
 12217                           ; 1 bytes @ 0x7
 12218  0027                     	ds	1
 12219  0028                     CheckResponse@input:	
 12220                           
 12221                           ; 1 bytes @ 0x8
 12222  0028                     	ds	1
 12223  0029                     CheckResponse@i1:	
 12224                           
 12225                           ; 2 bytes @ 0x9
 12226  0029                     	ds	2
 12227  002B                     sprintf@idx:	
 12228  002B                     CheckResponse@i2:	
 12229                           ; 1 bytes @ 0xB
 12230                           
 12231                           
 12232                           ; 2 bytes @ 0xB
 12233  002B                     	ds	1
 12234  002C                     sprintf@cp:	
 12235                           
 12236                           ; 2 bytes @ 0xC
 12237  002C                     	ds	2
 12238  002E                     sprintf@ap:	
 12239                           
 12240                           ; 1 bytes @ 0xE
 12241  002E                     	ds	1
 12242  002F                     sprintf@len:	
 12243                           
 12244                           ; 2 bytes @ 0xF
 12245  002F                     	ds	2
 12246  0031                     sprintf@val:	
 12247                           
 12248                           ; 2 bytes @ 0x11
 12249  0031                     	ds	2
 12250  0033                     sprintf@prec:	
 12251                           
 12252                           ; 1 bytes @ 0x13
 12253  0033                     	ds	1
 12254  0034                     sprintf@flag:	
 12255                           
 12256                           ; 2 bytes @ 0x14
 12257  0034                     	ds	2
 12258  0036                     sprintf@sp:	
 12259                           
 12260                           ; 1 bytes @ 0x16
 12261  0036                     	ds	1
 12262  0037                     sprintf@width:	
 12263                           
 12264                           ; 2 bytes @ 0x17
 12265  0037                     	ds	2
 12266  0039                     sprintf@c:	
 12267                           
 12268                           ; 1 bytes @ 0x19
 12269  0039                     	ds	1
 12270  003A                     ?_WiFly_SendCMD_SingleArg:	
 12271  003A                     ?_WiFly_SendCMD_DoubleArg:	
 12272                           ; 1 bytes @ 0x1A
 12273                           
 12274  003A                     WiFly_SendCMD_SingleArg@cmdFormat:	
 12275                           ; 1 bytes @ 0x1A
 12276                           
 12277  003A                     WiFly_SendCMD_DoubleArg@cmdFormat:	
 12278                           ; 2 bytes @ 0x1A
 12279                           
 12280                           
 12281                           ; 2 bytes @ 0x1A
 12282  003A                     	ds	2
 12283  003C                     WiFly_SendCMD_SingleArg@arg:	
 12284  003C                     WiFly_SendCMD_DoubleArg@arg1:	
 12285                           ; 2 bytes @ 0x1C
 12286                           
 12287                           
 12288                           ; 2 bytes @ 0x1C
 12289  003C                     	ds	2
 12290  003E                     WiFly_SendCMD_DoubleArg@arg2:	
 12291  003E                     WiFly_SendCMD_SingleArg@txBuffer:	
 12292                           ; 2 bytes @ 0x1E
 12293                           
 12294                           
 12295                           ; 40 bytes @ 0x1E
 12296  003E                     	ds	2
 12297  0040                     WiFly_SendCMD_DoubleArg@txBuffer:	
 12298                           
 12299                           ; 40 bytes @ 0x20
 12300  0040                     	ds	38
 12301  0066                     ?_WiFly_Example_InitializeAsClient:	
 12302  0066                     WiFly_Example_InitializeAsClient@ssid:	
 12303                           ; 1 bytes @ 0x46
 12304                           
 12305                           
 12306                           ; 2 bytes @ 0x46
 12307  0066                     	ds	2
 12308  0068                     ?_connect_socket:	
 12309  0068                     WiFly_Example_InitializeAsClient@password:	
 12310                           ; 1 bytes @ 0x48
 12311                           
 12312  0068                     connect_socket@addr:	
 12313                           ; 2 bytes @ 0x48
 12314                           
 12315                           
 12316                           ; 2 bytes @ 0x48
 12317  0068                     	ds	2
 12318  006A                     connect_socket@port:	
 12319                           
 12320                           ; 2 bytes @ 0x4A
 12321  006A                     	ds	2
 12322  006C                     send_message@message:	
 12323                           
 12324                           ; 1 bytes @ 0x4C
 12325  006C                     	ds	1
 12326                           
 12327                           	psect	text39
 12328  0FC6                     __ptext39:	
 12329 ;; *************** function _EUSART_Write *****************
 12330 ;; Defined at:
 12331 ;;		line 150 in file "mcc_generated_files/eusart.c"
 12332 ;; Parameters:    Size  Location     Type
 12333 ;;  txData          1    1[COMMON] unsigned char 
 12334 ;; Auto vars:     Size  Location     Type
 12335 ;;		None
 12336 ;; Return value:  Size  Location     Type
 12337 ;;                  1    wreg      void 
 12338 ;; Registers used:
 12339 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12340 ;; Tracked objects:
 12341 ;;		On entry : 10/0
 12342 ;;		On exit  : 1F/E
 12343 ;;		Unchanged: 0/0
 12344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12345 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12348 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12349 ;;Total ram usage:        1 bytes
 12350 ;; Hardware stack levels used:    1
 12351 ;; Hardware stack levels required when called:    5
 12352 ;; This function calls:
 12353 ;;		Nothing
 12354 ;; This function is called by:
 12355 ;;		_WiFly_Send
 12356 ;; This function uses a non-reentrant model
 12357 ;;
 12358                           
 12359                           
 12360                           ;psect for function _EUSART_Write
 12361  0FC6                     _EUSART_Write:	
 12362  0FC6                     l2403:	
 12363                           ;eusart.c: 152: while(0 == eusartTxBufferRemaining)
 12364                           
 12365                           ;incstack = 0
 12366                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 12367                           
 12368  0FC6  0021               	movlb	1	; select bank1
 12369  0FC7  086A               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 12370  0FC8  1903               	btfsc	3,2
 12371  0FC9  2FC6               	goto	l2403
 12372                           
 12373                           ;eusart.c: 154: }
 12374                           ;eusart.c: 156: if(0 == PIE3bits.TXIE)
 12375  0FCA  002E               	movlb	14	; select bank14
 12376  0FCB  1A19               	btfsc	25,4	;volatile
 12377  0FCC  2FD1               	goto	l318
 12378                           
 12379                           ;eusart.c: 157: {
 12380                           ;eusart.c: 158: TX1REG = txData;
 12381  0FCD  0871               	movf	EUSART_Write@txData,w
 12382  0FCE  0022               	movlb	2	; select bank2
 12383  0FCF  009A               	movwf	26	;volatile
 12384                           
 12385                           ;eusart.c: 159: }
 12386  0FD0  2FDF               	goto	l2417
 12387  0FD1                     l318:	
 12388                           
 12389                           ;eusart.c: 160: else
 12390                           ;eusart.c: 161: {
 12391                           ;eusart.c: 162: PIE3bits.TXIE = 0;
 12392  0FD1  1219               	bcf	25,4	;volatile
 12393                           
 12394                           ;eusart.c: 163: eusartTxBuffer[eusartTxHead++] = txData;
 12395  0FD2  087C               	movf	_eusartTxHead,w
 12396  0FD3  3EC6               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 12397  0FD4  0086               	movwf	6
 12398  0FD5  0187               	clrf	7
 12399  0FD6  0871               	movf	EUSART_Write@txData,w
 12400  0FD7  0081               	movwf	1
 12401  0FD8  0AFC               	incf	_eusartTxHead,f	;volatile
 12402                           
 12403                           ;eusart.c: 164: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 12404  0FD9  3008               	movlw	8
 12405  0FDA  027C               	subwf	_eusartTxHead,w
 12406  0FDB  1803               	btfsc	3,0
 12407                           
 12408                           ;eusart.c: 165: {
 12409                           ;eusart.c: 166: eusartTxHead = 0;
 12410  0FDC  01FC               	clrf	_eusartTxHead	;volatile
 12411                           
 12412                           ;eusart.c: 167: }
 12413                           ;eusart.c: 168: eusartTxBufferRemaining--;
 12414  0FDD  0021               	movlb	1	; select bank1
 12415  0FDE  03EA               	decf	_eusartTxBufferRemaining^(0+128),f	;volatile
 12416  0FDF                     l2417:	
 12417                           
 12418                           ;eusart.c: 169: }
 12419                           ;eusart.c: 170: PIE3bits.TXIE = 1;
 12420  0FDF  002E               	movlb	14	; select bank14
 12421  0FE0  1619               	bsf	25,4	;volatile
 12422  0FE1  0008               	return
 12423  0FE2                     __end_of_EUSART_Write:	
 12424                           
 12425                           	psect	text57
 12426  0FAE                     __ptext57:	
 12427 ;; *************** function _EUSART_Read *****************
 12428 ;; Defined at:
 12429 ;;		line 130 in file "mcc_generated_files/eusart.c"
 12430 ;; Parameters:    Size  Location     Type
 12431 ;;		None
 12432 ;; Auto vars:     Size  Location     Type
 12433 ;;  readValue       1    1[COMMON] unsigned char 
 12434 ;; Return value:  Size  Location     Type
 12435 ;;                  1    wreg      unsigned char 
 12436 ;; Registers used:
 12437 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12438 ;; Tracked objects:
 12439 ;;		On entry : 10/0
 12440 ;;		On exit  : 1F/E
 12441 ;;		Unchanged: 0/0
 12442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;Total ram usage:        1 bytes
 12448 ;; Hardware stack levels used:    1
 12449 ;; Hardware stack levels required when called:    5
 12450 ;; This function calls:
 12451 ;;		Nothing
 12452 ;; This function is called by:
 12453 ;;		_Clear_RX_Buffer
 12454 ;;		_WiFly_CheckRecv
 12455 ;;		_WiFly_ReadChar
 12456 ;; This function uses a non-reentrant model
 12457 ;;
 12458                           
 12459                           
 12460                           ;psect for function _EUSART_Read
 12461  0FAE                     _EUSART_Read:	
 12462  0FAE                     l3343:	
 12463                           ;eusart.c: 134: while(0 == eusartRxCount)
 12464                           
 12465                           ;incstack = 0
 12466                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12467                           
 12468  0FAE  0021               	movlb	1	; select bank1
 12469  0FAF  0851               	movf	_eusartRxCount^(0+128),w	;volatile
 12470  0FB0  1903               	btfsc	3,2
 12471  0FB1  2FAE               	goto	l3343
 12472                           
 12473                           ;eusart.c: 136: }
 12474                           ;eusart.c: 138: readValue = eusartRxBuffer[eusartRxTail++];
 12475  0FB2  0020               	movlb	0	; select bank0
 12476  0FB3  086D               	movf	_eusartRxTail,w
 12477  0FB4  3EBE               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 12478  0FB5  0086               	movwf	6
 12479  0FB6  0187               	clrf	7
 12480  0FB7  0801               	movf	1,w
 12481  0FB8  00F1               	movwf	EUSART_Read@readValue
 12482  0FB9  0AED               	incf	_eusartRxTail,f	;volatile
 12483                           
 12484                           ;eusart.c: 139: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 12485  0FBA  3008               	movlw	8
 12486  0FBB  026D               	subwf	_eusartRxTail,w
 12487  0FBC  1803               	btfsc	3,0
 12488                           
 12489                           ;eusart.c: 140: {
 12490                           ;eusart.c: 141: eusartRxTail = 0;
 12491  0FBD  01ED               	clrf	_eusartRxTail	;volatile
 12492                           
 12493                           ;eusart.c: 142: }
 12494                           ;eusart.c: 143: PIE3bits.RCIE = 0;
 12495  0FBE  002E               	movlb	14	; select bank14
 12496  0FBF  1299               	bcf	25,5	;volatile
 12497                           
 12498                           ;eusart.c: 144: eusartRxCount--;
 12499  0FC0  0021               	movlb	1	; select bank1
 12500  0FC1  03D1               	decf	_eusartRxCount^(0+128),f	;volatile
 12501                           
 12502                           ;eusart.c: 145: PIE3bits.RCIE = 1;
 12503  0FC2  002E               	movlb	14	; select bank14
 12504  0FC3  1699               	bsf	25,5	;volatile
 12505                           
 12506                           ;eusart.c: 147: return readValue;
 12507  0FC4  0871               	movf	EUSART_Read@readValue,w
 12508  0FC5  0008               	return
 12509  0FC6                     __end_of_EUSART_Read:	
 12510                           
 12511                           	psect	intentry
 12512  0004                     __pintentry:	
 12513 ;; *************** function _INTERRUPT_InterruptManager *****************
 12514 ;; Defined at:
 12515 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;		None
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;		None
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      void 
 12522 ;; Registers used:
 12523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12524 ;; Tracked objects:
 12525 ;;		On entry : 0/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;Total ram usage:        0 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; Hardware stack levels required when called:    4
 12536 ;; This function calls:
 12537 ;;		Absolute function
 12538 ;;		_EUSART_Receive_ISR
 12539 ;;		_EUSART_Transmit_ISR
 12540 ;;		_TMR2_ISR
 12541 ;;		_TMR4_ISR
 12542 ;; This function is called by:
 12543 ;;		Interrupt level 1
 12544 ;; This function uses a non-reentrant model
 12545 ;;
 12546                           
 12547  0004                     _INTERRUPT_InterruptManager:	
 12548                           
 12549                           ;incstack = 0
 12550  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12551                           
 12552                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12553  0005  3180               	pagesel	$
 12554                           
 12555                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.TXIE == 1 && PIR3bits.TXIF
      +                           == 1)
 12556  0006  1F0B               	btfss	11,6	;volatile
 12557  0007  2813               	goto	i1l409
 12558  0008  002E               	movlb	14	; select bank14
 12559  0009  1A19               	btfsc	25,4	;volatile
 12560  000A  1E0F               	btfss	15,4	;volatile
 12561  000B  2813               	goto	i1l409
 12562                           
 12563                           ;interrupt_manager.c: 55: {
 12564                           ;interrupt_manager.c: 56: EUSART_TxDefaultInterruptHandler();
 12565  000C  0021               	movlb	1	; select bank1
 12566  000D  0868               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 12567  000E  008A               	movwf	10
 12568  000F  0867               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 12569  0010  000A               	callw
 12570  0011  3180               	pagesel	$
 12571                           
 12572                           ;interrupt_manager.c: 57: }
 12573  0012  2832               	goto	i1l417
 12574  0013                     i1l409:	
 12575                           
 12576                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE3bits.RCIE == 1 && PIR3bits
      +                          .RCIF == 1)
 12577  0013  1F0B               	btfss	11,6	;volatile
 12578  0014  2820               	goto	i1l411
 12579  0015  002E               	movlb	14	; select bank14
 12580  0016  1A99               	btfsc	25,5	;volatile
 12581  0017  1E8F               	btfss	15,5	;volatile
 12582  0018  2820               	goto	i1l411
 12583                           
 12584                           ;interrupt_manager.c: 59: {
 12585                           ;interrupt_manager.c: 60: EUSART_RxDefaultInterruptHandler();
 12586  0019  0021               	movlb	1	; select bank1
 12587  001A  0866               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 12588  001B  008A               	movwf	10
 12589  001C  0865               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 12590  001D  000A               	callw
 12591  001E  3180               	pagesel	$
 12592                           
 12593                           ;interrupt_manager.c: 61: }
 12594  001F  2832               	goto	i1l417
 12595  0020                     i1l411:	
 12596                           
 12597                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE4bits.TMR4IE == 1 && PIR4bi
      +                          ts.TMR4IF == 1)
 12598  0020  1F0B               	btfss	11,6	;volatile
 12599  0021  282A               	goto	i1l413
 12600  0022  002E               	movlb	14	; select bank14
 12601  0023  199A               	btfsc	26,3	;volatile
 12602  0024  1D90               	btfss	16,3	;volatile
 12603  0025  282A               	goto	i1l413
 12604                           
 12605                           ;interrupt_manager.c: 63: {
 12606                           ;interrupt_manager.c: 64: TMR4_ISR();
 12607  0026  318F  2767  3180   	fcall	_TMR4_ISR
 12608                           
 12609                           ;interrupt_manager.c: 65: }
 12610  0029  2832               	goto	i1l417
 12611  002A                     i1l413:	
 12612                           
 12613                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE4bits.TMR2IE == 1 && PIR4bi
      +                          ts.TMR2IF == 1)
 12614  002A  1F0B               	btfss	11,6	;volatile
 12615  002B  2832               	goto	i1l417
 12616  002C  002E               	movlb	14	; select bank14
 12617  002D  189A               	btfsc	26,1	;volatile
 12618  002E  1C90               	btfss	16,1	;volatile
 12619  002F  2832               	goto	i1l417
 12620                           
 12621                           ;interrupt_manager.c: 67: {
 12622                           ;interrupt_manager.c: 68: TMR2_ISR();
 12623  0030  318F  275B         	fcall	_TMR2_ISR
 12624  0032                     i1l417:	
 12625                           ;interrupt_manager.c: 69: }
 12626                           
 12627  0032  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12628  0033  0009               	retfie
 12629  0034                     __end_of_INTERRUPT_InterruptManager:	
 12630                           
 12631                           	psect	text59
 12632  0F67                     __ptext59:	
 12633 ;; *************** function _TMR4_ISR *****************
 12634 ;; Defined at:
 12635 ;;		line 167 in file "mcc_generated_files/tmr4.c"
 12636 ;; Parameters:    Size  Location     Type
 12637 ;;		None
 12638 ;; Auto vars:     Size  Location     Type
 12639 ;;		None
 12640 ;; Return value:  Size  Location     Type
 12641 ;;                  1    wreg      void 
 12642 ;; Registers used:
 12643 ;;		wreg, status,2, status,0, pclath, cstack
 12644 ;; Tracked objects:
 12645 ;;		On entry : 1F/E
 12646 ;;		On exit  : 0/0
 12647 ;;		Unchanged: 0/0
 12648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12653 ;;Total ram usage:        0 bytes
 12654 ;; Hardware stack levels used:    1
 12655 ;; Hardware stack levels required when called:    3
 12656 ;; This function calls:
 12657 ;;		Absolute function
 12658 ;;		_TMR4_DefaultInterruptHandler
 12659 ;;		_setFlag
 12660 ;; This function is called by:
 12661 ;;		_INTERRUPT_InterruptManager
 12662 ;; This function uses a non-reentrant model
 12663 ;;
 12664                           
 12665                           
 12666                           ;psect for function _TMR4_ISR
 12667  0F67                     _TMR4_ISR:	
 12668                           
 12669                           ;tmr4.c: 171: PIR4bits.TMR4IF = 0;
 12670                           
 12671                           ;incstack = 0
 12672                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 12673  0F67  1190               	bcf	16,3	;volatile
 12674                           
 12675                           ;tmr4.c: 173: if(TMR4_InterruptHandler)
 12676  0F68  0021               	movlb	1	; select bank1
 12677  0F69  0861               	movf	_TMR4_InterruptHandler^(0+128),w
 12678  0F6A  0462               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
 12679  0F6B  1903               	btfsc	3,2
 12680  0F6C  0008               	return
 12681                           
 12682                           ;tmr4.c: 174: {
 12683                           ;tmr4.c: 175: TMR4_InterruptHandler();
 12684  0F6D  0862               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
 12685  0F6E  008A               	movwf	10
 12686  0F6F  0861               	movf	_TMR4_InterruptHandler^(0+128),w
 12687  0F70  000A               	callw
 12688  0F71  318F               	pagesel	$
 12689  0F72  0008               	return
 12690  0F73                     __end_of_TMR4_ISR:	
 12691                           
 12692                           	psect	text60
 12693  0003                     __ptext60:	
 12694 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 12695 ;; Defined at:
 12696 ;;		line 184 in file "mcc_generated_files/tmr4.c"
 12697 ;; Parameters:    Size  Location     Type
 12698 ;;		None
 12699 ;; Auto vars:     Size  Location     Type
 12700 ;;		None
 12701 ;; Return value:  Size  Location     Type
 12702 ;;                  1    wreg      void 
 12703 ;; Registers used:
 12704 ;;		None
 12705 ;; Tracked objects:
 12706 ;;		On entry : 1F/1
 12707 ;;		On exit  : 1F/1
 12708 ;;		Unchanged: 1F/0
 12709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;Total ram usage:        0 bytes
 12715 ;; Hardware stack levels used:    1
 12716 ;; This function calls:
 12717 ;;		Nothing
 12718 ;; This function is called by:
 12719 ;;		_TMR4_Initialize
 12720 ;;		_TMR4_ISR
 12721 ;; This function uses a non-reentrant model
 12722 ;;
 12723                           
 12724                           
 12725                           ;psect for function _TMR4_DefaultInterruptHandler
 12726  0003                     _TMR4_DefaultInterruptHandler:	
 12727                           
 12728                           ;incstack = 0
 12729                           ; Regs used in _TMR4_DefaultInterruptHandler: []
 12730  0003  0008               	return
 12731  0004                     __end_of_TMR4_DefaultInterruptHandler:	
 12732                           
 12733                           	psect	text61
 12734  0F46                     __ptext61:	
 12735 ;; *************** function _setFlag *****************
 12736 ;; Defined at:
 12737 ;;		line 276 in file "main.c"
 12738 ;; Parameters:    Size  Location     Type
 12739 ;;		None
 12740 ;; Auto vars:     Size  Location     Type
 12741 ;;		None
 12742 ;; Return value:  Size  Location     Type
 12743 ;;                  1    wreg      void 
 12744 ;; Registers used:
 12745 ;;		status,2, status,0, pclath, cstack
 12746 ;; Tracked objects:
 12747 ;;		On entry : 1F/1
 12748 ;;		On exit  : 1F/1
 12749 ;;		Unchanged: 0/0
 12750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;Total ram usage:        0 bytes
 12756 ;; Hardware stack levels used:    1
 12757 ;; Hardware stack levels required when called:    2
 12758 ;; This function calls:
 12759 ;;		i1_TMR4_StopTimer
 12760 ;; This function is called by:
 12761 ;;		_main
 12762 ;;		_TMR4_ISR
 12763 ;; This function uses a non-reentrant model
 12764 ;;
 12765                           
 12766                           
 12767                           ;psect for function _setFlag
 12768  0F46                     _setFlag:	
 12769                           
 12770                           ;main.c: 277: TMR4_StopTimer();
 12771                           
 12772                           ;incstack = 0
 12773                           ; Regs used in _setFlag: [status,2+status,0+pclath+cstack]
 12774  0F46  274B               	fcall	i1_TMR4_StopTimer
 12775                           
 12776                           ;main.c: 278: pingTime = 1;
 12777  0F47  0021               	movlb	1	; select bank1
 12778  0F48  01CF               	clrf	_pingTime^(0+128)
 12779  0F49  0ACF               	incf	_pingTime^(0+128),f
 12780  0F4A  0008               	return
 12781  0F4B                     __end_of_setFlag:	
 12782  0F4B                     __ptext62:	
 12783 ;; *************** function i1_TMR4_StopTimer *****************
 12784 ;; Defined at:
 12785 ;;		line 127 in file "mcc_generated_files/tmr4.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;		None
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;		None
 12790 ;; Return value:  Size  Location     Type
 12791 ;;                  1    wreg      void 
 12792 ;; Registers used:
 12793 ;;		status,2, status,0, pclath, cstack
 12794 ;; Tracked objects:
 12795 ;;		On entry : 1F/1
 12796 ;;		On exit  : 1F/5
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;Total ram usage:        0 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; Hardware stack levels required when called:    1
 12806 ;; This function calls:
 12807 ;;		i1_TMR4_Stop
 12808 ;; This function is called by:
 12809 ;;		_setFlag
 12810 ;; This function uses a non-reentrant model
 12811 ;;
 12812                           
 12813                           
 12814                           ;psect for function i1_TMR4_StopTimer
 12815  0F4B                     i1_TMR4_StopTimer:	
 12816                           
 12817                           ;tmr4.c: 129: TMR4_Stop();
 12818                           
 12819                           ;incstack = 0
 12820                           ; Regs used in i1_TMR4_StopTimer: [status,2+status,0+pclath+cstack]
 12821  0F4B  274D               	fcall	i1_TMR4_Stop
 12822  0F4C  0008               	return
 12823  0F4D                     __end_ofi1_TMR4_StopTimer:	
 12824  0F4D                     __ptext63:	
 12825 ;; *************** function i1_TMR4_Stop *****************
 12826 ;; Defined at:
 12827 ;;		line 121 in file "mcc_generated_files/tmr4.c"
 12828 ;; Parameters:    Size  Location     Type
 12829 ;;		None
 12830 ;; Auto vars:     Size  Location     Type
 12831 ;;		None
 12832 ;; Return value:  Size  Location     Type
 12833 ;;                  1    wreg      void 
 12834 ;; Registers used:
 12835 ;;		None
 12836 ;; Tracked objects:
 12837 ;;		On entry : 1F/1
 12838 ;;		On exit  : 1F/5
 12839 ;;		Unchanged: 0/0
 12840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;Total ram usage:        0 bytes
 12846 ;; Hardware stack levels used:    1
 12847 ;; This function calls:
 12848 ;;		Nothing
 12849 ;; This function is called by:
 12850 ;;		i1_TMR4_StopTimer
 12851 ;; This function uses a non-reentrant model
 12852 ;;
 12853                           
 12854                           
 12855                           ;psect for function i1_TMR4_Stop
 12856  0F4D                     i1_TMR4_Stop:	
 12857                           
 12858                           ;tmr4.c: 124: T4CONbits.TMR4ON = 0;
 12859                           
 12860                           ;incstack = 0
 12861                           ; Regs used in i1_TMR4_Stop: []
 12862  0F4D  0025               	movlb	5	; select bank5
 12863  0F4E  1394               	bcf	20,7	;volatile
 12864  0F4F  0008               	return
 12865  0F50                     __end_ofi1_TMR4_Stop:	
 12866                           
 12867                           	psect	text64
 12868  0F5B                     __ptext64:	
 12869 ;; *************** function _TMR2_ISR *****************
 12870 ;; Defined at:
 12871 ;;		line 167 in file "mcc_generated_files/tmr2.c"
 12872 ;; Parameters:    Size  Location     Type
 12873 ;;		None
 12874 ;; Auto vars:     Size  Location     Type
 12875 ;;		None
 12876 ;; Return value:  Size  Location     Type
 12877 ;;                  1    wreg      void 
 12878 ;; Registers used:
 12879 ;;		wreg, status,2, status,0, pclath, cstack
 12880 ;; Tracked objects:
 12881 ;;		On entry : 1F/E
 12882 ;;		On exit  : 0/0
 12883 ;;		Unchanged: 0/0
 12884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;Total ram usage:        0 bytes
 12890 ;; Hardware stack levels used:    1
 12891 ;; Hardware stack levels required when called:    2
 12892 ;; This function calls:
 12893 ;;		Absolute function
 12894 ;;		_TMR2_DefaultInterruptHandler
 12895 ;;		_blink
 12896 ;; This function is called by:
 12897 ;;		_INTERRUPT_InterruptManager
 12898 ;; This function uses a non-reentrant model
 12899 ;;
 12900                           
 12901                           
 12902                           ;psect for function _TMR2_ISR
 12903  0F5B                     _TMR2_ISR:	
 12904                           
 12905                           ;tmr2.c: 171: PIR4bits.TMR2IF = 0;
 12906                           
 12907                           ;incstack = 0
 12908                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 12909  0F5B  1090               	bcf	16,1	;volatile
 12910                           
 12911                           ;tmr2.c: 173: if(TMR2_InterruptHandler)
 12912  0F5C  0021               	movlb	1	; select bank1
 12913  0F5D  0863               	movf	_TMR2_InterruptHandler^(0+128),w
 12914  0F5E  0464               	iorwf	(_TMR2_InterruptHandler+1)^(0+128),w
 12915  0F5F  1903               	btfsc	3,2
 12916  0F60  0008               	return
 12917                           
 12918                           ;tmr2.c: 174: {
 12919                           ;tmr2.c: 175: TMR2_InterruptHandler();
 12920  0F61  0864               	movf	(_TMR2_InterruptHandler+1)^(0+128),w
 12921  0F62  008A               	movwf	10
 12922  0F63  0863               	movf	_TMR2_InterruptHandler^(0+128),w
 12923  0F64  000A               	callw
 12924  0F65  318F               	pagesel	$
 12925  0F66  0008               	return
 12926  0F67                     __end_of_TMR2_ISR:	
 12927                           
 12928                           	psect	text65
 12929  0002                     __ptext65:	
 12930 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 12931 ;; Defined at:
 12932 ;;		line 184 in file "mcc_generated_files/tmr2.c"
 12933 ;; Parameters:    Size  Location     Type
 12934 ;;		None
 12935 ;; Auto vars:     Size  Location     Type
 12936 ;;		None
 12937 ;; Return value:  Size  Location     Type
 12938 ;;                  1    wreg      void 
 12939 ;; Registers used:
 12940 ;;		None
 12941 ;; Tracked objects:
 12942 ;;		On entry : 1F/1
 12943 ;;		On exit  : 1F/1
 12944 ;;		Unchanged: 1F/0
 12945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12950 ;;Total ram usage:        0 bytes
 12951 ;; Hardware stack levels used:    1
 12952 ;; This function calls:
 12953 ;;		Nothing
 12954 ;; This function is called by:
 12955 ;;		_TMR2_Initialize
 12956 ;;		_TMR2_ISR
 12957 ;; This function uses a non-reentrant model
 12958 ;;
 12959                           
 12960                           
 12961                           ;psect for function _TMR2_DefaultInterruptHandler
 12962  0002                     _TMR2_DefaultInterruptHandler:	
 12963                           
 12964                           ;incstack = 0
 12965                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 12966  0002  0008               	return
 12967  0003                     __end_of_TMR2_DefaultInterruptHandler:	
 12968                           
 12969                           	psect	text66
 12970  0F50                     __ptext66:	
 12971 ;; *************** function _blink *****************
 12972 ;; Defined at:
 12973 ;;		line 272 in file "main.c"
 12974 ;; Parameters:    Size  Location     Type
 12975 ;;		None
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;		None
 12978 ;; Return value:  Size  Location     Type
 12979 ;;                  1    wreg      void 
 12980 ;; Registers used:
 12981 ;;		wreg, status,2, status,0, pclath, cstack
 12982 ;; Tracked objects:
 12983 ;;		On entry : 1F/1
 12984 ;;		On exit  : 1F/1
 12985 ;;		Unchanged: 0/0
 12986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;Total ram usage:        0 bytes
 12992 ;; Hardware stack levels used:    1
 12993 ;; Hardware stack levels required when called:    1
 12994 ;; This function calls:
 12995 ;;		i1_SetIndication
 12996 ;; This function is called by:
 12997 ;;		_main
 12998 ;;		_TMR2_ISR
 12999 ;; This function uses a non-reentrant model
 13000 ;;
 13001                           
 13002                           
 13003                           ;psect for function _blink
 13004  0F50                     _blink:	
 13005                           
 13006                           ;main.c: 273: SetIndication(!indStatus);
 13007                           
 13008                           ;incstack = 0
 13009                           ; Regs used in _blink: [wreg+status,2+status,0+pclath+cstack]
 13010  0F50  084E               	movf	_indStatus^(0+128),w
 13011  0F51  1D03               	btfss	3,2
 13012  0F52  2F55               	goto	u217_20
 13013  0F53  3001               	movlw	1
 13014  0F54  2F56               	goto	u218_20
 13015  0F55                     u217_20:	
 13016  0F55  3000               	movlw	0
 13017  0F56                     u218_20:	
 13018  0F56  2758               	fcall	i1_SetIndication
 13019  0F57  0008               	return
 13020  0F58                     __end_of_blink:	
 13021  0F58                     __ptext67:	
 13022 ;; *************** function i1_SetIndication *****************
 13023 ;; Defined at:
 13024 ;;		line 80 in file "main.c"
 13025 ;; Parameters:    Size  Location     Type
 13026 ;;  set             1    wreg     unsigned char 
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;  set             1    0[COMMON] unsigned char 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  1    wreg      void 
 13031 ;; Registers used:
 13032 ;;		wreg
 13033 ;; Tracked objects:
 13034 ;;		On entry : 1F/1
 13035 ;;		On exit  : 1F/1
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;Total ram usage:        1 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; This function calls:
 13045 ;;		Nothing
 13046 ;; This function is called by:
 13047 ;;		_blink
 13048 ;; This function uses a non-reentrant model
 13049 ;;
 13050                           
 13051                           
 13052                           ;psect for function i1_SetIndication
 13053  0F58                     i1_SetIndication:	
 13054                           
 13055                           ;incstack = 0
 13056                           ; Regs used in i1_SetIndication: [wreg]
 13057                           ;i1SetIndication@set stored from wreg
 13058  0F58  00F0               	movwf	i1SetIndication@set
 13059                           
 13060                           ;main.c: 81: indStatus = set;
 13061  0F59  00CE               	movwf	_indStatus^(0+128)
 13062  0F5A  0008               	return
 13063  0F5B                     __end_ofi1_SetIndication:	
 13064                           
 13065                           	psect	text68
 13066  0F96                     __ptext68:	
 13067 ;; *************** function _EUSART_Transmit_ISR *****************
 13068 ;; Defined at:
 13069 ;;		line 173 in file "mcc_generated_files/eusart.c"
 13070 ;; Parameters:    Size  Location     Type
 13071 ;;		None
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;		None
 13074 ;; Return value:  Size  Location     Type
 13075 ;;                  1    wreg      void 
 13076 ;; Registers used:
 13077 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13078 ;; Tracked objects:
 13079 ;;		On entry : 1F/1
 13080 ;;		On exit  : 10/0
 13081 ;;		Unchanged: 0/0
 13082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13087 ;;Total ram usage:        0 bytes
 13088 ;; Hardware stack levels used:    1
 13089 ;; This function calls:
 13090 ;;		Nothing
 13091 ;; This function is called by:
 13092 ;;		_EUSART_Initialize
 13093 ;;		_INTERRUPT_InterruptManager
 13094 ;; This function uses a non-reentrant model
 13095 ;;
 13096                           
 13097                           
 13098                           ;psect for function _EUSART_Transmit_ISR
 13099  0F96                     _EUSART_Transmit_ISR:	
 13100                           
 13101                           ;eusart.c: 177: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 13102                           
 13103                           ;incstack = 0
 13104                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13105  0F96  3008               	movlw	8
 13106  0F97  026A               	subwf	_eusartTxBufferRemaining^(0+128),w
 13107  0F98  1803               	skipnc
 13108  0F99  2FAB               	goto	i1l324
 13109                           
 13110                           ;eusart.c: 178: {
 13111                           ;eusart.c: 179: TX1REG = eusartTxBuffer[eusartTxTail++];
 13112  0F9A  0020               	movlb	0	; select bank0
 13113  0F9B  086F               	movf	_eusartTxTail,w
 13114  0F9C  3EC6               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 13115  0F9D  0086               	movwf	6
 13116  0F9E  0187               	clrf	7
 13117  0F9F  0801               	movf	1,w
 13118  0FA0  0022               	movlb	2	; select bank2
 13119  0FA1  009A               	movwf	26	;volatile
 13120  0FA2  0020               	movlb	0	; select bank0
 13121  0FA3  0AEF               	incf	_eusartTxTail,f	;volatile
 13122                           
 13123                           ;eusart.c: 180: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13124  0FA4  3008               	movlw	8
 13125  0FA5  026F               	subwf	_eusartTxTail,w
 13126  0FA6  1803               	btfsc	3,0
 13127                           
 13128                           ;eusart.c: 181: {
 13129                           ;eusart.c: 182: eusartTxTail = 0;
 13130  0FA7  01EF               	clrf	_eusartTxTail	;volatile
 13131                           
 13132                           ;eusart.c: 183: }
 13133                           ;eusart.c: 184: eusartTxBufferRemaining++;
 13134  0FA8  0021               	movlb	1	; select bank1
 13135  0FA9  0AEA               	incf	_eusartTxBufferRemaining^(0+128),f	;volatile
 13136                           
 13137                           ;eusart.c: 185: }
 13138  0FAA  0008               	return
 13139  0FAB                     i1l324:	
 13140                           
 13141                           ;eusart.c: 186: else
 13142                           ;eusart.c: 187: {
 13143                           ;eusart.c: 188: PIE3bits.TXIE = 0;
 13144  0FAB  002E               	movlb	14	; select bank14
 13145  0FAC  1219               	bcf	25,4	;volatile
 13146  0FAD  0008               	return
 13147  0FAE                     __end_of_EUSART_Transmit_ISR:	
 13148                           
 13149                           	psect	text69
 13150  0F80                     __ptext69:	
 13151 ;; *************** function _EUSART_Receive_ISR *****************
 13152 ;; Defined at:
 13153 ;;		line 192 in file "mcc_generated_files/eusart.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;		None
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;		None
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  1    wreg      void 
 13160 ;; Registers used:
 13161 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13162 ;; Tracked objects:
 13163 ;;		On entry : 1F/1
 13164 ;;		On exit  : 1F/1
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;Total ram usage:        0 bytes
 13172 ;; Hardware stack levels used:    1
 13173 ;; This function calls:
 13174 ;;		Nothing
 13175 ;; This function is called by:
 13176 ;;		_EUSART_Initialize
 13177 ;;		_INTERRUPT_InterruptManager
 13178 ;; This function uses a non-reentrant model
 13179 ;;
 13180                           
 13181                           
 13182                           ;psect for function _EUSART_Receive_ISR
 13183  0F80                     _EUSART_Receive_ISR:	
 13184                           
 13185                           ;eusart.c: 195: if(1 == RC1STAbits.OERR)
 13186                           
 13187                           ;incstack = 0
 13188                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13189  0F80  0022               	movlb	2	; select bank2
 13190  0F81  1C9D               	btfss	29,1	;volatile
 13191  0F82  2F85               	goto	i1l3169
 13192                           
 13193                           ;eusart.c: 196: {
 13194                           ;eusart.c: 199: RC1STAbits.CREN = 0;
 13195  0F83  121D               	bcf	29,4	;volatile
 13196                           
 13197                           ;eusart.c: 200: RC1STAbits.CREN = 1;
 13198  0F84  161D               	bsf	29,4	;volatile
 13199  0F85                     i1l3169:	
 13200                           
 13201                           ;eusart.c: 201: }
 13202                           ;eusart.c: 204: eusartRxBuffer[eusartRxHead++] = RC1REG;
 13203  0F85  0020               	movlb	0	; select bank0
 13204  0F86  086E               	movf	_eusartRxHead,w
 13205  0F87  3EBE               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 13206  0F88  0086               	movwf	6
 13207  0F89  0187               	clrf	7
 13208  0F8A  0022               	movlb	2	; select bank2
 13209  0F8B  0819               	movf	25,w	;volatile
 13210  0F8C  0081               	movwf	1
 13211  0F8D  0020               	movlb	0	; select bank0
 13212  0F8E  0AEE               	incf	_eusartRxHead,f	;volatile
 13213                           
 13214                           ;eusart.c: 205: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13215  0F8F  3008               	movlw	8
 13216  0F90  026E               	subwf	_eusartRxHead,w
 13217  0F91  1803               	btfsc	3,0
 13218                           
 13219                           ;eusart.c: 206: {
 13220                           ;eusart.c: 207: eusartRxHead = 0;
 13221  0F92  01EE               	clrf	_eusartRxHead	;volatile
 13222                           
 13223                           ;eusart.c: 208: }
 13224                           ;eusart.c: 209: eusartRxCount++;
 13225  0F93  0021               	movlb	1	; select bank1
 13226  0F94  0AD1               	incf	_eusartRxCount^(0+128),f	;volatile
 13227  0F95  0008               	return
 13228  0F96                     __end_of_EUSART_Receive_ISR:	
 13229  007E                     btemp	set	126	;btemp
 13230  007E                     int$flags	set	126
 13231  007E                     wtemp0	set	126


Data Sizes:
    Strings     709
    Constant    69
    Data        43
    BSS         24
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     77      80
    BANK1            80     15      76
    BANK2            80      0      13
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    S31$4$0	PTR void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S31$5$0	PTR void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_24(CODE[8]), STR_21(CODE[7]), errStr(BANK1[4]), failedStr(BANK1[7]), 
		 -> STR_18(CODE[5]), STR_16(CODE[7]), STR_14(CODE[8]), openStr(CODE[5]), 
		 -> STR_12(CODE[6]), hardRebootStr(CODE[6]), softRebootStr(CODE[7]), aokStr(CODE[4]), 
		 -> endStr(CODE[5]), cmdStr(CODE[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_24(CODE[8]), STR_21(CODE[7]), errStr(BANK1[4]), failedStr(BANK1[7]), 
		 -> STR_18(CODE[5]), STR_16(CODE[7]), STR_14(CODE[8]), openStr(CODE[5]), 
		 -> STR_12(CODE[6]), hardRebootStr(CODE[6]), softRebootStr(CODE[7]), aokStr(CODE[4]), 
		 -> endStr(CODE[5]), cmdStr(CODE[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_30(CODE[7]), sprintf@c(BANK0[1]), STR_29(CODE[10]), STR_28(CODE[4]), 
		 -> STR_23(CODE[5]), STR_22(CODE[12]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_27(CODE[11]), STR_26(CODE[14]), STR_25(CODE[10]), STR_20(CODE[13]), 
		 -> STR_13(CODE[13]), STR_9(CODE[19]), STR_8(CODE[25]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 40
		 -> Knock@knockString(BANK1[10]), Validate@valString(BANK1[13]), Pair@pairString(BANK1[9]), WiFly_SendCMD_DoubleArg@txBuffer(BANK0[40]), 
		 -> WiFly_SendCMD_SingleArg@txBuffer(BANK0[40]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), setFlag(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR4_DefaultInterruptHandler(), Absolute function(), setFlag(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), blink(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), blink(), 

    connect_network@passwd	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_29(CODE[10]), 

    connect_network@ssid	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_28(CODE[4]), 

    send_message@message	PTR const unsigned char  size(1) Largest target is 13
		 -> Knock@knockString(BANK1[10]), Validate@valString(BANK1[13]), Pair@pairString(BANK1[9]), 

    WaitResponse@chkString	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_24(CODE[8]), STR_21(CODE[7]), 

    connect_socket@port	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_23(CODE[5]), 

    connect_socket@addr	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_22(CODE[12]), 

    CheckResponse@chkString3	PTR const unsigned char  size(1) Largest target is 4
		 -> errStr(BANK1[4]), 

    CheckResponse@chkString2	PTR const unsigned char  size(1) Largest target is 7
		 -> failedStr(BANK1[7]), 

    CheckResponse@chkString1	PTR const unsigned char  size(2) Largest target is 5
		 -> openStr(CODE[5]), 

    EUSART_SetRxInterruptHandler@handler	PTR void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@handler	PTR void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    WiFly_Example_InitializeAsClient@ssid	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_28(CODE[4]), 

    WiFly_Example_InitializeAsClient@password	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_29(CODE[10]), 

    WiFly_SendCMD@cmd	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_10(CODE[18]), STR_7(CODE[16]), STR_6(CODE[21]), 

    WiFly_SendCMD_DoubleArg@arg2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_23(CODE[5]), 

    WiFly_SendCMD_DoubleArg@arg1	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_22(CODE[12]), 

    WiFly_SendCMD_DoubleArg@cmdFormat	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_20(CODE[13]), STR_13(CODE[13]), 

    WiFly_SendCMD_SingleArg@arg	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_29(CODE[10]), STR_28(CODE[4]), 

    WiFly_SendCMD_SingleArg@cmdFormat	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_9(CODE[19]), STR_8(CODE[25]), 

    WiFly_CheckRecv@chkString	PTR const unsigned char  size(2) Largest target is 7
		 -> openStr(CODE[5]), STR_12(CODE[6]), hardRebootStr(CODE[6]), softRebootStr(CODE[7]), 
		 -> aokStr(CODE[4]), endStr(CODE[5]), cmdStr(CODE[4]), 

    WiFly_SendString@sendString	PTR const unsigned char  size(2) Largest target is 387
		 -> Knock@knockString(BANK1[10]), Validate@valString(BANK1[13]), Pair@pairString(BANK1[9]), STR_19(CODE[387]), 
		 -> STR_17(CODE[9]), STR_15(CODE[14]), STR_11(CODE[21]), STR_10(CODE[18]), 
		 -> STR_7(CODE[16]), STR_6(CODE[21]), STR_5(CODE[16]), STR_4(CODE[7]), 
		 -> STR_3(CODE[9]), STR_2(CODE[7]), 

    S31$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    uart.Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    S31$TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    uart.TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S31$TransmitReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    uart.TransmitReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    S31$TransmitDone	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    uart.TransmitDone	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    S31$SetTxISR	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    uart.SetTxISR	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    S31$SetRxISR	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    uart.SetRxISR	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    S31$RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    uart.RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S31$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    uart.Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    S31$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    uart.Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S31$DataReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    uart.DataReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    WiFly_Send@command	PTR unsigned char  size(2) Largest target is 387
		 -> Knock@knockString(BANK1[10]), Validate@valString(BANK1[13]), Pair@pairString(BANK1[9]), STR_19(CODE[387]), 
		 -> STR_17(CODE[9]), STR_15(CODE[14]), STR_11(CODE[21]), STR_10(CODE[18]), 
		 -> STR_7(CODE[16]), STR_6(CODE[21]), STR_5(CODE[16]), STR_4(CODE[7]), 
		 -> STR_3(CODE[9]), WiFly_SendCMD_DoubleArg@txBuffer(BANK0[40]), WiFly_SendCMD_SingleArg@txBuffer(BANK0[40]), STR_2(CODE[7]), 
		 -> STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _WiFly_FactoryReset->_WiFly_CheckRecv
    _WiFly_SendCMD->_WiFly_CheckRecv
    _WiFly_RebootCMD->_WiFly_CheckRecv
    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _WiFly_EnterCMDMode->_WiFly_CheckRecv
    _WiFly_CheckRecv->_strlen
    _CheckResponse->_strlen
    _WiFly_SendString->_WiFly_Send
    _WiFly_Send->_EUSART_Write
    _Clear_RX_Buffer->_EUSART_Read
    _get_response->_WaitResponse
    _goto_mode->_SetIndication
    _WaitResponse->_strlen
    _WiFly_ReadChar->_EUSART_Read

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _blink->i1_SetIndication

Critical Paths under _main in BANK0

    _connect_network->_WiFly_Example_InitializeAsClient
    _WiFly_Example_InitializeAsClient->_WiFly_SendCMD_SingleArg
    _WiFly_SendCMD_SingleArg->_sprintf
    _WiFly_FactoryReset->_WiFly_SendCMD
    _WiFly_SendCMD->_WiFly_CheckRecv
    _WiFly_RebootCMD->_WiFly_CheckRecv
    _Validate->_send_message
    _Pair->_send_message
    _Knock->_send_message
    _send_message->_connect_socket
    _connect_socket->_WiFly_SendCMD_DoubleArg
    _WiFly_SendCMD_DoubleArg->_sprintf
    _sprintf->___lwmod
    _WiFly_EnterCMDMode->_WiFly_CheckRecv
    _get_response->_WaitResponse

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Validate

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  112298
                              _Knock
                               _Pair
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
           _TMR4_SetInterruptHandler
                     _TMR4_StopTimer
                           _Validate
                 _WiFly_FactoryReset
                    _connect_network
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _connect_network                                      4     0      4   39634
                                              0 BANK1      4     0      4
   _WiFly_Example_InitializeAsClient
 ---------------------------------------------------------------------------------
 (2) _WiFly_Example_InitializeAsClient                     4     0      4   39418
                                             70 BANK0      4     0      4
                    _WiFly_CheckRecv
                 _WiFly_FactoryReset
                   _WiFly_SaveConfig
                      _WiFly_SendCMD
            _WiFly_SendCMD_SingleArg
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (3) _WiFly_SendCMD_SingleArg                             44    40      4    9091
                                             26 BANK0     44    40      4
                    _Clear_RX_Buffer
                   _WiFly_CheckInCMD
                    _WiFly_CheckRecv
                         _WiFly_Send
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _WiFly_FactoryReset                                   2     2      0   17270
                                              9 COMMON     2     2      0
                    _WiFly_CheckRecv
                    _WiFly_RebootCMD
                   _WiFly_SaveConfig
                      _WiFly_SendCMD
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (3) _WiFly_SendCMD                                        2     0      2    4691
                                              4 BANK0      2     0      2
                   _WiFly_CheckInCMD
                    _WiFly_CheckRecv
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (3) _WiFly_SaveConfig                                     0     0      0    5575
                    _WiFly_RebootCMD
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (4) _WiFly_RebootCMD                                      0     0      0    4429
                   _WiFly_CheckInCMD
                    _WiFly_CheckRecv
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (1) _Validate                                            15    15      0   18175
                                              0 BANK1     15    15      0
                    _TMR4_StartTimer
                       _get_response
                          _goto_mode
                       _send_message
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     495
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                    _WWDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WWDT_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     150
           _TMR4_SetInterruptHandler
                         _TMR4_Start
 ---------------------------------------------------------------------------------
 (1) _TMR4_SetInterruptHandler                             2     0      2     150
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     150
           _TMR2_SetInterruptHandler
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     150
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     172
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      86
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      86
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Pair                                                11    11      0   18258
                                              0 BANK1     11    11      0
                     _WiFly_ReadChar
                       _eeprom_write
                       _get_response
                          _goto_mode
                       _send_message
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         2     1      1     108
                                              1 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Knock                                               12    12      0   18144
                                              0 BANK1     12    12      0
                     _TMR4_StopTimer
                       _get_response
                          _goto_mode
                       _send_message
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _send_message                                         1     1      0   11869
                                             76 BANK0      1     1      0
                    _Clear_RX_Buffer
                       _WaitResponse
                   _WiFly_SendString
                     _connect_socket
                          _goto_mode
 ---------------------------------------------------------------------------------
 (3) _connect_socket                                       4     0      4    9564
                                             72 BANK0      4     0      4
                      _CheckResponse
            _WiFly_SendCMD_DoubleArg
 ---------------------------------------------------------------------------------
 (4) _WiFly_SendCMD_DoubleArg                             46    40      6    7787
                                             26 BANK0     46    40      6
                    _Clear_RX_Buffer
                   _WiFly_CheckInCMD
                         _WiFly_Send
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             29    23      6    4879
                                              1 BANK0     25    19      6
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     220
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     386
                                              8 COMMON     4     0      4
                                              0 BANK0      1     1      0
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     418
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               3     2      1     156
                                              1 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _WiFly_CheckInCMD                                     0     0      0    1854
                 _WiFly_EnterCMDMode
 ---------------------------------------------------------------------------------
 (5) _WiFly_EnterCMDMode                                   0     0      0    1854
                    _Clear_RX_Buffer
                    _WiFly_CheckRecv
                         _WiFly_Send
 ---------------------------------------------------------------------------------
 (4) _WiFly_CheckRecv                                      7     5      2    1429
                                              6 COMMON     3     1      2
                                              0 BANK0      4     4      0
                        _EUSART_Read *
                 _EUSART_is_rx_ready
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _CheckResponse                                       18    14      4    1561
                                              6 COMMON     5     1      4
                                              0 BANK0     13    13      0
                     _WiFly_ReadChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _WiFly_SendString                                     2     0      2    1146
                                              5 COMMON     2     0      2
                    _Clear_RX_Buffer
                         _WiFly_Send
 ---------------------------------------------------------------------------------
 (4) _WiFly_Send                                           3     1      2     388
                                              2 COMMON     3     1      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     0      1      87
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Clear_RX_Buffer                                      0     0      0      37
                        _EUSART_Read *
                 _EUSART_is_rx_ready
 ---------------------------------------------------------------------------------
 (2) _get_response                                         1     1      0    1125
                                              9 COMMON     1     1      0
                       _WaitResponse
                     _WiFly_ReadChar
                          _goto_mode
 ---------------------------------------------------------------------------------
 (3) _goto_mode                                            1     1      0      62
                                              2 COMMON     1     1      0
                    _ClearIndicators
                      _SetIndication
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                    _TMR4_StartTimer
                     _TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (4) _TMR4_StopTimer                                       0     0      0       0
                          _TMR4_Stop
 ---------------------------------------------------------------------------------
 (5) _TMR4_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR4_StartTimer                                      0     0      0       0
                         _TMR4_Start
 ---------------------------------------------------------------------------------
 (5) _TMR4_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR2_StopTimer                                       0     0      0       0
                          _TMR2_Stop
 ---------------------------------------------------------------------------------
 (5) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (5) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SetIndication                                        1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ClearIndicators                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WaitResponse                                         7     5      2     930
                                              6 COMMON     3     1      2
                                              0 BANK0      4     4      0
                     _WiFly_ReadChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               5     3      2     572
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (5) _WiFly_ReadChar                                       0     0      0      37
                        _EUSART_Read *
                 _EUSART_is_rx_ready
 ---------------------------------------------------------------------------------
 (5) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Read                                          1     1      0      37
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          0     0      0      22
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR4_ISR                                            0     0      0       0
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
                            _setFlag *
 ---------------------------------------------------------------------------------
 (12) _setFlag                                             0     0      0       0
                   i1_TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (13) i1_TMR4_StopTimer                                    0     0      0       0
                        i1_TMR4_Stop
 ---------------------------------------------------------------------------------
 (14) i1_TMR4_Stop                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR4_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR2_ISR                                            0     0      0      22
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                              _blink *
 ---------------------------------------------------------------------------------
 (12) _blink                                               0     0      0      22
                    i1_SetIndication
 ---------------------------------------------------------------------------------
 (13) i1_SetIndication                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Knock
     _TMR4_StopTimer
       _TMR4_Stop
     _get_response
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_ReadChar
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _goto_mode
       _ClearIndicators
       _SetIndication
       _TMR2_StartTimer
         _TMR2_Start
       _TMR2_StopTimer
         _TMR2_Stop
       _TMR4_StartTimer
         _TMR4_Start
       _TMR4_StopTimer
         _TMR4_Stop
     _send_message
       _Clear_RX_Buffer
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
       _connect_socket
         _CheckResponse
           _WiFly_ReadChar
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _strlen
         _WiFly_SendCMD_DoubleArg
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_Send
             _EUSART_Write *
           _sprintf
             ___bmul
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _Pair
     _WiFly_ReadChar
       _EUSART_Read *
       _EUSART_is_rx_ready *
     _eeprom_write
     _get_response
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_ReadChar
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _goto_mode
       _ClearIndicators
       _SetIndication
       _TMR2_StartTimer
         _TMR2_Start
       _TMR2_StopTimer
         _TMR2_Stop
       _TMR4_StartTimer
         _TMR4_Start
       _TMR4_StopTimer
         _TMR4_Stop
     _send_message
       _Clear_RX_Buffer
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
       _connect_socket
         _CheckResponse
           _WiFly_ReadChar
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _strlen
         _WiFly_SendCMD_DoubleArg
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_Send
             _EUSART_Write *
           _sprintf
             ___bmul
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_Start
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
       _TMR4_Start
     _WWDT_Initialize
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR4_SetInterruptHandler
   _TMR4_StopTimer
     _TMR4_Stop
   _Validate
     _TMR4_StartTimer
       _TMR4_Start
     _get_response
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_ReadChar
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _goto_mode
       _ClearIndicators
       _SetIndication
       _TMR2_StartTimer
         _TMR2_Start
       _TMR2_StopTimer
         _TMR2_Stop
       _TMR4_StartTimer
         _TMR4_Start
       _TMR4_StopTimer
         _TMR4_Stop
     _send_message
       _Clear_RX_Buffer
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
       _connect_socket
         _CheckResponse
           _WiFly_ReadChar
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _strlen
         _WiFly_SendCMD_DoubleArg
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_Send
             _EUSART_Write *
           _sprintf
             ___bmul
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _WiFly_FactoryReset
     _WiFly_CheckRecv
       _EUSART_Read *
       _EUSART_is_rx_ready *
       _strlen *
     _WiFly_RebootCMD
       _WiFly_CheckInCMD
         _WiFly_EnterCMDMode
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_CheckRecv
         _EUSART_Read *
         _EUSART_is_rx_ready *
         _strlen *
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
     _WiFly_SaveConfig
       _WiFly_RebootCMD
         _WiFly_CheckInCMD
           _WiFly_EnterCMDMode
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_CheckRecv
               _EUSART_Read *
               _EUSART_is_rx_ready *
               _strlen *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_CheckRecv
           _EUSART_Read *
           _EUSART_is_rx_ready *
           _strlen *
         _WiFly_SendString
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
     _WiFly_SendCMD
       _WiFly_CheckInCMD
         _WiFly_EnterCMDMode
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_CheckRecv
         _EUSART_Read *
         _EUSART_is_rx_ready *
         _strlen *
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
     _WiFly_SendString
       _Clear_RX_Buffer
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _WiFly_Send
         _EUSART_Write *
   _connect_network
     _WiFly_Example_InitializeAsClient
       _WiFly_CheckRecv
         _EUSART_Read *
         _EUSART_is_rx_ready *
         _strlen *
       _WiFly_FactoryReset
         _WiFly_CheckRecv
           _EUSART_Read *
           _EUSART_is_rx_ready *
           _strlen *
         _WiFly_RebootCMD
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_SendString
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_SaveConfig
           _WiFly_RebootCMD
             _WiFly_CheckInCMD
               _WiFly_EnterCMDMode
                 _Clear_RX_Buffer
                   _EUSART_Read *
                   _EUSART_is_rx_ready *
                 _WiFly_CheckRecv
                   _EUSART_Read *
                   _EUSART_is_rx_ready *
                   _strlen *
                 _WiFly_Send
                   _EUSART_Write *
             _WiFly_CheckRecv
               _EUSART_Read *
               _EUSART_is_rx_ready *
               _strlen *
             _WiFly_SendString
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_SendString
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_SendCMD
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_SendString
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_SendString
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_SaveConfig
         _WiFly_RebootCMD
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_SendString
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_SendString
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_SendCMD
         _WiFly_CheckInCMD
           _WiFly_EnterCMDMode
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_CheckRecv
               _EUSART_Read *
               _EUSART_is_rx_ready *
               _strlen *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_CheckRecv
           _EUSART_Read *
           _EUSART_is_rx_ready *
           _strlen *
         _WiFly_SendString
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_SendCMD_SingleArg
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_CheckInCMD
           _WiFly_EnterCMDMode
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_CheckRecv
               _EUSART_Read *
               _EUSART_is_rx_ready *
               _strlen *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_CheckRecv
           _EUSART_Read *
           _EUSART_is_rx_ready *
           _strlen *
         _WiFly_Send
           _EUSART_Write *
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
   _eeprom_read

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _TMR2_ISR *
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
     _blink *
       i1_SetIndication
   _TMR4_ISR *
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
     _setFlag *
       i1_TMR4_StopTimer
         i1_TMR4_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      F      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       D       9       16.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Aug 10 10:46:53 2017

            ?_EUSART_SetRxInterruptHandler 0071                           ??_WiFly_ReadChar 0072  
                 __size_of_WWDT_Initialize 0006           __end_of_TMR2_SetInterruptHandler 0347  
                           ___bmul@product 0072                                __CFG_CP$OFF 0000  
                                       PL2 0749                                         PL4 0758  
                                       PL6 0765                                         PL8 0771  
                                       _WR 40F1                              ?_get_response 0070  
                      ___wmul@multiplicand 0073                                        PL10 0777  
                                      PL20 07A8                                        PL12 0783  
                                      PL22 07AE                                        PL14 078F  
                                      PL24 07B4                                        PL16 0799  
                                      PL26 07BA                                        PL18 07A0  
                                      PL28 07BF                                __CFG_LVP$ON 0000  
                                      l151 0082                                        l318 0FD1  
                                      l512 01A0                                        l601 0130  
                                      l533 02E9                                        l812 04EA  
                                      l814 0454                                        l841 0503  
                                      l915 0326                                        l846 0517  
                                      l919 033B                                        l599 0140  
                                      l793 03F4                                        l795 03F6  
                                      l797 0403                                        l893 06EC  
                                      _GIE 005F                               __CFG_CPD$OFF 0000  
                                      _UID 00E9                          ??_WiFly_RebootCMD 0079  
      EUSART_SetRxInterruptHandler@handler 0071                            _TMR2_Initialize 0731  
                             __CFG_BORV$LO 0000                                        wreg 0009  
          __end_of_WiFly_SendCMD_DoubleArg 0320                     __end_of_connect_socket 0307  
                             ?_EUSART_Read 0070                               __CFG_ZCD$OFF 0000  
                                     l2403 0FC6                                       l2417 0FDF  
                                     l2425 0677                                       l2521 0627  
                                     l3401 06AF                                       l3049 0704  
                                     l2517 0623                                       l2509 0614  
                                     l3405 06BB                                       l3343 0FAE  
                                     l3415 01EF                                       l3335 02D7  
                                     l2471 06C6                                       l3503 049E  
                                     l3511 04B5                                       l3431 03F7  
                                     l3417 01F6                                       l3337 02E2  
                                     l3409 06BF                                       l2465 0605  
                                     l3521 04CD                                       l3505 04A8  
                                     l3441 0406                                       l2475 06CC  
                                     l3603 056C                                       l3515 04C1  
                                     l3373 064F                                       l3381 066D  
                                     l3613 057B                                       l3621 058A  
                                     l3605 056F                                       l3445 040E  
                                     l3453 0430                                       l3437 03FA  
                                     l3429 03EF                                       l3367 0250  
                                     l3391 0638                                       l3711 0281  
                                     l3383 005D                                       l2487 069A  
                                     l3631 0594                                       l3543 04FA  
                                     l3519 04C3                                       l3527 04D5  
                                     l3377 0665                                       l3369 0641  
                                     l3625 058F                                       l3481 0468  
                                     l3465 043D                                       l3811 022D  
                                     l3803 022A                                       l3723 029F  
                                     l3731 02AA                                       l3379 0668  
                                     l3539 04F8                                       l3483 0475  
                                     l3467 0452                                       l3725 02A1  
                                     l3717 0293                                       l3709 027E  
                                     l3637 059D                                       l3653 05DD  
                                     l3493 0497                                       l3477 0466  
                                     l3469 0456                                       l3719 0295  
                                     l3647 05CF                                       l3639 05B5  
                                     l3591 0553                                       l3575 052B  
                                     l3495 0499                                       l3663 03DE  
                                     l3673 06FB                                       l3737 02C2  
                                     l3657 05ED                                       l3649 05D7  
                                     l3585 0547                                       l3577 0533  
                                     l3665 05F4                                       l3489 048A  
                                     l3675 06FE                                       l3499 049C  
                                     l3677 03AC                                       l3861 01E6  
                                     l3597 055F                                       l3917 017D  
                                     l3933 01C6                                       l3925 01BA  
                                     l3669 006E                                       l3685 0691  
                                     l3687 06F8                                       l3679 0701  
                                     l3791 019B                                       l3783 0195  
                                     l3599 0562                                       l3777 018F  
                                     l3849 01D7                                       l3937 01CB  
                                     l3787 0199                                       l3957 00F3  
                                     l3949 00E7                                       l3993 0136  
                                     l3987 012B                                       l3997 013B  
                                     l3989 012D                                       STR_1 1183  
                                     STR_2 1150                                       STR_3 1114  
                                     STR_4 1149                                       STR_5 109D  
                                     STR_6 102E                                       STR_7 108D  
                                     STR_8 1000                                       STR_9 1057  
                                     _LATA 0016                                       _LATB 0017  
                                     _LATC 0018                                       u2080 0396  
                                     u3115 02B0                                       u3220 0157  
                                     u3125 02B8                                       u2341 06EB  
                                     u3135 02C0                                       u3055 05EB  
                                     u3240 01AC                                       u3145 02C8  
                                     u1465 061C                                       _T2PR 028D  
                                     u3155 02D0                                       u2615 06B5  
                                     u3280 00D9                                       u3185 0233  
                                     _T4PR 0293                                       u3357 03BE  
                                     u2575 0674                                       u2735 0483  
                                     u2745 0490                                       u2855 0514  
                                     u2875 0528                                       _WPUA 0F39  
                                     _WPUB 0F44                                       _WPUC 0F4F  
                           ??_eeprom_write 0072                                       _WPUE 0F65  
                        ?_WiFly_SaveConfig 0070                                       _Pair 014C  
                             __CFG_WRT$OFF 0000                              __CFG_FCMEN$ON 0000  
                         ?_ClearIndicators 0070                                       _main 00FC  
                                     _mode 00D0                                       _uart 1043  
                                     fsr0h 0005                                       fsr1h 0007  
                                     indf0 0000                                       fsr0l 0004  
                                     indf1 0001                                       fsr1l 0006  
                                     btemp 007E                         ??_WiFly_SaveConfig 0079  
                            __CFG_BOREN$ON 0000                          ?_WiFly_SendString 0075  
                                     start 0034                    CheckResponse@chkString1 0076  
                  CheckResponse@chkString2 0078                    CheckResponse@chkString3 0079  
                  __end_of_connect_network 06E9                         ??_WiFly_SendString 0077  
                            __CFG_CSWEN$ON 0000                          ___bmul@multiplier 0073  
                            __CFG_MCLRE$ON 0000                           ?_Clear_RX_Buffer 0070  
               ??_TMR4_SetInterruptHandler 0073                             ??_get_response 0079  
          __end_of_WiFly_SendCMD_SingleArg 00CC                              ?_EUSART_Write 0071  
           __size_of_OSCILLATOR_Initialize 0009                                      ?_Pair 0070  
            __end_of_OSCILLATOR_Initialize 0361                                      ?_main 0070  
                                    STR_10 106A                                      STR_11 1019  
                                    STR_20 10C9                                      STR_12 115D  
                                    STR_21 113B                                      STR_13 10C9  
                                    STR_30 1134                                      STR_14 1125  
                                    STR_22 10D6                                      STR_23 116D  
                                    STR_15 10BB                                      STR_31 107C  
                                    STR_24 1125                                      STR_16 1142  
                                    STR_17 110B                                      STR_25 1101  
                                    STR_18 1172                                      STR_26 10AD  
                                    STR_27 10E2                                      STR_19 07C4  
                                    STR_28 117F                                      STR_29 10F7  
                                    _T2CON 028E                                      _T4CON 0294  
                                    _T2HLT 028F                                      _T4HLT 0295  
                           __CFG_DEBUG$OFF 0000                            __end_of___lwdiv 062C  
                                    _T2TMR 028C                                      _T2RST 0291  
                                    i1l411 0020                                      i1l324 0FAB  
                                    i1l413 002A                                      i1l417 0032  
                                    i1l409 0013                            __end_of___lwmod 06C4  
                                    _T4TMR 0292                                      _T4RST 0297  
                                    _OSCEN 0891                                      _TRISA 0011  
                                    _TRISB 0012                                      _TRISC 0013  
                          _TMR4_Initialize 0398                                      _Knock 00CC  
                         __end_of_TMR2_ISR 0F67                            ?_connect_socket 0068  
                         __end_of_TMR4_ISR 0F73                                      _inCMD 00EB  
                                    _blink 0F50                            __end_of_dpowers 10F7  
                       __size_of_TMR2_Stop 0003                                ?_TMR2_Start 0070  
                       __size_of_TMR4_Stop 0003                            __end_of_isdigit 0607  
                              ?_TMR4_Start 0070                            __end_of_setFlag 0F4B  
                          __end_of_openStr 1168                                      pclath 000A  
              __size_of_WiFly_FactoryReset 0026                                Knock@F14741 00A0  
                                    status 0003                                      wtemp0 007E  
                          __end_of_sprintf 05F9                            _TMR2_StartTimer 0247  
                 __end_ofi1_TMR4_StopTimer 0F4D                            __initialization 0036  
                             __end_of_Pair 017F                   __size_ofi1_SetIndication 0003  
                             ?i1_TMR4_Stop 0070                               __end_of_main 014C  
                             __end_of_uart 1057                       CheckResponse@length1 0022  
                     CheckResponse@length2 0024                       CheckResponse@length3 0020  
                           ??_EUSART_Write 0072                         get_response@status 0079  
                  __end_of_TMR2_Initialize 0744                ?_INTERRUPT_InterruptManager 0070  
                                   ??_Pair 00D2             ??_EUSART_SetRxInterruptHandler 0073  
                 _TMR2_SetInterruptHandler 0341                                     ??_main 007C  
                        ??_WWDT_Initialize 0071                           __end_of_Validate 01D4  
         WiFly_SendCMD_DoubleArg@cmdFormat 003A                                 _WiFly_Send 0677  
                                   ?_Knock 0070       WiFly_Example_InitializeAsClient@ssid 0066  
                                   ?_blink 0070                                     _ANSELA 0F38  
                                   _ANSELB 0F43                                     _ANSELC 0F4E  
                       __CFG_RSTOSC$HFINT1 0000                 __end_of_EUSART_is_rx_ready 024B  
                                   _RC1REG 0119                                     _RC1STA 011D  
                                   _RC5PPS 0F25                                     _ODCONA 0F3A  
                                   _ODCONB 0F45                                     _ODCONC 0F50  
                                   i1l3169 0F85                                     u217_20 0F55  
                                   u218_20 0F56                                     _OSCFRQ 0893  
                                   _TX1REG 011A                                     _TX1STA 011E  
               WiFly_SendString@sendString 0075                            _TMR4_StartTimer 024F  
                           __CFG_PWRTE$OFF 0000                           ?_connect_network 00D2  
                     __size_of_eeprom_read 000F                                     ___bmul 0698  
         __size_of_WiFly_SendCMD_DoubleArg 0019                            _WiFly_CheckRecv 0641  
                                   ___wmul 06C4                             __CFG_STVREN$ON 0000  
                        __end_of_TMR2_Stop 0701                  __size_of_WiFly_CheckInCMD 0005  
                                   _cmdStr 117B                                     _aokStr 1177  
                        __end_of_TMR4_Stop 0704                                     _endStr 1168  
                                ??___lwdiv 0075                                  ??___lwmod 007C  
                      __size_of_TMR2_Start 0003                           WiFly_SendCMD@cmd 0024  
                      _EUSART_Transmit_ISR 0F96                                     _errStr 00BA  
                      __size_of_TMR4_Start 0003                    __end_of_TMR4_Initialize 03AC  
                   __size_of_WiFly_SendCMD 000C                       __end_of_eeprom_write 0341  
                                   _strlen 02D3                     __size_of_CheckResponse 0078  
     __end_of_TMR4_DefaultInterruptHandler 0004      __size_of_TMR4_DefaultInterruptHandler 0001  
             _TMR4_DefaultInterruptHandler 0003                                  ??_isdigit 0071  
                                ??_setFlag 0070                    __end_of_TMR2_StartTimer 0248  
 TMR4_SetInterruptHandler@InterruptHandler 0071   TMR2_SetInterruptHandler@InterruptHandler 0071  
                                ??_sprintf 0027                       ?_EUSART_Transmit_ISR 0070  
                     __end_of_get_response 01EF                       __size_of_EUSART_Read 0018  
                        _SYSTEM_Initialize 034D                    __end_of__initialization 005A  
         __size_of_WiFly_SendCMD_SingleArg 0019                            eeprom_read@addr 0071  
                       ?_SYSTEM_Initialize 0070                           SetIndication@set 0071  
     __end_of_EUSART_SetTxInterruptHandler 0731      __size_of_EUSART_SetTxInterruptHandler 0006  
             _EUSART_SetTxInterruptHandler 072B                        ___bmul@multiplicand 0071  
                          _WiFly_RebootCMD 006E                              __end_of_Knock 00FC  
                           __pcstackCOMMON 0070                               __pidataBANK1 0FE2  
                             __pidataBANK2 0F73                        ??_SYSTEM_Initialize 0073  
                                ?_TMR2_ISR 0070                              __end_of_blink 0F58  
                                ?_TMR4_ISR 0070                      __end_of_hardRebootStr 115D  
                         ?_TMR2_Initialize 0070                                 __end_ofPL2 0758  
                               __end_ofPL4 0765                                 __end_ofPL6 0771  
                               __end_ofPL8 0777                     __size_of_SetIndication 0004  
                        ??i1_SetIndication 0070           WiFly_SendCMD_SingleArg@cmdFormat 003A  
                       CheckResponse@input 0028                                ?_WiFly_Send 0072  
            ?_TMR4_DefaultInterruptHandler 0070                                    ??_Knock 00D2  
                        eeprom_write@value 0071                                    ??_blink 0071  
                  __end_of_TMR4_StartTimer 0250                  __end_of_SYSTEM_Initialize 0358  
                    ??_EUSART_Transmit_ISR 0070                               sprintf@width 0037  
              __size_of_WiFly_EnterCMDMode 0011                                 __pbssBANK0 006D  
                               __pbssBANK1 00BE                       __end_of_EUSART_Write 0FE2  
                            _WiFly_SendCMD 062C                              _CheckResponse 025B  
                  __end_of_WiFly_CheckRecv 0677                __size_of_EUSART_Receive_ISR 0016  
                    _TMR4_InterruptHandler 00E1            WiFly_SendCMD_DoubleArg@txBuffer 0040  
                       __size_of_goto_mode 0022                              ?_WaitResponse 0076  
                                ?_Validate 0070                                 __pmaintext 00FC  
                                  ?___bmul 0071              ?_EUSART_SetTxInterruptHandler 0071  
         _EUSART_TxDefaultInterruptHandler 00E7                                    ?___wmul 0071  
                          __CFG_PPS1WAY$ON 0000                                 ??_TMR2_ISR 0071  
                               ??_TMR4_ISR 0070                                 __pintentry 0004  
                __size_of_WiFly_SaveConfig 0007                       __size_ofi1_TMR4_Stop 0003  
                         ?_TMR4_Initialize 0070                              ?_send_message 0070  
                         ??_connect_socket 007C                  __size_of_WiFly_SendString 0009  
                                  ?_strlen 0071                           Knock@knockString 00D3  
                            _eusartRxCount 00D1                                    _SP1BRGH 011C  
                                  _SP1BRGL 011B                      connect_network@passwd 00D4  
                                  _OSCCON1 088D                                    _OSCCON3 088F  
                            Pair@returnVal 00DC                             Knock@returnVal 00DD  
                                  _NVMADRH 081B                                    _NVMADRL 081A  
                                  _NVMDATH 081D                                    _OSCTUNE 0892  
                                  _NVMDATL 081C                                    _NVMCON2 081F  
                                  _PPSLOCK 0E8F                                    _WDTCON0 080C  
                                  _WDTCON1 080D                               ??_TMR2_Start 0071  
                  __size_of_TMR2_StopTimer 0001                               ??_TMR4_Start 0071  
                         ?_TMR2_StartTimer 0070                      WaitResponse@chkString 0076  
                           ?_WiFly_SendCMD 0024                              _SetIndication 024B  
                  __end_of_WiFly_RebootCMD 0082                             ?_CheckResponse 0076  
      EUSART_SetTxInterruptHandler@handler 0071                             ??_WaitResponse 0078  
                               ??_Validate 00D2                            _WWDT_Initialize 03AF  
               ??_TMR2_SetInterruptHandler 0073                    _WiFly_SendCMD_DoubleArg 0307  
                      __size_of_WiFly_Send 001A                          ?i1_TMR4_StopTimer 0070  
                 __size_of_ClearIndicators 0003                      __size_of_eeprom_write 001C  
                     __CFG_SCANE$available 0000                    __size_of_TMR4_StopTimer 0001  
                          __size_of___bmul 000C                           _WiFly_CheckInCMD 0320  
                          __size_of___wmul 0015                                    ___lwdiv 0607  
                                  ___lwmod 06A4                         ??i1_TMR4_StopTimer 0070  
                           ??_send_message 007C                         __end_of_TMR2_Start 06FE  
                       __end_of_TMR4_Start 03AF                                    __ptext1 06E9  
                                  __ptext2 06D9                                    __ptext3 0082  
                                  __ptext4 00B3                                    __ptext5 03B5  
                                  __ptext6 062C                                    __ptext7 0691  
                                  __ptext8 006E                                    __ptext9 01A2  
                 __size_of_Clear_RX_Buffer 000B                            __size_of_strlen 0016  
                        __end_of_hexpowers 1125                                    _dpowers 10ED  
                    _OSCILLATOR_Initialize 0358                                  _T2CONbits 028E  
                                  _isdigit 05F9                      __end_of_softRebootStr 1134  
                  __size_of_WiFly_ReadChar 000D                                    _setFlag 0F46  
                                _T4CONbits 0294                          __end_of_goto_mode 01A1  
                 ??_PIN_MANAGER_Initialize 0071          __size_of_TMR4_SetInterruptHandler 0006  
                    __size_of_get_response 001B                                    _openStr 1163  
                ?_TMR4_SetInterruptHandler 0071                 __size_of_SYSTEM_Initialize 000B  
                                  _sprintf 03DB                                    clrloop0 0F3B  
               __end_of_WiFly_FactoryReset 03DB                           ?_TMR4_StartTimer 0070  
                       i1SetIndication@set 0070                       end_of_initialization 005A  
                           ?_SetIndication 0070                    _WiFly_SendCMD_SingleArg 00B3  
           ??_TMR4_DefaultInterruptHandler 0070                                    init_ram 0F40  
                             _eeprom_write 0325                                    initloop 0F41  
                         ?_WiFly_CheckRecv 0076                          _EUSART_Initialize 0704  
                            WaitResponse@i 0022                         ?_EUSART_Initialize 0070  
                       _EUSART_is_rx_ready 0248                         _EUSART_is_tx_ready 0000  
                        WiFly_Send@command 0072                      __CFG_WDTCPS$WDTCPS_18 0000  
                             _get_response 01D4                                    strlen@s 0071  
                      ??_EUSART_Initialize 0073             ??_EUSART_SetTxInterruptHandler 0073  
                                _PORTAbits 000C                        ?_EUSART_is_rx_ready 0070  
                                _PORTCbits 000E                                  _TMR2_Stop 06FE  
                                _TMR4_Stop 0701                      WiFly_CheckRecv@length 0020  
                     __CFG_WDTCCS$LFINTOSC 0000                      __size_of_EUSART_Write 001C  
                          ??_WiFly_SendCMD 0079                           __CFG_FEXTOSC$OFF 0000  
                          ??_CheckResponse 007A                                  _RXPPSbits 0ECB  
                  __end_of_WWDT_Initialize 03B5                  __end_of_EUSART_Initialize 072B  
                     ??_EUSART_is_rx_ready 0071                           ?_WiFly_RebootCMD 0070  
                            ??_eeprom_read 0071                  ??_WiFly_SendCMD_DoubleArg 007C  
                          i1_SetIndication 0F58       __end_of_TMR2_DefaultInterruptHandler 0003  
    __size_of_TMR2_DefaultInterruptHandler 0001               _TMR2_DefaultInterruptHandler 0002  
                           __end_of___bmul 06A4                           _WiFly_SaveConfig 0691  
                           __end_of___wmul 06D9                             __end_of_cmdStr 117F  
                           __end_of_aokStr 117B                             __end_of_endStr 116D  
                             _EUSART_Write 0FC6                          __size_of_TMR2_ISR 000C  
                        __size_of_TMR4_ISR 000C                   __size_of_connect_network 0010  
                               ?_TMR2_Stop 0070                           _WiFly_SendString 0638  
                   ?_OSCILLATOR_Initialize 0070                                 ?_TMR4_Stop 0070  
                        ??_ClearIndicators 0071                             __end_of_strlen 02E9  
                              __end_ofPL10 0783                                __end_ofPL20 07AE  
                              __end_ofPL12 078F                                __end_ofPL22 07B4  
                              __end_ofPL14 0799                                __end_ofPL24 07BA  
                              __end_ofPL16 07A0                                __end_ofPL26 07BF  
                              __end_ofPL18 07A8                                __end_ofPL28 07C4  
                      start_initialization 0036                               ??_WiFly_Send 0074  
                     __end_of_WaitResponse 0247            __size_of_PIN_MANAGER_Initialize 0037  
                ??_WiFly_SendCMD_SingleArg 007C                             _TMR2_StopTimer 01A1  
                            ??_EUSART_Read 0071                            ??_SetIndication 0071  
                        ??_Clear_RX_Buffer 0072                          Validate@valString 00D3  
                     __end_of_send_message 021E                          Validate@returnVal 00E0  
                      connect_network@ssid 00D2                           __CFG_LPBOREN$OFF 0000  
                           _TMR4_StopTimer 021E                                   ??___bmul 0072  
                                 ??___wmul 0075                         __end_of_WiFly_Send 0691  
                      __end_of_eeprom_read 06F8                          __size_of_Validate 0032  
                              __pdataBANK1 00A0                                __pdataBANK2 0120  
            ?_TMR2_DefaultInterruptHandler 0070                                   ??_strlen 0073  
                           _WiFly_ReadChar 01EF                __end_of_EUSART_Transmit_ISR 0FAE  
                   __end_of_TMR2_StopTimer 01A2                                __pbssCOMMON 007C  
                                ___latbits 0002                              __pcstackBANK0 0020  
                            __pcstackBANK1 00D2                 __end_of_WiFly_EnterCMDMode 006E  
                 __size_of_TMR2_Initialize 0013                               _isdigit$1851 0071  
                 __end_of_WiFly_CheckInCMD 0325                    __end_ofi1_SetIndication 0F5B  
                           Validate@F14737 0120                           eeprom_write@addr 0072  
               __end_of_EUSART_Receive_ISR 0F96                 __size_of_EUSART_Initialize 0027  
                         ?_WWDT_Initialize 0070                                sprintf@flag 0034  
                              sprintf@prec 0033           _EUSART_RxDefaultInterruptHandler 00E5  
                      __end_of_EUSART_Read 0FC6                                  __pnvBANK1 00E1  
                          CheckResponse@i1 0029                            CheckResponse@i2 002B  
                          CheckResponse@i3 0026                             Pair@pairString 00D3  
                   __end_of_TMR4_StopTimer 021F                                  _failedStr 00B3  
                         ___lwdiv@dividend 0073                     _PIN_MANAGER_Initialize 0361  
                     EUSART_Read@readValue 0071                              ??i1_TMR4_Stop 0070  
         __end_of_TMR4_SetInterruptHandler 034D                                   ?___lwdiv 0071  
                                 ?___lwmod 0078                               _eusartRxHead 006E  
                             _eusartTxHead 007C                               _eusartRxTail 006D  
                             _eusartTxTail 006F               ??_INTERRUPT_InterruptManager 0071  
                   __end_of_WiFly_ReadChar 01FC                                ??_TMR2_Stop 0071  
                              ??_TMR4_Stop 0071                    _eusartTxBufferRemaining 00EA  
                                _indStatus 00CE                                   _BAUD1CON 011F  
                                 ?_isdigit 0070                            ?_TMR2_StopTimer 0070  
                      send_message@message 006C                                   ?_setFlag 0070  
                __size_ofi1_TMR4_StopTimer 0002                             __size_of_Knock 0030  
                 __size_of_TMR4_Initialize 0014                                  _hexpowers 111D  
                        ??_connect_network 007C                           __CFG_WDTE$SWDTEN 0000  
                         ___lwdiv@quotient 0075                             __size_of_blink 0008  
                                 ?_sprintf 0021                                   _T2CLKCON 0290  
                                _goto_mode 017F                                   _T4CLKCON 0296  
                           _eusartRxBuffer 00BE                             _eusartTxBuffer 00C6  
                           ___wmul@product 0075                                   _LATAbits 0016  
                                 _LATBbits 0017                                  clear_ram0 0F3A  
                              _eeprom_read 06E9                                   _PIE3bits 0719  
                                 _PIE4bits 071A                   __size_of_TMR2_StartTimer 0001  
                          ?_TMR4_StopTimer 0070        __size_of_INTERRUPT_InterruptManager 0030  
                                 _PIR3bits 070F                                   _PIR4bits 0710  
                       _WiFly_FactoryReset 03B5                          _EUSART_is_tx_done 0000  
              WiFly_SendCMD_DoubleArg@arg1 003C                WiFly_SendCMD_DoubleArg@arg2 003E  
                                 _TMR2_ISR 0F5B                                   _TMR4_ISR 0F67  
                            _hardRebootStr 1157                      __size_of_WaitResponse 0028  
                      ?_WiFly_FactoryReset 0070                            ?_WiFly_ReadChar 0070  
                        ___wmul@multiplier 0071                        __end_ofi1_TMR4_Stop 0F50  
           ??_TMR2_DefaultInterruptHandler 0070          __size_of_TMR2_SetInterruptHandler 0006  
                ?_TMR2_SetInterruptHandler 0071                      __size_of_send_message 0022  
                              _EUSART_Read 0FAE                                 ?_goto_mode 0070  
                 __end_of_WiFly_SaveConfig 0698                    __size_of_connect_socket 001E  
                         ?i1_SetIndication 0070                       ??_WiFly_FactoryReset 0079  
                        ??_TMR2_Initialize 0073                   __end_of_WiFly_SendString 0641  
                 __size_of_TMR4_StartTimer 0001                            _ClearIndicators 06F8  
                                 _Validate 01A2                               _WaitResponse 021F  
                  ??_OSCILLATOR_Initialize 0071                 WiFly_SendCMD_SingleArg@arg 003C  
                 __size_of_WiFly_CheckRecv 0036                           __size_of___lwdiv 0025  
                          _Clear_RX_Buffer 0250                           __size_of___lwmod 0020  
                             _send_message 01FC                   _TMR4_SetInterruptHandler 0347  
                               sprintf@idx 002B                                 sprintf@len 002F  
                               sprintf@val 0031                           __size_of_isdigit 000E  
                          ___lwdiv@divisor 0071                           __size_of_setFlag 0005  
                          ___lwdiv@counter 0077                                   __ptext10 034D  
                                 __ptext11 03AF                                   __ptext20 0744  
                                 __ptext12 0398                                   __ptext21 014C  
                                 __ptext13 0347                                   __ptext30 06A4  
                                 __ptext22 0325                                   __ptext14 0731  
                                 __ptext31 0607                                   __ptext23 00CC  
                                 __ptext15 0341                                   __ptext40 0250  
                                 __ptext32 0698                                   __ptext24 01FC  
                                 __ptext16 0361                                   __ptext41 01D4  
                                 __ptext33 0320                                   __ptext25 02E9  
                                 __ptext17 0358                                   __ptext50 06FB  
                                 __ptext42 017F                                   __ptext34 005D  
                                 __ptext26 0307                                   __ptext18 0704  
                                 __ptext51 024B                                   __ptext43 021E  
                                 __ptext35 0641                                   __ptext27 03DB  
                                 __ptext19 072B                                   __ptext60 0003  
                                 __ptext52 06F8                                   __ptext44 0701  
                                 __ptext36 025B                                   __ptext28 05F9  
                                 __ptext61 0F46                                   __ptext53 021F  
                                 __ptext45 024F                                   __ptext37 0638  
                                 __ptext29 06C4                                   __ptext62 0F4B  
                                 __ptext54 02D3                                   __ptext46 03AC  
                                 __ptext38 0677                                   __ptext63 0F4D  
                                 __ptext55 01EF                                   __ptext47 01A1  
                                 __ptext39 0FC6                                   __ptext64 0F5B  
                                 __ptext56 0248                                   __ptext48 06FE  
                                 __ptext65 0002                                   __ptext57 0FAE  
                                 __ptext49 0247                                   __ptext66 0F50  
                                 __ptext67 0F58                                   __ptext59 0F67  
                                 __ptext68 0F96                                   __ptext69 0F80  
                         __size_of_sprintf 021E                      __end_of_WiFly_SendCMD 0638  
                            __size_of_Pair 0033                         connect_socket@addr 0068  
                    __end_of_CheckResponse 02D3                          ??_TMR4_Initialize 0073  
              __size_of_EUSART_is_rx_ready 0003                         connect_socket@port 006A  
                            __size_of_main 0050                       __CFG_WDTCWS$WDTCWS_7 0000  
                                 _pingTime 00CF                                 _RC1STAbits 011D  
                 WiFly_CheckRecv@chkString 0076                                i1_TMR4_Stop 0F4D  
                 __size_of_WiFly_RebootCMD 0014                                   int$flags 007E  
                        ??_TMR2_StartTimer 0071         __end_of_INTERRUPT_InterruptManager 0034  
               _INTERRUPT_InterruptManager 0004                PIN_MANAGER_Initialize@state 0071  
          WiFly_SendCMD_SingleArg@txBuffer 003E                                 _INTCONbits 000B  
                              _NVMCON1bits 081E                              _softRebootStr 112D  
                         i1_TMR4_StopTimer 0F4B                             __pstringtext10 07C4  
                           __pstringtext11 1000                             __pstringtext20 10BB  
                           __pstringtext12 1019                             __pstringtext21 10C9  
                           __pstringtext13 102E                             __pstringtext30 113B  
                           __pstringtext22 10D6                             __pstringtext14 1057  
                           __pstringtext31 1142                             __pstringtext23 10E2  
                           __pstringtext15 106A                             __pstringtext32 1149  
                           __pstringtext24 10F7                             __pstringtext16 107C  
                           __pstringtext33 1150                             __pstringtext25 1101  
                           __pstringtext17 108D                             __pstringtext34 115D  
                           __pstringtext26 110B                             __pstringtext18 109D  
                           __pstringtext35 116D                             __pstringtext27 1114  
                           __pstringtext19 10AD                             __pstringtext36 1172  
                           __pstringtext28 1125                             __pstringtext37 117F  
                           __pstringtext29 1134                             __pstringtext38 1183  
                           __pstringtext39 0000                            goto_mode@target 0072  
                                 isdigit@c 0072   __end_of_WiFly_Example_InitializeAsClient 00B3  
__size_of_WiFly_Example_InitializeAsClient 0031          ?_WiFly_Example_InitializeAsClient 0066  
       ??_WiFly_Example_InitializeAsClient 007C           _WiFly_Example_InitializeAsClient 0082  
                              ??_goto_mode 0072                      __end_of_SetIndication 024F  
                 ?_WiFly_SendCMD_DoubleArg 003A                          ?_WiFly_CheckInCMD 0070  
                                 intlevel1 0000                                  sprintf@ap 002E  
                                sprintf@cp 002C                                  sprintf@sp 0036  
                  __end_of_ClearIndicators 06FB                           ___lwmod@dividend 007A  
                       ??_WiFly_CheckInCMD 0079                    ?_PIN_MANAGER_Initialize 0070  
                        __CFG_CLKOUTEN$OFF 0000                                _PPSLOCKbits 0E8F  
                              _WDTCON0bits 080C                         _WiFly_EnterCMDMode 005D  
                       WaitResponse@length 0020       __end_of_EUSART_SetRxInterruptHandler 0749  
    __size_of_EUSART_SetRxInterruptHandler 0005               _EUSART_SetRxInterruptHandler 0744  
                  __end_of_Clear_RX_Buffer 025B                         _EUSART_Receive_ISR 0F80  
                      ?_WiFly_EnterCMDMode 0070                          ??_TMR4_StartTimer 0071  
                         ??_TMR2_StopTimer 0071                            _connect_network 06D9  
                            __pstringtext1 1043                              __pstringtext2 10ED  
                            __pstringtext3 111D                              __pstringtext4 112D  
                            __pstringtext5 1157                              __pstringtext6 1163  
                            __pstringtext7 1168                              __pstringtext8 1177  
                            __pstringtext9 117B                                   sprintf@c 0039  
                                 sprintf@f 0021                   ?_WiFly_SendCMD_SingleArg 003A  
                      ?_EUSART_Receive_ISR 0070                            ___lwmod@divisor 0078  
                        ??_WiFly_CheckRecv 0078                                   strlen@cp 0074  
                          ___lwmod@counter 0020                                 _TX1STAbits 011E  
                               _TMR2_Start 06FB                       ??_WiFly_EnterCMDMode 0079  
                               _TMR4_Start 03AC                             _connect_socket 02E9  
                       EUSART_Write@txData 0071               __size_of_EUSART_Transmit_ISR 0018  
           __end_of_PIN_MANAGER_Initialize 0398                           ??_TMR4_StopTimer 0071  
                         WiFly_CheckRecv@i 0022                              ?_eeprom_write 0071  
                               _STATUSbits 0003                       ??_EUSART_Receive_ISR 0070  
                             ?_eeprom_read 0070                      _TMR2_InterruptHandler 00E3  
                               Pair@F14733 00AA   WiFly_Example_InitializeAsClient@password 0068  
