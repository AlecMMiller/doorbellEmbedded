

Microchip Technology PIC PRO Macro Assembler V1.42 build -159332390 
                                                                                               Tue Aug 15 15:04:38 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	16F18875
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	stringtext38,global,class=STRCODE,delta=2
    45                           	psect	stringtext39,global,class=STRCODE,delta=2
    46                           	psect	cinit,global,class=CODE,merge=1,delta=2
    47                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    48                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    49                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    50                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    51                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    52                           	psect	inittext,global,class=CODE,delta=2
    53                           	psect	clrtext,global,class=CODE,delta=2
    54                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    55                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    56                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    57                           	psect	text18,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text57,local,class=CODE,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text61,local,class=CODE,merge=1,delta=2
    62                           	psect	text62,local,class=CODE,merge=1,delta=2
    63                           	psect	text63,local,class=CODE,merge=1,delta=2
    64                           	psect	text66,local,class=CODE,merge=1,delta=2
    65                           	psect	text67,local,class=CODE,merge=1,delta=2
    66                           	psect	text70,local,class=CODE,merge=1,delta=2
    67                           	psect	text71,local,class=CODE,merge=1,delta=2
    68                           	psect	pa_nodes0,global,class=CODE,delta=2
    69                           	dabs	1,0x7E,2
    70  0000                     
    71                           ; Version 1.42
    72                           ; Generated 13/04/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F18875 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001C                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  008C                     	;# 
   139  008C                     	;# 
   140  008D                     	;# 
   141  008E                     	;# 
   142  008E                     	;# 
   143  008F                     	;# 
   144  0090                     	;# 
   145  0090                     	;# 
   146  0091                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0095                     	;# 
   150  0096                     	;# 
   151  0097                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  010C                     	;# 
   160  010D                     	;# 
   161  010E                     	;# 
   162  010E                     	;# 
   163  010F                     	;# 
   164  0110                     	;# 
   165  0110                     	;# 
   166  0111                     	;# 
   167  0112                     	;# 
   168  0112                     	;# 
   169  0113                     	;# 
   170  0114                     	;# 
   171  0114                     	;# 
   172  0115                     	;# 
   173  0116                     	;# 
   174  0116                     	;# 
   175  0117                     	;# 
   176  0119                     	;# 
   177  0119                     	;# 
   178  0119                     	;# 
   179  011A                     	;# 
   180  011A                     	;# 
   181  011A                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011B                     	;# 
   185  011B                     	;# 
   186  011B                     	;# 
   187  011C                     	;# 
   188  011C                     	;# 
   189  011C                     	;# 
   190  011D                     	;# 
   191  011D                     	;# 
   192  011D                     	;# 
   193  011E                     	;# 
   194  011E                     	;# 
   195  011E                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  011F                     	;# 
   199  011F                     	;# 
   200  011F                     	;# 
   201  018C                     	;# 
   202  018D                     	;# 
   203  018E                     	;# 
   204  018F                     	;# 
   205  0190                     	;# 
   206  0191                     	;# 
   207  0192                     	;# 
   208  0196                     	;# 
   209  0197                     	;# 
   210  0198                     	;# 
   211  0199                     	;# 
   212  019A                     	;# 
   213  019B                     	;# 
   214  019C                     	;# 
   215  020C                     	;# 
   216  020C                     	;# 
   217  020D                     	;# 
   218  020E                     	;# 
   219  020F                     	;# 
   220  020F                     	;# 
   221  0210                     	;# 
   222  0210                     	;# 
   223  0211                     	;# 
   224  0211                     	;# 
   225  0212                     	;# 
   226  0212                     	;# 
   227  0213                     	;# 
   228  0214                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0216                     	;# 
   232  0216                     	;# 
   233  0217                     	;# 
   234  0217                     	;# 
   235  0218                     	;# 
   236  0218                     	;# 
   237  0219                     	;# 
   238  021A                     	;# 
   239  021B                     	;# 
   240  021B                     	;# 
   241  021C                     	;# 
   242  021C                     	;# 
   243  021D                     	;# 
   244  021D                     	;# 
   245  021E                     	;# 
   246  021F                     	;# 
   247  028C                     	;# 
   248  028C                     	;# 
   249  028D                     	;# 
   250  028D                     	;# 
   251  028E                     	;# 
   252  028F                     	;# 
   253  0290                     	;# 
   254  0290                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0293                     	;# 
   260  0294                     	;# 
   261  0295                     	;# 
   262  0296                     	;# 
   263  0296                     	;# 
   264  0297                     	;# 
   265  0298                     	;# 
   266  0298                     	;# 
   267  0299                     	;# 
   268  0299                     	;# 
   269  029A                     	;# 
   270  029B                     	;# 
   271  029C                     	;# 
   272  029C                     	;# 
   273  029D                     	;# 
   274  030C                     	;# 
   275  030C                     	;# 
   276  030D                     	;# 
   277  030E                     	;# 
   278  030F                     	;# 
   279  0310                     	;# 
   280  0310                     	;# 
   281  0311                     	;# 
   282  0312                     	;# 
   283  0313                     	;# 
   284  0314                     	;# 
   285  0314                     	;# 
   286  0315                     	;# 
   287  0316                     	;# 
   288  0317                     	;# 
   289  0318                     	;# 
   290  0318                     	;# 
   291  0319                     	;# 
   292  031A                     	;# 
   293  031B                     	;# 
   294  031C                     	;# 
   295  031C                     	;# 
   296  031D                     	;# 
   297  031E                     	;# 
   298  031F                     	;# 
   299  038C                     	;# 
   300  038D                     	;# 
   301  038E                     	;# 
   302  0390                     	;# 
   303  0391                     	;# 
   304  0392                     	;# 
   305  040C                     	;# 
   306  040D                     	;# 
   307  040E                     	;# 
   308  040F                     	;# 
   309  0410                     	;# 
   310  0411                     	;# 
   311  0416                     	;# 
   312  0416                     	;# 
   313  0417                     	;# 
   314  0418                     	;# 
   315  0418                     	;# 
   316  0419                     	;# 
   317  041A                     	;# 
   318  041A                     	;# 
   319  041B                     	;# 
   320  041C                     	;# 
   321  041C                     	;# 
   322  041D                     	;# 
   323  041E                     	;# 
   324  041F                     	;# 
   325  048C                     	;# 
   326  048C                     	;# 
   327  048D                     	;# 
   328  048E                     	;# 
   329  048F                     	;# 
   330  048F                     	;# 
   331  0490                     	;# 
   332  0491                     	;# 
   333  0492                     	;# 
   334  0492                     	;# 
   335  0493                     	;# 
   336  0494                     	;# 
   337  0495                     	;# 
   338  0495                     	;# 
   339  0496                     	;# 
   340  0497                     	;# 
   341  0498                     	;# 
   342  0499                     	;# 
   343  049A                     	;# 
   344  049B                     	;# 
   345  049C                     	;# 
   346  049D                     	;# 
   347  050C                     	;# 
   348  050C                     	;# 
   349  050D                     	;# 
   350  050E                     	;# 
   351  050F                     	;# 
   352  050F                     	;# 
   353  0510                     	;# 
   354  0511                     	;# 
   355  0512                     	;# 
   356  0512                     	;# 
   357  0513                     	;# 
   358  0514                     	;# 
   359  0515                     	;# 
   360  0515                     	;# 
   361  0516                     	;# 
   362  0517                     	;# 
   363  0518                     	;# 
   364  0519                     	;# 
   365  051A                     	;# 
   366  051B                     	;# 
   367  051C                     	;# 
   368  051D                     	;# 
   369  058C                     	;# 
   370  058C                     	;# 
   371  058D                     	;# 
   372  058E                     	;# 
   373  058F                     	;# 
   374  058F                     	;# 
   375  0590                     	;# 
   376  0591                     	;# 
   377  0592                     	;# 
   378  0593                     	;# 
   379  060C                     	;# 
   380  060D                     	;# 
   381  060E                     	;# 
   382  060F                     	;# 
   383  0610                     	;# 
   384  0611                     	;# 
   385  0612                     	;# 
   386  0613                     	;# 
   387  0614                     	;# 
   388  0616                     	;# 
   389  0617                     	;# 
   390  0618                     	;# 
   391  0619                     	;# 
   392  061A                     	;# 
   393  061B                     	;# 
   394  061C                     	;# 
   395  061D                     	;# 
   396  061E                     	;# 
   397  068C                     	;# 
   398  068D                     	;# 
   399  068E                     	;# 
   400  068F                     	;# 
   401  0690                     	;# 
   402  0691                     	;# 
   403  0692                     	;# 
   404  0693                     	;# 
   405  0694                     	;# 
   406  070C                     	;# 
   407  070D                     	;# 
   408  070E                     	;# 
   409  070F                     	;# 
   410  0710                     	;# 
   411  0711                     	;# 
   412  0712                     	;# 
   413  0713                     	;# 
   414  0714                     	;# 
   415  0716                     	;# 
   416  0717                     	;# 
   417  0718                     	;# 
   418  0719                     	;# 
   419  071A                     	;# 
   420  071B                     	;# 
   421  071C                     	;# 
   422  071D                     	;# 
   423  071E                     	;# 
   424  0796                     	;# 
   425  0797                     	;# 
   426  0798                     	;# 
   427  0799                     	;# 
   428  079A                     	;# 
   429  079B                     	;# 
   430  080C                     	;# 
   431  080D                     	;# 
   432  080E                     	;# 
   433  080F                     	;# 
   434  0810                     	;# 
   435  0811                     	;# 
   436  0812                     	;# 
   437  0813                     	;# 
   438  0814                     	;# 
   439  081A                     	;# 
   440  081B                     	;# 
   441  081C                     	;# 
   442  081D                     	;# 
   443  081E                     	;# 
   444  081F                     	;# 
   445  088C                     	;# 
   446  088D                     	;# 
   447  088E                     	;# 
   448  088F                     	;# 
   449  0890                     	;# 
   450  0891                     	;# 
   451  0892                     	;# 
   452  0893                     	;# 
   453  0895                     	;# 
   454  0896                     	;# 
   455  0897                     	;# 
   456  0898                     	;# 
   457  0899                     	;# 
   458  089A                     	;# 
   459  089B                     	;# 
   460  090C                     	;# 
   461  090E                     	;# 
   462  090F                     	;# 
   463  091F                     	;# 
   464  091F                     	;# 
   465  098F                     	;# 
   466  098F                     	;# 
   467  0990                     	;# 
   468  0991                     	;# 
   469  0992                     	;# 
   470  0993                     	;# 
   471  0994                     	;# 
   472  0995                     	;# 
   473  0996                     	;# 
   474  0997                     	;# 
   475  0E0F                     	;# 
   476  0E10                     	;# 
   477  0E11                     	;# 
   478  0E12                     	;# 
   479  0E13                     	;# 
   480  0E14                     	;# 
   481  0E15                     	;# 
   482  0E16                     	;# 
   483  0E17                     	;# 
   484  0E18                     	;# 
   485  0E19                     	;# 
   486  0E1A                     	;# 
   487  0E1B                     	;# 
   488  0E1C                     	;# 
   489  0E1D                     	;# 
   490  0E1E                     	;# 
   491  0E1F                     	;# 
   492  0E20                     	;# 
   493  0E21                     	;# 
   494  0E22                     	;# 
   495  0E23                     	;# 
   496  0E24                     	;# 
   497  0E25                     	;# 
   498  0E26                     	;# 
   499  0E27                     	;# 
   500  0E28                     	;# 
   501  0E29                     	;# 
   502  0E2A                     	;# 
   503  0E2B                     	;# 
   504  0E2C                     	;# 
   505  0E2D                     	;# 
   506  0E2E                     	;# 
   507  0E2F                     	;# 
   508  0E30                     	;# 
   509  0E31                     	;# 
   510  0E32                     	;# 
   511  0E33                     	;# 
   512  0E34                     	;# 
   513  0E35                     	;# 
   514  0E36                     	;# 
   515  0E37                     	;# 
   516  0E8F                     	;# 
   517  0E90                     	;# 
   518  0E91                     	;# 
   519  0E92                     	;# 
   520  0E93                     	;# 
   521  0E94                     	;# 
   522  0E95                     	;# 
   523  0E96                     	;# 
   524  0E97                     	;# 
   525  0E9C                     	;# 
   526  0E9D                     	;# 
   527  0E9E                     	;# 
   528  0EA1                     	;# 
   529  0EA2                     	;# 
   530  0EA3                     	;# 
   531  0EA4                     	;# 
   532  0EA5                     	;# 
   533  0EA9                     	;# 
   534  0EAA                     	;# 
   535  0EAB                     	;# 
   536  0EAC                     	;# 
   537  0EB1                     	;# 
   538  0EB2                     	;# 
   539  0EB3                     	;# 
   540  0EB8                     	;# 
   541  0EB9                     	;# 
   542  0EBA                     	;# 
   543  0EBB                     	;# 
   544  0EBC                     	;# 
   545  0EBD                     	;# 
   546  0EBE                     	;# 
   547  0EC3                     	;# 
   548  0EC5                     	;# 
   549  0EC6                     	;# 
   550  0EC7                     	;# 
   551  0EC8                     	;# 
   552  0EC9                     	;# 
   553  0ECA                     	;# 
   554  0ECB                     	;# 
   555  0ECC                     	;# 
   556  0F10                     	;# 
   557  0F11                     	;# 
   558  0F12                     	;# 
   559  0F13                     	;# 
   560  0F14                     	;# 
   561  0F15                     	;# 
   562  0F16                     	;# 
   563  0F17                     	;# 
   564  0F18                     	;# 
   565  0F19                     	;# 
   566  0F1A                     	;# 
   567  0F1B                     	;# 
   568  0F1C                     	;# 
   569  0F1D                     	;# 
   570  0F1E                     	;# 
   571  0F1F                     	;# 
   572  0F20                     	;# 
   573  0F21                     	;# 
   574  0F22                     	;# 
   575  0F23                     	;# 
   576  0F24                     	;# 
   577  0F25                     	;# 
   578  0F26                     	;# 
   579  0F27                     	;# 
   580  0F28                     	;# 
   581  0F29                     	;# 
   582  0F2A                     	;# 
   583  0F2B                     	;# 
   584  0F2C                     	;# 
   585  0F2D                     	;# 
   586  0F2E                     	;# 
   587  0F2F                     	;# 
   588  0F30                     	;# 
   589  0F31                     	;# 
   590  0F32                     	;# 
   591  0F38                     	;# 
   592  0F39                     	;# 
   593  0F3A                     	;# 
   594  0F3B                     	;# 
   595  0F3C                     	;# 
   596  0F3D                     	;# 
   597  0F3E                     	;# 
   598  0F3F                     	;# 
   599  0F40                     	;# 
   600  0F41                     	;# 
   601  0F43                     	;# 
   602  0F44                     	;# 
   603  0F45                     	;# 
   604  0F46                     	;# 
   605  0F47                     	;# 
   606  0F48                     	;# 
   607  0F49                     	;# 
   608  0F4A                     	;# 
   609  0F4B                     	;# 
   610  0F4C                     	;# 
   611  0F4E                     	;# 
   612  0F4F                     	;# 
   613  0F50                     	;# 
   614  0F51                     	;# 
   615  0F52                     	;# 
   616  0F53                     	;# 
   617  0F54                     	;# 
   618  0F55                     	;# 
   619  0F56                     	;# 
   620  0F57                     	;# 
   621  0F59                     	;# 
   622  0F5A                     	;# 
   623  0F5B                     	;# 
   624  0F5C                     	;# 
   625  0F5D                     	;# 
   626  0F61                     	;# 
   627  0F62                     	;# 
   628  0F64                     	;# 
   629  0F65                     	;# 
   630  0F66                     	;# 
   631  0F67                     	;# 
   632  0F68                     	;# 
   633  0F69                     	;# 
   634  0F6A                     	;# 
   635  0F6B                     	;# 
   636  0F6C                     	;# 
   637  0F6D                     	;# 
   638  0FE4                     	;# 
   639  0FE5                     	;# 
   640  0FE6                     	;# 
   641  0FE7                     	;# 
   642  0FE8                     	;# 
   643  0FE9                     	;# 
   644  0FEA                     	;# 
   645  0FEB                     	;# 
   646  0FED                     	;# 
   647  0FEE                     	;# 
   648  0FEF                     	;# 
   649  0000                     	;# 
   650  0001                     	;# 
   651  0002                     	;# 
   652  0003                     	;# 
   653  0004                     	;# 
   654  0005                     	;# 
   655  0006                     	;# 
   656  0007                     	;# 
   657  0008                     	;# 
   658  0009                     	;# 
   659  000A                     	;# 
   660  000B                     	;# 
   661  000C                     	;# 
   662  000D                     	;# 
   663  000E                     	;# 
   664  000F                     	;# 
   665  0010                     	;# 
   666  0011                     	;# 
   667  0012                     	;# 
   668  0013                     	;# 
   669  0014                     	;# 
   670  0015                     	;# 
   671  0016                     	;# 
   672  0017                     	;# 
   673  0018                     	;# 
   674  0019                     	;# 
   675  001A                     	;# 
   676  001C                     	;# 
   677  001C                     	;# 
   678  001D                     	;# 
   679  001D                     	;# 
   680  001E                     	;# 
   681  001F                     	;# 
   682  008C                     	;# 
   683  008C                     	;# 
   684  008D                     	;# 
   685  008E                     	;# 
   686  008E                     	;# 
   687  008F                     	;# 
   688  0090                     	;# 
   689  0090                     	;# 
   690  0091                     	;# 
   691  0093                     	;# 
   692  0094                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0097                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009A                     	;# 
   699  009B                     	;# 
   700  009C                     	;# 
   701  009D                     	;# 
   702  009E                     	;# 
   703  010C                     	;# 
   704  010D                     	;# 
   705  010E                     	;# 
   706  010E                     	;# 
   707  010F                     	;# 
   708  0110                     	;# 
   709  0110                     	;# 
   710  0111                     	;# 
   711  0112                     	;# 
   712  0112                     	;# 
   713  0113                     	;# 
   714  0114                     	;# 
   715  0114                     	;# 
   716  0115                     	;# 
   717  0116                     	;# 
   718  0116                     	;# 
   719  0117                     	;# 
   720  0119                     	;# 
   721  0119                     	;# 
   722  0119                     	;# 
   723  011A                     	;# 
   724  011A                     	;# 
   725  011A                     	;# 
   726  011B                     	;# 
   727  011B                     	;# 
   728  011B                     	;# 
   729  011B                     	;# 
   730  011B                     	;# 
   731  011C                     	;# 
   732  011C                     	;# 
   733  011C                     	;# 
   734  011D                     	;# 
   735  011D                     	;# 
   736  011D                     	;# 
   737  011E                     	;# 
   738  011E                     	;# 
   739  011E                     	;# 
   740  011F                     	;# 
   741  011F                     	;# 
   742  011F                     	;# 
   743  011F                     	;# 
   744  011F                     	;# 
   745  018C                     	;# 
   746  018D                     	;# 
   747  018E                     	;# 
   748  018F                     	;# 
   749  0190                     	;# 
   750  0191                     	;# 
   751  0192                     	;# 
   752  0196                     	;# 
   753  0197                     	;# 
   754  0198                     	;# 
   755  0199                     	;# 
   756  019A                     	;# 
   757  019B                     	;# 
   758  019C                     	;# 
   759  020C                     	;# 
   760  020C                     	;# 
   761  020D                     	;# 
   762  020E                     	;# 
   763  020F                     	;# 
   764  020F                     	;# 
   765  0210                     	;# 
   766  0210                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0214                     	;# 
   773  0215                     	;# 
   774  0215                     	;# 
   775  0216                     	;# 
   776  0216                     	;# 
   777  0217                     	;# 
   778  0217                     	;# 
   779  0218                     	;# 
   780  0218                     	;# 
   781  0219                     	;# 
   782  021A                     	;# 
   783  021B                     	;# 
   784  021B                     	;# 
   785  021C                     	;# 
   786  021C                     	;# 
   787  021D                     	;# 
   788  021D                     	;# 
   789  021E                     	;# 
   790  021F                     	;# 
   791  028C                     	;# 
   792  028C                     	;# 
   793  028D                     	;# 
   794  028D                     	;# 
   795  028E                     	;# 
   796  028F                     	;# 
   797  0290                     	;# 
   798  0290                     	;# 
   799  0291                     	;# 
   800  0292                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0293                     	;# 
   804  0294                     	;# 
   805  0295                     	;# 
   806  0296                     	;# 
   807  0296                     	;# 
   808  0297                     	;# 
   809  0298                     	;# 
   810  0298                     	;# 
   811  0299                     	;# 
   812  0299                     	;# 
   813  029A                     	;# 
   814  029B                     	;# 
   815  029C                     	;# 
   816  029C                     	;# 
   817  029D                     	;# 
   818  030C                     	;# 
   819  030C                     	;# 
   820  030D                     	;# 
   821  030E                     	;# 
   822  030F                     	;# 
   823  0310                     	;# 
   824  0310                     	;# 
   825  0311                     	;# 
   826  0312                     	;# 
   827  0313                     	;# 
   828  0314                     	;# 
   829  0314                     	;# 
   830  0315                     	;# 
   831  0316                     	;# 
   832  0317                     	;# 
   833  0318                     	;# 
   834  0318                     	;# 
   835  0319                     	;# 
   836  031A                     	;# 
   837  031B                     	;# 
   838  031C                     	;# 
   839  031C                     	;# 
   840  031D                     	;# 
   841  031E                     	;# 
   842  031F                     	;# 
   843  038C                     	;# 
   844  038D                     	;# 
   845  038E                     	;# 
   846  0390                     	;# 
   847  0391                     	;# 
   848  0392                     	;# 
   849  040C                     	;# 
   850  040D                     	;# 
   851  040E                     	;# 
   852  040F                     	;# 
   853  0410                     	;# 
   854  0411                     	;# 
   855  0416                     	;# 
   856  0416                     	;# 
   857  0417                     	;# 
   858  0418                     	;# 
   859  0418                     	;# 
   860  0419                     	;# 
   861  041A                     	;# 
   862  041A                     	;# 
   863  041B                     	;# 
   864  041C                     	;# 
   865  041C                     	;# 
   866  041D                     	;# 
   867  041E                     	;# 
   868  041F                     	;# 
   869  048C                     	;# 
   870  048C                     	;# 
   871  048D                     	;# 
   872  048E                     	;# 
   873  048F                     	;# 
   874  048F                     	;# 
   875  0490                     	;# 
   876  0491                     	;# 
   877  0492                     	;# 
   878  0492                     	;# 
   879  0493                     	;# 
   880  0494                     	;# 
   881  0495                     	;# 
   882  0495                     	;# 
   883  0496                     	;# 
   884  0497                     	;# 
   885  0498                     	;# 
   886  0499                     	;# 
   887  049A                     	;# 
   888  049B                     	;# 
   889  049C                     	;# 
   890  049D                     	;# 
   891  050C                     	;# 
   892  050C                     	;# 
   893  050D                     	;# 
   894  050E                     	;# 
   895  050F                     	;# 
   896  050F                     	;# 
   897  0510                     	;# 
   898  0511                     	;# 
   899  0512                     	;# 
   900  0512                     	;# 
   901  0513                     	;# 
   902  0514                     	;# 
   903  0515                     	;# 
   904  0515                     	;# 
   905  0516                     	;# 
   906  0517                     	;# 
   907  0518                     	;# 
   908  0519                     	;# 
   909  051A                     	;# 
   910  051B                     	;# 
   911  051C                     	;# 
   912  051D                     	;# 
   913  058C                     	;# 
   914  058C                     	;# 
   915  058D                     	;# 
   916  058E                     	;# 
   917  058F                     	;# 
   918  058F                     	;# 
   919  0590                     	;# 
   920  0591                     	;# 
   921  0592                     	;# 
   922  0593                     	;# 
   923  060C                     	;# 
   924  060D                     	;# 
   925  060E                     	;# 
   926  060F                     	;# 
   927  0610                     	;# 
   928  0611                     	;# 
   929  0612                     	;# 
   930  0613                     	;# 
   931  0614                     	;# 
   932  0616                     	;# 
   933  0617                     	;# 
   934  0618                     	;# 
   935  0619                     	;# 
   936  061A                     	;# 
   937  061B                     	;# 
   938  061C                     	;# 
   939  061D                     	;# 
   940  061E                     	;# 
   941  068C                     	;# 
   942  068D                     	;# 
   943  068E                     	;# 
   944  068F                     	;# 
   945  0690                     	;# 
   946  0691                     	;# 
   947  0692                     	;# 
   948  0693                     	;# 
   949  0694                     	;# 
   950  070C                     	;# 
   951  070D                     	;# 
   952  070E                     	;# 
   953  070F                     	;# 
   954  0710                     	;# 
   955  0711                     	;# 
   956  0712                     	;# 
   957  0713                     	;# 
   958  0714                     	;# 
   959  0716                     	;# 
   960  0717                     	;# 
   961  0718                     	;# 
   962  0719                     	;# 
   963  071A                     	;# 
   964  071B                     	;# 
   965  071C                     	;# 
   966  071D                     	;# 
   967  071E                     	;# 
   968  0796                     	;# 
   969  0797                     	;# 
   970  0798                     	;# 
   971  0799                     	;# 
   972  079A                     	;# 
   973  079B                     	;# 
   974  080C                     	;# 
   975  080D                     	;# 
   976  080E                     	;# 
   977  080F                     	;# 
   978  0810                     	;# 
   979  0811                     	;# 
   980  0812                     	;# 
   981  0813                     	;# 
   982  0814                     	;# 
   983  081A                     	;# 
   984  081B                     	;# 
   985  081C                     	;# 
   986  081D                     	;# 
   987  081E                     	;# 
   988  081F                     	;# 
   989  088C                     	;# 
   990  088D                     	;# 
   991  088E                     	;# 
   992  088F                     	;# 
   993  0890                     	;# 
   994  0891                     	;# 
   995  0892                     	;# 
   996  0893                     	;# 
   997  0895                     	;# 
   998  0896                     	;# 
   999  0897                     	;# 
  1000  0898                     	;# 
  1001  0899                     	;# 
  1002  089A                     	;# 
  1003  089B                     	;# 
  1004  090C                     	;# 
  1005  090E                     	;# 
  1006  090F                     	;# 
  1007  091F                     	;# 
  1008  091F                     	;# 
  1009  098F                     	;# 
  1010  098F                     	;# 
  1011  0990                     	;# 
  1012  0991                     	;# 
  1013  0992                     	;# 
  1014  0993                     	;# 
  1015  0994                     	;# 
  1016  0995                     	;# 
  1017  0996                     	;# 
  1018  0997                     	;# 
  1019  0E0F                     	;# 
  1020  0E10                     	;# 
  1021  0E11                     	;# 
  1022  0E12                     	;# 
  1023  0E13                     	;# 
  1024  0E14                     	;# 
  1025  0E15                     	;# 
  1026  0E16                     	;# 
  1027  0E17                     	;# 
  1028  0E18                     	;# 
  1029  0E19                     	;# 
  1030  0E1A                     	;# 
  1031  0E1B                     	;# 
  1032  0E1C                     	;# 
  1033  0E1D                     	;# 
  1034  0E1E                     	;# 
  1035  0E1F                     	;# 
  1036  0E20                     	;# 
  1037  0E21                     	;# 
  1038  0E22                     	;# 
  1039  0E23                     	;# 
  1040  0E24                     	;# 
  1041  0E25                     	;# 
  1042  0E26                     	;# 
  1043  0E27                     	;# 
  1044  0E28                     	;# 
  1045  0E29                     	;# 
  1046  0E2A                     	;# 
  1047  0E2B                     	;# 
  1048  0E2C                     	;# 
  1049  0E2D                     	;# 
  1050  0E2E                     	;# 
  1051  0E2F                     	;# 
  1052  0E30                     	;# 
  1053  0E31                     	;# 
  1054  0E32                     	;# 
  1055  0E33                     	;# 
  1056  0E34                     	;# 
  1057  0E35                     	;# 
  1058  0E36                     	;# 
  1059  0E37                     	;# 
  1060  0E8F                     	;# 
  1061  0E90                     	;# 
  1062  0E91                     	;# 
  1063  0E92                     	;# 
  1064  0E93                     	;# 
  1065  0E94                     	;# 
  1066  0E95                     	;# 
  1067  0E96                     	;# 
  1068  0E97                     	;# 
  1069  0E9C                     	;# 
  1070  0E9D                     	;# 
  1071  0E9E                     	;# 
  1072  0EA1                     	;# 
  1073  0EA2                     	;# 
  1074  0EA3                     	;# 
  1075  0EA4                     	;# 
  1076  0EA5                     	;# 
  1077  0EA9                     	;# 
  1078  0EAA                     	;# 
  1079  0EAB                     	;# 
  1080  0EAC                     	;# 
  1081  0EB1                     	;# 
  1082  0EB2                     	;# 
  1083  0EB3                     	;# 
  1084  0EB8                     	;# 
  1085  0EB9                     	;# 
  1086  0EBA                     	;# 
  1087  0EBB                     	;# 
  1088  0EBC                     	;# 
  1089  0EBD                     	;# 
  1090  0EBE                     	;# 
  1091  0EC3                     	;# 
  1092  0EC5                     	;# 
  1093  0EC6                     	;# 
  1094  0EC7                     	;# 
  1095  0EC8                     	;# 
  1096  0EC9                     	;# 
  1097  0ECA                     	;# 
  1098  0ECB                     	;# 
  1099  0ECC                     	;# 
  1100  0F10                     	;# 
  1101  0F11                     	;# 
  1102  0F12                     	;# 
  1103  0F13                     	;# 
  1104  0F14                     	;# 
  1105  0F15                     	;# 
  1106  0F16                     	;# 
  1107  0F17                     	;# 
  1108  0F18                     	;# 
  1109  0F19                     	;# 
  1110  0F1A                     	;# 
  1111  0F1B                     	;# 
  1112  0F1C                     	;# 
  1113  0F1D                     	;# 
  1114  0F1E                     	;# 
  1115  0F1F                     	;# 
  1116  0F20                     	;# 
  1117  0F21                     	;# 
  1118  0F22                     	;# 
  1119  0F23                     	;# 
  1120  0F24                     	;# 
  1121  0F25                     	;# 
  1122  0F26                     	;# 
  1123  0F27                     	;# 
  1124  0F28                     	;# 
  1125  0F29                     	;# 
  1126  0F2A                     	;# 
  1127  0F2B                     	;# 
  1128  0F2C                     	;# 
  1129  0F2D                     	;# 
  1130  0F2E                     	;# 
  1131  0F2F                     	;# 
  1132  0F30                     	;# 
  1133  0F31                     	;# 
  1134  0F32                     	;# 
  1135  0F38                     	;# 
  1136  0F39                     	;# 
  1137  0F3A                     	;# 
  1138  0F3B                     	;# 
  1139  0F3C                     	;# 
  1140  0F3D                     	;# 
  1141  0F3E                     	;# 
  1142  0F3F                     	;# 
  1143  0F40                     	;# 
  1144  0F41                     	;# 
  1145  0F43                     	;# 
  1146  0F44                     	;# 
  1147  0F45                     	;# 
  1148  0F46                     	;# 
  1149  0F47                     	;# 
  1150  0F48                     	;# 
  1151  0F49                     	;# 
  1152  0F4A                     	;# 
  1153  0F4B                     	;# 
  1154  0F4C                     	;# 
  1155  0F4E                     	;# 
  1156  0F4F                     	;# 
  1157  0F50                     	;# 
  1158  0F51                     	;# 
  1159  0F52                     	;# 
  1160  0F53                     	;# 
  1161  0F54                     	;# 
  1162  0F55                     	;# 
  1163  0F56                     	;# 
  1164  0F57                     	;# 
  1165  0F59                     	;# 
  1166  0F5A                     	;# 
  1167  0F5B                     	;# 
  1168  0F5C                     	;# 
  1169  0F5D                     	;# 
  1170  0F61                     	;# 
  1171  0F62                     	;# 
  1172  0F64                     	;# 
  1173  0F65                     	;# 
  1174  0F66                     	;# 
  1175  0F67                     	;# 
  1176  0F68                     	;# 
  1177  0F69                     	;# 
  1178  0F6A                     	;# 
  1179  0F6B                     	;# 
  1180  0F6C                     	;# 
  1181  0F6D                     	;# 
  1182  0FE4                     	;# 
  1183  0FE5                     	;# 
  1184  0FE6                     	;# 
  1185  0FE7                     	;# 
  1186  0FE8                     	;# 
  1187  0FE9                     	;# 
  1188  0FEA                     	;# 
  1189  0FEB                     	;# 
  1190  0FED                     	;# 
  1191  0FEE                     	;# 
  1192  0FEF                     	;# 
  1193  0000                     	;# 
  1194  0001                     	;# 
  1195  0002                     	;# 
  1196  0003                     	;# 
  1197  0004                     	;# 
  1198  0005                     	;# 
  1199  0006                     	;# 
  1200  0007                     	;# 
  1201  0008                     	;# 
  1202  0009                     	;# 
  1203  000A                     	;# 
  1204  000B                     	;# 
  1205  000C                     	;# 
  1206  000D                     	;# 
  1207  000E                     	;# 
  1208  000F                     	;# 
  1209  0010                     	;# 
  1210  0011                     	;# 
  1211  0012                     	;# 
  1212  0013                     	;# 
  1213  0014                     	;# 
  1214  0015                     	;# 
  1215  0016                     	;# 
  1216  0017                     	;# 
  1217  0018                     	;# 
  1218  0019                     	;# 
  1219  001A                     	;# 
  1220  001C                     	;# 
  1221  001C                     	;# 
  1222  001D                     	;# 
  1223  001D                     	;# 
  1224  001E                     	;# 
  1225  001F                     	;# 
  1226  008C                     	;# 
  1227  008C                     	;# 
  1228  008D                     	;# 
  1229  008E                     	;# 
  1230  008E                     	;# 
  1231  008F                     	;# 
  1232  0090                     	;# 
  1233  0090                     	;# 
  1234  0091                     	;# 
  1235  0093                     	;# 
  1236  0094                     	;# 
  1237  0095                     	;# 
  1238  0096                     	;# 
  1239  0097                     	;# 
  1240  0098                     	;# 
  1241  0099                     	;# 
  1242  009A                     	;# 
  1243  009B                     	;# 
  1244  009C                     	;# 
  1245  009D                     	;# 
  1246  009E                     	;# 
  1247  010C                     	;# 
  1248  010D                     	;# 
  1249  010E                     	;# 
  1250  010E                     	;# 
  1251  010F                     	;# 
  1252  0110                     	;# 
  1253  0110                     	;# 
  1254  0111                     	;# 
  1255  0112                     	;# 
  1256  0112                     	;# 
  1257  0113                     	;# 
  1258  0114                     	;# 
  1259  0114                     	;# 
  1260  0115                     	;# 
  1261  0116                     	;# 
  1262  0116                     	;# 
  1263  0117                     	;# 
  1264  0119                     	;# 
  1265  0119                     	;# 
  1266  0119                     	;# 
  1267  011A                     	;# 
  1268  011A                     	;# 
  1269  011A                     	;# 
  1270  011B                     	;# 
  1271  011B                     	;# 
  1272  011B                     	;# 
  1273  011B                     	;# 
  1274  011B                     	;# 
  1275  011C                     	;# 
  1276  011C                     	;# 
  1277  011C                     	;# 
  1278  011D                     	;# 
  1279  011D                     	;# 
  1280  011D                     	;# 
  1281  011E                     	;# 
  1282  011E                     	;# 
  1283  011E                     	;# 
  1284  011F                     	;# 
  1285  011F                     	;# 
  1286  011F                     	;# 
  1287  011F                     	;# 
  1288  011F                     	;# 
  1289  018C                     	;# 
  1290  018D                     	;# 
  1291  018E                     	;# 
  1292  018F                     	;# 
  1293  0190                     	;# 
  1294  0191                     	;# 
  1295  0192                     	;# 
  1296  0196                     	;# 
  1297  0197                     	;# 
  1298  0198                     	;# 
  1299  0199                     	;# 
  1300  019A                     	;# 
  1301  019B                     	;# 
  1302  019C                     	;# 
  1303  020C                     	;# 
  1304  020C                     	;# 
  1305  020D                     	;# 
  1306  020E                     	;# 
  1307  020F                     	;# 
  1308  020F                     	;# 
  1309  0210                     	;# 
  1310  0210                     	;# 
  1311  0211                     	;# 
  1312  0211                     	;# 
  1313  0212                     	;# 
  1314  0212                     	;# 
  1315  0213                     	;# 
  1316  0214                     	;# 
  1317  0215                     	;# 
  1318  0215                     	;# 
  1319  0216                     	;# 
  1320  0216                     	;# 
  1321  0217                     	;# 
  1322  0217                     	;# 
  1323  0218                     	;# 
  1324  0218                     	;# 
  1325  0219                     	;# 
  1326  021A                     	;# 
  1327  021B                     	;# 
  1328  021B                     	;# 
  1329  021C                     	;# 
  1330  021C                     	;# 
  1331  021D                     	;# 
  1332  021D                     	;# 
  1333  021E                     	;# 
  1334  021F                     	;# 
  1335  028C                     	;# 
  1336  028C                     	;# 
  1337  028D                     	;# 
  1338  028D                     	;# 
  1339  028E                     	;# 
  1340  028F                     	;# 
  1341  0290                     	;# 
  1342  0290                     	;# 
  1343  0291                     	;# 
  1344  0292                     	;# 
  1345  0292                     	;# 
  1346  0293                     	;# 
  1347  0293                     	;# 
  1348  0294                     	;# 
  1349  0295                     	;# 
  1350  0296                     	;# 
  1351  0296                     	;# 
  1352  0297                     	;# 
  1353  0298                     	;# 
  1354  0298                     	;# 
  1355  0299                     	;# 
  1356  0299                     	;# 
  1357  029A                     	;# 
  1358  029B                     	;# 
  1359  029C                     	;# 
  1360  029C                     	;# 
  1361  029D                     	;# 
  1362  030C                     	;# 
  1363  030C                     	;# 
  1364  030D                     	;# 
  1365  030E                     	;# 
  1366  030F                     	;# 
  1367  0310                     	;# 
  1368  0310                     	;# 
  1369  0311                     	;# 
  1370  0312                     	;# 
  1371  0313                     	;# 
  1372  0314                     	;# 
  1373  0314                     	;# 
  1374  0315                     	;# 
  1375  0316                     	;# 
  1376  0317                     	;# 
  1377  0318                     	;# 
  1378  0318                     	;# 
  1379  0319                     	;# 
  1380  031A                     	;# 
  1381  031B                     	;# 
  1382  031C                     	;# 
  1383  031C                     	;# 
  1384  031D                     	;# 
  1385  031E                     	;# 
  1386  031F                     	;# 
  1387  038C                     	;# 
  1388  038D                     	;# 
  1389  038E                     	;# 
  1390  0390                     	;# 
  1391  0391                     	;# 
  1392  0392                     	;# 
  1393  040C                     	;# 
  1394  040D                     	;# 
  1395  040E                     	;# 
  1396  040F                     	;# 
  1397  0410                     	;# 
  1398  0411                     	;# 
  1399  0416                     	;# 
  1400  0416                     	;# 
  1401  0417                     	;# 
  1402  0418                     	;# 
  1403  0418                     	;# 
  1404  0419                     	;# 
  1405  041A                     	;# 
  1406  041A                     	;# 
  1407  041B                     	;# 
  1408  041C                     	;# 
  1409  041C                     	;# 
  1410  041D                     	;# 
  1411  041E                     	;# 
  1412  041F                     	;# 
  1413  048C                     	;# 
  1414  048C                     	;# 
  1415  048D                     	;# 
  1416  048E                     	;# 
  1417  048F                     	;# 
  1418  048F                     	;# 
  1419  0490                     	;# 
  1420  0491                     	;# 
  1421  0492                     	;# 
  1422  0492                     	;# 
  1423  0493                     	;# 
  1424  0494                     	;# 
  1425  0495                     	;# 
  1426  0495                     	;# 
  1427  0496                     	;# 
  1428  0497                     	;# 
  1429  0498                     	;# 
  1430  0499                     	;# 
  1431  049A                     	;# 
  1432  049B                     	;# 
  1433  049C                     	;# 
  1434  049D                     	;# 
  1435  050C                     	;# 
  1436  050C                     	;# 
  1437  050D                     	;# 
  1438  050E                     	;# 
  1439  050F                     	;# 
  1440  050F                     	;# 
  1441  0510                     	;# 
  1442  0511                     	;# 
  1443  0512                     	;# 
  1444  0512                     	;# 
  1445  0513                     	;# 
  1446  0514                     	;# 
  1447  0515                     	;# 
  1448  0515                     	;# 
  1449  0516                     	;# 
  1450  0517                     	;# 
  1451  0518                     	;# 
  1452  0519                     	;# 
  1453  051A                     	;# 
  1454  051B                     	;# 
  1455  051C                     	;# 
  1456  051D                     	;# 
  1457  058C                     	;# 
  1458  058C                     	;# 
  1459  058D                     	;# 
  1460  058E                     	;# 
  1461  058F                     	;# 
  1462  058F                     	;# 
  1463  0590                     	;# 
  1464  0591                     	;# 
  1465  0592                     	;# 
  1466  0593                     	;# 
  1467  060C                     	;# 
  1468  060D                     	;# 
  1469  060E                     	;# 
  1470  060F                     	;# 
  1471  0610                     	;# 
  1472  0611                     	;# 
  1473  0612                     	;# 
  1474  0613                     	;# 
  1475  0614                     	;# 
  1476  0616                     	;# 
  1477  0617                     	;# 
  1478  0618                     	;# 
  1479  0619                     	;# 
  1480  061A                     	;# 
  1481  061B                     	;# 
  1482  061C                     	;# 
  1483  061D                     	;# 
  1484  061E                     	;# 
  1485  068C                     	;# 
  1486  068D                     	;# 
  1487  068E                     	;# 
  1488  068F                     	;# 
  1489  0690                     	;# 
  1490  0691                     	;# 
  1491  0692                     	;# 
  1492  0693                     	;# 
  1493  0694                     	;# 
  1494  070C                     	;# 
  1495  070D                     	;# 
  1496  070E                     	;# 
  1497  070F                     	;# 
  1498  0710                     	;# 
  1499  0711                     	;# 
  1500  0712                     	;# 
  1501  0713                     	;# 
  1502  0714                     	;# 
  1503  0716                     	;# 
  1504  0717                     	;# 
  1505  0718                     	;# 
  1506  0719                     	;# 
  1507  071A                     	;# 
  1508  071B                     	;# 
  1509  071C                     	;# 
  1510  071D                     	;# 
  1511  071E                     	;# 
  1512  0796                     	;# 
  1513  0797                     	;# 
  1514  0798                     	;# 
  1515  0799                     	;# 
  1516  079A                     	;# 
  1517  079B                     	;# 
  1518  080C                     	;# 
  1519  080D                     	;# 
  1520  080E                     	;# 
  1521  080F                     	;# 
  1522  0810                     	;# 
  1523  0811                     	;# 
  1524  0812                     	;# 
  1525  0813                     	;# 
  1526  0814                     	;# 
  1527  081A                     	;# 
  1528  081B                     	;# 
  1529  081C                     	;# 
  1530  081D                     	;# 
  1531  081E                     	;# 
  1532  081F                     	;# 
  1533  088C                     	;# 
  1534  088D                     	;# 
  1535  088E                     	;# 
  1536  088F                     	;# 
  1537  0890                     	;# 
  1538  0891                     	;# 
  1539  0892                     	;# 
  1540  0893                     	;# 
  1541  0895                     	;# 
  1542  0896                     	;# 
  1543  0897                     	;# 
  1544  0898                     	;# 
  1545  0899                     	;# 
  1546  089A                     	;# 
  1547  089B                     	;# 
  1548  090C                     	;# 
  1549  090E                     	;# 
  1550  090F                     	;# 
  1551  091F                     	;# 
  1552  091F                     	;# 
  1553  098F                     	;# 
  1554  098F                     	;# 
  1555  0990                     	;# 
  1556  0991                     	;# 
  1557  0992                     	;# 
  1558  0993                     	;# 
  1559  0994                     	;# 
  1560  0995                     	;# 
  1561  0996                     	;# 
  1562  0997                     	;# 
  1563  0E0F                     	;# 
  1564  0E10                     	;# 
  1565  0E11                     	;# 
  1566  0E12                     	;# 
  1567  0E13                     	;# 
  1568  0E14                     	;# 
  1569  0E15                     	;# 
  1570  0E16                     	;# 
  1571  0E17                     	;# 
  1572  0E18                     	;# 
  1573  0E19                     	;# 
  1574  0E1A                     	;# 
  1575  0E1B                     	;# 
  1576  0E1C                     	;# 
  1577  0E1D                     	;# 
  1578  0E1E                     	;# 
  1579  0E1F                     	;# 
  1580  0E20                     	;# 
  1581  0E21                     	;# 
  1582  0E22                     	;# 
  1583  0E23                     	;# 
  1584  0E24                     	;# 
  1585  0E25                     	;# 
  1586  0E26                     	;# 
  1587  0E27                     	;# 
  1588  0E28                     	;# 
  1589  0E29                     	;# 
  1590  0E2A                     	;# 
  1591  0E2B                     	;# 
  1592  0E2C                     	;# 
  1593  0E2D                     	;# 
  1594  0E2E                     	;# 
  1595  0E2F                     	;# 
  1596  0E30                     	;# 
  1597  0E31                     	;# 
  1598  0E32                     	;# 
  1599  0E33                     	;# 
  1600  0E34                     	;# 
  1601  0E35                     	;# 
  1602  0E36                     	;# 
  1603  0E37                     	;# 
  1604  0E8F                     	;# 
  1605  0E90                     	;# 
  1606  0E91                     	;# 
  1607  0E92                     	;# 
  1608  0E93                     	;# 
  1609  0E94                     	;# 
  1610  0E95                     	;# 
  1611  0E96                     	;# 
  1612  0E97                     	;# 
  1613  0E9C                     	;# 
  1614  0E9D                     	;# 
  1615  0E9E                     	;# 
  1616  0EA1                     	;# 
  1617  0EA2                     	;# 
  1618  0EA3                     	;# 
  1619  0EA4                     	;# 
  1620  0EA5                     	;# 
  1621  0EA9                     	;# 
  1622  0EAA                     	;# 
  1623  0EAB                     	;# 
  1624  0EAC                     	;# 
  1625  0EB1                     	;# 
  1626  0EB2                     	;# 
  1627  0EB3                     	;# 
  1628  0EB8                     	;# 
  1629  0EB9                     	;# 
  1630  0EBA                     	;# 
  1631  0EBB                     	;# 
  1632  0EBC                     	;# 
  1633  0EBD                     	;# 
  1634  0EBE                     	;# 
  1635  0EC3                     	;# 
  1636  0EC5                     	;# 
  1637  0EC6                     	;# 
  1638  0EC7                     	;# 
  1639  0EC8                     	;# 
  1640  0EC9                     	;# 
  1641  0ECA                     	;# 
  1642  0ECB                     	;# 
  1643  0ECC                     	;# 
  1644  0F10                     	;# 
  1645  0F11                     	;# 
  1646  0F12                     	;# 
  1647  0F13                     	;# 
  1648  0F14                     	;# 
  1649  0F15                     	;# 
  1650  0F16                     	;# 
  1651  0F17                     	;# 
  1652  0F18                     	;# 
  1653  0F19                     	;# 
  1654  0F1A                     	;# 
  1655  0F1B                     	;# 
  1656  0F1C                     	;# 
  1657  0F1D                     	;# 
  1658  0F1E                     	;# 
  1659  0F1F                     	;# 
  1660  0F20                     	;# 
  1661  0F21                     	;# 
  1662  0F22                     	;# 
  1663  0F23                     	;# 
  1664  0F24                     	;# 
  1665  0F25                     	;# 
  1666  0F26                     	;# 
  1667  0F27                     	;# 
  1668  0F28                     	;# 
  1669  0F29                     	;# 
  1670  0F2A                     	;# 
  1671  0F2B                     	;# 
  1672  0F2C                     	;# 
  1673  0F2D                     	;# 
  1674  0F2E                     	;# 
  1675  0F2F                     	;# 
  1676  0F30                     	;# 
  1677  0F31                     	;# 
  1678  0F32                     	;# 
  1679  0F38                     	;# 
  1680  0F39                     	;# 
  1681  0F3A                     	;# 
  1682  0F3B                     	;# 
  1683  0F3C                     	;# 
  1684  0F3D                     	;# 
  1685  0F3E                     	;# 
  1686  0F3F                     	;# 
  1687  0F40                     	;# 
  1688  0F41                     	;# 
  1689  0F43                     	;# 
  1690  0F44                     	;# 
  1691  0F45                     	;# 
  1692  0F46                     	;# 
  1693  0F47                     	;# 
  1694  0F48                     	;# 
  1695  0F49                     	;# 
  1696  0F4A                     	;# 
  1697  0F4B                     	;# 
  1698  0F4C                     	;# 
  1699  0F4E                     	;# 
  1700  0F4F                     	;# 
  1701  0F50                     	;# 
  1702  0F51                     	;# 
  1703  0F52                     	;# 
  1704  0F53                     	;# 
  1705  0F54                     	;# 
  1706  0F55                     	;# 
  1707  0F56                     	;# 
  1708  0F57                     	;# 
  1709  0F59                     	;# 
  1710  0F5A                     	;# 
  1711  0F5B                     	;# 
  1712  0F5C                     	;# 
  1713  0F5D                     	;# 
  1714  0F61                     	;# 
  1715  0F62                     	;# 
  1716  0F64                     	;# 
  1717  0F65                     	;# 
  1718  0F66                     	;# 
  1719  0F67                     	;# 
  1720  0F68                     	;# 
  1721  0F69                     	;# 
  1722  0F6A                     	;# 
  1723  0F6B                     	;# 
  1724  0F6C                     	;# 
  1725  0F6D                     	;# 
  1726  0FE4                     	;# 
  1727  0FE5                     	;# 
  1728  0FE6                     	;# 
  1729  0FE7                     	;# 
  1730  0FE8                     	;# 
  1731  0FE9                     	;# 
  1732  0FEA                     	;# 
  1733  0FEB                     	;# 
  1734  0FED                     	;# 
  1735  0FEE                     	;# 
  1736  0FEF                     	;# 
  1737  0000                     	;# 
  1738  0001                     	;# 
  1739  0002                     	;# 
  1740  0003                     	;# 
  1741  0004                     	;# 
  1742  0005                     	;# 
  1743  0006                     	;# 
  1744  0007                     	;# 
  1745  0008                     	;# 
  1746  0009                     	;# 
  1747  000A                     	;# 
  1748  000B                     	;# 
  1749  000C                     	;# 
  1750  000D                     	;# 
  1751  000E                     	;# 
  1752  000F                     	;# 
  1753  0010                     	;# 
  1754  0011                     	;# 
  1755  0012                     	;# 
  1756  0013                     	;# 
  1757  0014                     	;# 
  1758  0015                     	;# 
  1759  0016                     	;# 
  1760  0017                     	;# 
  1761  0018                     	;# 
  1762  0019                     	;# 
  1763  001A                     	;# 
  1764  001C                     	;# 
  1765  001C                     	;# 
  1766  001D                     	;# 
  1767  001D                     	;# 
  1768  001E                     	;# 
  1769  001F                     	;# 
  1770  008C                     	;# 
  1771  008C                     	;# 
  1772  008D                     	;# 
  1773  008E                     	;# 
  1774  008E                     	;# 
  1775  008F                     	;# 
  1776  0090                     	;# 
  1777  0090                     	;# 
  1778  0091                     	;# 
  1779  0093                     	;# 
  1780  0094                     	;# 
  1781  0095                     	;# 
  1782  0096                     	;# 
  1783  0097                     	;# 
  1784  0098                     	;# 
  1785  0099                     	;# 
  1786  009A                     	;# 
  1787  009B                     	;# 
  1788  009C                     	;# 
  1789  009D                     	;# 
  1790  009E                     	;# 
  1791  010C                     	;# 
  1792  010D                     	;# 
  1793  010E                     	;# 
  1794  010E                     	;# 
  1795  010F                     	;# 
  1796  0110                     	;# 
  1797  0110                     	;# 
  1798  0111                     	;# 
  1799  0112                     	;# 
  1800  0112                     	;# 
  1801  0113                     	;# 
  1802  0114                     	;# 
  1803  0114                     	;# 
  1804  0115                     	;# 
  1805  0116                     	;# 
  1806  0116                     	;# 
  1807  0117                     	;# 
  1808  0119                     	;# 
  1809  0119                     	;# 
  1810  0119                     	;# 
  1811  011A                     	;# 
  1812  011A                     	;# 
  1813  011A                     	;# 
  1814  011B                     	;# 
  1815  011B                     	;# 
  1816  011B                     	;# 
  1817  011B                     	;# 
  1818  011B                     	;# 
  1819  011C                     	;# 
  1820  011C                     	;# 
  1821  011C                     	;# 
  1822  011D                     	;# 
  1823  011D                     	;# 
  1824  011D                     	;# 
  1825  011E                     	;# 
  1826  011E                     	;# 
  1827  011E                     	;# 
  1828  011F                     	;# 
  1829  011F                     	;# 
  1830  011F                     	;# 
  1831  011F                     	;# 
  1832  011F                     	;# 
  1833  018C                     	;# 
  1834  018D                     	;# 
  1835  018E                     	;# 
  1836  018F                     	;# 
  1837  0190                     	;# 
  1838  0191                     	;# 
  1839  0192                     	;# 
  1840  0196                     	;# 
  1841  0197                     	;# 
  1842  0198                     	;# 
  1843  0199                     	;# 
  1844  019A                     	;# 
  1845  019B                     	;# 
  1846  019C                     	;# 
  1847  020C                     	;# 
  1848  020C                     	;# 
  1849  020D                     	;# 
  1850  020E                     	;# 
  1851  020F                     	;# 
  1852  020F                     	;# 
  1853  0210                     	;# 
  1854  0210                     	;# 
  1855  0211                     	;# 
  1856  0211                     	;# 
  1857  0212                     	;# 
  1858  0212                     	;# 
  1859  0213                     	;# 
  1860  0214                     	;# 
  1861  0215                     	;# 
  1862  0215                     	;# 
  1863  0216                     	;# 
  1864  0216                     	;# 
  1865  0217                     	;# 
  1866  0217                     	;# 
  1867  0218                     	;# 
  1868  0218                     	;# 
  1869  0219                     	;# 
  1870  021A                     	;# 
  1871  021B                     	;# 
  1872  021B                     	;# 
  1873  021C                     	;# 
  1874  021C                     	;# 
  1875  021D                     	;# 
  1876  021D                     	;# 
  1877  021E                     	;# 
  1878  021F                     	;# 
  1879  028C                     	;# 
  1880  028C                     	;# 
  1881  028D                     	;# 
  1882  028D                     	;# 
  1883  028E                     	;# 
  1884  028F                     	;# 
  1885  0290                     	;# 
  1886  0290                     	;# 
  1887  0291                     	;# 
  1888  0292                     	;# 
  1889  0292                     	;# 
  1890  0293                     	;# 
  1891  0293                     	;# 
  1892  0294                     	;# 
  1893  0295                     	;# 
  1894  0296                     	;# 
  1895  0296                     	;# 
  1896  0297                     	;# 
  1897  0298                     	;# 
  1898  0298                     	;# 
  1899  0299                     	;# 
  1900  0299                     	;# 
  1901  029A                     	;# 
  1902  029B                     	;# 
  1903  029C                     	;# 
  1904  029C                     	;# 
  1905  029D                     	;# 
  1906  030C                     	;# 
  1907  030C                     	;# 
  1908  030D                     	;# 
  1909  030E                     	;# 
  1910  030F                     	;# 
  1911  0310                     	;# 
  1912  0310                     	;# 
  1913  0311                     	;# 
  1914  0312                     	;# 
  1915  0313                     	;# 
  1916  0314                     	;# 
  1917  0314                     	;# 
  1918  0315                     	;# 
  1919  0316                     	;# 
  1920  0317                     	;# 
  1921  0318                     	;# 
  1922  0318                     	;# 
  1923  0319                     	;# 
  1924  031A                     	;# 
  1925  031B                     	;# 
  1926  031C                     	;# 
  1927  031C                     	;# 
  1928  031D                     	;# 
  1929  031E                     	;# 
  1930  031F                     	;# 
  1931  038C                     	;# 
  1932  038D                     	;# 
  1933  038E                     	;# 
  1934  0390                     	;# 
  1935  0391                     	;# 
  1936  0392                     	;# 
  1937  040C                     	;# 
  1938  040D                     	;# 
  1939  040E                     	;# 
  1940  040F                     	;# 
  1941  0410                     	;# 
  1942  0411                     	;# 
  1943  0416                     	;# 
  1944  0416                     	;# 
  1945  0417                     	;# 
  1946  0418                     	;# 
  1947  0418                     	;# 
  1948  0419                     	;# 
  1949  041A                     	;# 
  1950  041A                     	;# 
  1951  041B                     	;# 
  1952  041C                     	;# 
  1953  041C                     	;# 
  1954  041D                     	;# 
  1955  041E                     	;# 
  1956  041F                     	;# 
  1957  048C                     	;# 
  1958  048C                     	;# 
  1959  048D                     	;# 
  1960  048E                     	;# 
  1961  048F                     	;# 
  1962  048F                     	;# 
  1963  0490                     	;# 
  1964  0491                     	;# 
  1965  0492                     	;# 
  1966  0492                     	;# 
  1967  0493                     	;# 
  1968  0494                     	;# 
  1969  0495                     	;# 
  1970  0495                     	;# 
  1971  0496                     	;# 
  1972  0497                     	;# 
  1973  0498                     	;# 
  1974  0499                     	;# 
  1975  049A                     	;# 
  1976  049B                     	;# 
  1977  049C                     	;# 
  1978  049D                     	;# 
  1979  050C                     	;# 
  1980  050C                     	;# 
  1981  050D                     	;# 
  1982  050E                     	;# 
  1983  050F                     	;# 
  1984  050F                     	;# 
  1985  0510                     	;# 
  1986  0511                     	;# 
  1987  0512                     	;# 
  1988  0512                     	;# 
  1989  0513                     	;# 
  1990  0514                     	;# 
  1991  0515                     	;# 
  1992  0515                     	;# 
  1993  0516                     	;# 
  1994  0517                     	;# 
  1995  0518                     	;# 
  1996  0519                     	;# 
  1997  051A                     	;# 
  1998  051B                     	;# 
  1999  051C                     	;# 
  2000  051D                     	;# 
  2001  058C                     	;# 
  2002  058C                     	;# 
  2003  058D                     	;# 
  2004  058E                     	;# 
  2005  058F                     	;# 
  2006  058F                     	;# 
  2007  0590                     	;# 
  2008  0591                     	;# 
  2009  0592                     	;# 
  2010  0593                     	;# 
  2011  060C                     	;# 
  2012  060D                     	;# 
  2013  060E                     	;# 
  2014  060F                     	;# 
  2015  0610                     	;# 
  2016  0611                     	;# 
  2017  0612                     	;# 
  2018  0613                     	;# 
  2019  0614                     	;# 
  2020  0616                     	;# 
  2021  0617                     	;# 
  2022  0618                     	;# 
  2023  0619                     	;# 
  2024  061A                     	;# 
  2025  061B                     	;# 
  2026  061C                     	;# 
  2027  061D                     	;# 
  2028  061E                     	;# 
  2029  068C                     	;# 
  2030  068D                     	;# 
  2031  068E                     	;# 
  2032  068F                     	;# 
  2033  0690                     	;# 
  2034  0691                     	;# 
  2035  0692                     	;# 
  2036  0693                     	;# 
  2037  0694                     	;# 
  2038  070C                     	;# 
  2039  070D                     	;# 
  2040  070E                     	;# 
  2041  070F                     	;# 
  2042  0710                     	;# 
  2043  0711                     	;# 
  2044  0712                     	;# 
  2045  0713                     	;# 
  2046  0714                     	;# 
  2047  0716                     	;# 
  2048  0717                     	;# 
  2049  0718                     	;# 
  2050  0719                     	;# 
  2051  071A                     	;# 
  2052  071B                     	;# 
  2053  071C                     	;# 
  2054  071D                     	;# 
  2055  071E                     	;# 
  2056  0796                     	;# 
  2057  0797                     	;# 
  2058  0798                     	;# 
  2059  0799                     	;# 
  2060  079A                     	;# 
  2061  079B                     	;# 
  2062  080C                     	;# 
  2063  080D                     	;# 
  2064  080E                     	;# 
  2065  080F                     	;# 
  2066  0810                     	;# 
  2067  0811                     	;# 
  2068  0812                     	;# 
  2069  0813                     	;# 
  2070  0814                     	;# 
  2071  081A                     	;# 
  2072  081B                     	;# 
  2073  081C                     	;# 
  2074  081D                     	;# 
  2075  081E                     	;# 
  2076  081F                     	;# 
  2077  088C                     	;# 
  2078  088D                     	;# 
  2079  088E                     	;# 
  2080  088F                     	;# 
  2081  0890                     	;# 
  2082  0891                     	;# 
  2083  0892                     	;# 
  2084  0893                     	;# 
  2085  0895                     	;# 
  2086  0896                     	;# 
  2087  0897                     	;# 
  2088  0898                     	;# 
  2089  0899                     	;# 
  2090  089A                     	;# 
  2091  089B                     	;# 
  2092  090C                     	;# 
  2093  090E                     	;# 
  2094  090F                     	;# 
  2095  091F                     	;# 
  2096  091F                     	;# 
  2097  098F                     	;# 
  2098  098F                     	;# 
  2099  0990                     	;# 
  2100  0991                     	;# 
  2101  0992                     	;# 
  2102  0993                     	;# 
  2103  0994                     	;# 
  2104  0995                     	;# 
  2105  0996                     	;# 
  2106  0997                     	;# 
  2107  0E0F                     	;# 
  2108  0E10                     	;# 
  2109  0E11                     	;# 
  2110  0E12                     	;# 
  2111  0E13                     	;# 
  2112  0E14                     	;# 
  2113  0E15                     	;# 
  2114  0E16                     	;# 
  2115  0E17                     	;# 
  2116  0E18                     	;# 
  2117  0E19                     	;# 
  2118  0E1A                     	;# 
  2119  0E1B                     	;# 
  2120  0E1C                     	;# 
  2121  0E1D                     	;# 
  2122  0E1E                     	;# 
  2123  0E1F                     	;# 
  2124  0E20                     	;# 
  2125  0E21                     	;# 
  2126  0E22                     	;# 
  2127  0E23                     	;# 
  2128  0E24                     	;# 
  2129  0E25                     	;# 
  2130  0E26                     	;# 
  2131  0E27                     	;# 
  2132  0E28                     	;# 
  2133  0E29                     	;# 
  2134  0E2A                     	;# 
  2135  0E2B                     	;# 
  2136  0E2C                     	;# 
  2137  0E2D                     	;# 
  2138  0E2E                     	;# 
  2139  0E2F                     	;# 
  2140  0E30                     	;# 
  2141  0E31                     	;# 
  2142  0E32                     	;# 
  2143  0E33                     	;# 
  2144  0E34                     	;# 
  2145  0E35                     	;# 
  2146  0E36                     	;# 
  2147  0E37                     	;# 
  2148  0E8F                     	;# 
  2149  0E90                     	;# 
  2150  0E91                     	;# 
  2151  0E92                     	;# 
  2152  0E93                     	;# 
  2153  0E94                     	;# 
  2154  0E95                     	;# 
  2155  0E96                     	;# 
  2156  0E97                     	;# 
  2157  0E9C                     	;# 
  2158  0E9D                     	;# 
  2159  0E9E                     	;# 
  2160  0EA1                     	;# 
  2161  0EA2                     	;# 
  2162  0EA3                     	;# 
  2163  0EA4                     	;# 
  2164  0EA5                     	;# 
  2165  0EA9                     	;# 
  2166  0EAA                     	;# 
  2167  0EAB                     	;# 
  2168  0EAC                     	;# 
  2169  0EB1                     	;# 
  2170  0EB2                     	;# 
  2171  0EB3                     	;# 
  2172  0EB8                     	;# 
  2173  0EB9                     	;# 
  2174  0EBA                     	;# 
  2175  0EBB                     	;# 
  2176  0EBC                     	;# 
  2177  0EBD                     	;# 
  2178  0EBE                     	;# 
  2179  0EC3                     	;# 
  2180  0EC5                     	;# 
  2181  0EC6                     	;# 
  2182  0EC7                     	;# 
  2183  0EC8                     	;# 
  2184  0EC9                     	;# 
  2185  0ECA                     	;# 
  2186  0ECB                     	;# 
  2187  0ECC                     	;# 
  2188  0F10                     	;# 
  2189  0F11                     	;# 
  2190  0F12                     	;# 
  2191  0F13                     	;# 
  2192  0F14                     	;# 
  2193  0F15                     	;# 
  2194  0F16                     	;# 
  2195  0F17                     	;# 
  2196  0F18                     	;# 
  2197  0F19                     	;# 
  2198  0F1A                     	;# 
  2199  0F1B                     	;# 
  2200  0F1C                     	;# 
  2201  0F1D                     	;# 
  2202  0F1E                     	;# 
  2203  0F1F                     	;# 
  2204  0F20                     	;# 
  2205  0F21                     	;# 
  2206  0F22                     	;# 
  2207  0F23                     	;# 
  2208  0F24                     	;# 
  2209  0F25                     	;# 
  2210  0F26                     	;# 
  2211  0F27                     	;# 
  2212  0F28                     	;# 
  2213  0F29                     	;# 
  2214  0F2A                     	;# 
  2215  0F2B                     	;# 
  2216  0F2C                     	;# 
  2217  0F2D                     	;# 
  2218  0F2E                     	;# 
  2219  0F2F                     	;# 
  2220  0F30                     	;# 
  2221  0F31                     	;# 
  2222  0F32                     	;# 
  2223  0F38                     	;# 
  2224  0F39                     	;# 
  2225  0F3A                     	;# 
  2226  0F3B                     	;# 
  2227  0F3C                     	;# 
  2228  0F3D                     	;# 
  2229  0F3E                     	;# 
  2230  0F3F                     	;# 
  2231  0F40                     	;# 
  2232  0F41                     	;# 
  2233  0F43                     	;# 
  2234  0F44                     	;# 
  2235  0F45                     	;# 
  2236  0F46                     	;# 
  2237  0F47                     	;# 
  2238  0F48                     	;# 
  2239  0F49                     	;# 
  2240  0F4A                     	;# 
  2241  0F4B                     	;# 
  2242  0F4C                     	;# 
  2243  0F4E                     	;# 
  2244  0F4F                     	;# 
  2245  0F50                     	;# 
  2246  0F51                     	;# 
  2247  0F52                     	;# 
  2248  0F53                     	;# 
  2249  0F54                     	;# 
  2250  0F55                     	;# 
  2251  0F56                     	;# 
  2252  0F57                     	;# 
  2253  0F59                     	;# 
  2254  0F5A                     	;# 
  2255  0F5B                     	;# 
  2256  0F5C                     	;# 
  2257  0F5D                     	;# 
  2258  0F61                     	;# 
  2259  0F62                     	;# 
  2260  0F64                     	;# 
  2261  0F65                     	;# 
  2262  0F66                     	;# 
  2263  0F67                     	;# 
  2264  0F68                     	;# 
  2265  0F69                     	;# 
  2266  0F6A                     	;# 
  2267  0F6B                     	;# 
  2268  0F6C                     	;# 
  2269  0F6D                     	;# 
  2270  0FE4                     	;# 
  2271  0FE5                     	;# 
  2272  0FE6                     	;# 
  2273  0FE7                     	;# 
  2274  0FE8                     	;# 
  2275  0FE9                     	;# 
  2276  0FEA                     	;# 
  2277  0FEB                     	;# 
  2278  0FED                     	;# 
  2279  0FEE                     	;# 
  2280  0FEF                     	;# 
  2281  0000                     	;# 
  2282  0001                     	;# 
  2283  0002                     	;# 
  2284  0003                     	;# 
  2285  0004                     	;# 
  2286  0005                     	;# 
  2287  0006                     	;# 
  2288  0007                     	;# 
  2289  0008                     	;# 
  2290  0009                     	;# 
  2291  000A                     	;# 
  2292  000B                     	;# 
  2293  000C                     	;# 
  2294  000D                     	;# 
  2295  000E                     	;# 
  2296  000F                     	;# 
  2297  0010                     	;# 
  2298  0011                     	;# 
  2299  0012                     	;# 
  2300  0013                     	;# 
  2301  0014                     	;# 
  2302  0015                     	;# 
  2303  0016                     	;# 
  2304  0017                     	;# 
  2305  0018                     	;# 
  2306  0019                     	;# 
  2307  001A                     	;# 
  2308  001C                     	;# 
  2309  001C                     	;# 
  2310  001D                     	;# 
  2311  001D                     	;# 
  2312  001E                     	;# 
  2313  001F                     	;# 
  2314  008C                     	;# 
  2315  008C                     	;# 
  2316  008D                     	;# 
  2317  008E                     	;# 
  2318  008E                     	;# 
  2319  008F                     	;# 
  2320  0090                     	;# 
  2321  0090                     	;# 
  2322  0091                     	;# 
  2323  0093                     	;# 
  2324  0094                     	;# 
  2325  0095                     	;# 
  2326  0096                     	;# 
  2327  0097                     	;# 
  2328  0098                     	;# 
  2329  0099                     	;# 
  2330  009A                     	;# 
  2331  009B                     	;# 
  2332  009C                     	;# 
  2333  009D                     	;# 
  2334  009E                     	;# 
  2335  010C                     	;# 
  2336  010D                     	;# 
  2337  010E                     	;# 
  2338  010E                     	;# 
  2339  010F                     	;# 
  2340  0110                     	;# 
  2341  0110                     	;# 
  2342  0111                     	;# 
  2343  0112                     	;# 
  2344  0112                     	;# 
  2345  0113                     	;# 
  2346  0114                     	;# 
  2347  0114                     	;# 
  2348  0115                     	;# 
  2349  0116                     	;# 
  2350  0116                     	;# 
  2351  0117                     	;# 
  2352  0119                     	;# 
  2353  0119                     	;# 
  2354  0119                     	;# 
  2355  011A                     	;# 
  2356  011A                     	;# 
  2357  011A                     	;# 
  2358  011B                     	;# 
  2359  011B                     	;# 
  2360  011B                     	;# 
  2361  011B                     	;# 
  2362  011B                     	;# 
  2363  011C                     	;# 
  2364  011C                     	;# 
  2365  011C                     	;# 
  2366  011D                     	;# 
  2367  011D                     	;# 
  2368  011D                     	;# 
  2369  011E                     	;# 
  2370  011E                     	;# 
  2371  011E                     	;# 
  2372  011F                     	;# 
  2373  011F                     	;# 
  2374  011F                     	;# 
  2375  011F                     	;# 
  2376  011F                     	;# 
  2377  018C                     	;# 
  2378  018D                     	;# 
  2379  018E                     	;# 
  2380  018F                     	;# 
  2381  0190                     	;# 
  2382  0191                     	;# 
  2383  0192                     	;# 
  2384  0196                     	;# 
  2385  0197                     	;# 
  2386  0198                     	;# 
  2387  0199                     	;# 
  2388  019A                     	;# 
  2389  019B                     	;# 
  2390  019C                     	;# 
  2391  020C                     	;# 
  2392  020C                     	;# 
  2393  020D                     	;# 
  2394  020E                     	;# 
  2395  020F                     	;# 
  2396  020F                     	;# 
  2397  0210                     	;# 
  2398  0210                     	;# 
  2399  0211                     	;# 
  2400  0211                     	;# 
  2401  0212                     	;# 
  2402  0212                     	;# 
  2403  0213                     	;# 
  2404  0214                     	;# 
  2405  0215                     	;# 
  2406  0215                     	;# 
  2407  0216                     	;# 
  2408  0216                     	;# 
  2409  0217                     	;# 
  2410  0217                     	;# 
  2411  0218                     	;# 
  2412  0218                     	;# 
  2413  0219                     	;# 
  2414  021A                     	;# 
  2415  021B                     	;# 
  2416  021B                     	;# 
  2417  021C                     	;# 
  2418  021C                     	;# 
  2419  021D                     	;# 
  2420  021D                     	;# 
  2421  021E                     	;# 
  2422  021F                     	;# 
  2423  028C                     	;# 
  2424  028C                     	;# 
  2425  028D                     	;# 
  2426  028D                     	;# 
  2427  028E                     	;# 
  2428  028F                     	;# 
  2429  0290                     	;# 
  2430  0290                     	;# 
  2431  0291                     	;# 
  2432  0292                     	;# 
  2433  0292                     	;# 
  2434  0293                     	;# 
  2435  0293                     	;# 
  2436  0294                     	;# 
  2437  0295                     	;# 
  2438  0296                     	;# 
  2439  0296                     	;# 
  2440  0297                     	;# 
  2441  0298                     	;# 
  2442  0298                     	;# 
  2443  0299                     	;# 
  2444  0299                     	;# 
  2445  029A                     	;# 
  2446  029B                     	;# 
  2447  029C                     	;# 
  2448  029C                     	;# 
  2449  029D                     	;# 
  2450  030C                     	;# 
  2451  030C                     	;# 
  2452  030D                     	;# 
  2453  030E                     	;# 
  2454  030F                     	;# 
  2455  0310                     	;# 
  2456  0310                     	;# 
  2457  0311                     	;# 
  2458  0312                     	;# 
  2459  0313                     	;# 
  2460  0314                     	;# 
  2461  0314                     	;# 
  2462  0315                     	;# 
  2463  0316                     	;# 
  2464  0317                     	;# 
  2465  0318                     	;# 
  2466  0318                     	;# 
  2467  0319                     	;# 
  2468  031A                     	;# 
  2469  031B                     	;# 
  2470  031C                     	;# 
  2471  031C                     	;# 
  2472  031D                     	;# 
  2473  031E                     	;# 
  2474  031F                     	;# 
  2475  038C                     	;# 
  2476  038D                     	;# 
  2477  038E                     	;# 
  2478  0390                     	;# 
  2479  0391                     	;# 
  2480  0392                     	;# 
  2481  040C                     	;# 
  2482  040D                     	;# 
  2483  040E                     	;# 
  2484  040F                     	;# 
  2485  0410                     	;# 
  2486  0411                     	;# 
  2487  0416                     	;# 
  2488  0416                     	;# 
  2489  0417                     	;# 
  2490  0418                     	;# 
  2491  0418                     	;# 
  2492  0419                     	;# 
  2493  041A                     	;# 
  2494  041A                     	;# 
  2495  041B                     	;# 
  2496  041C                     	;# 
  2497  041C                     	;# 
  2498  041D                     	;# 
  2499  041E                     	;# 
  2500  041F                     	;# 
  2501  048C                     	;# 
  2502  048C                     	;# 
  2503  048D                     	;# 
  2504  048E                     	;# 
  2505  048F                     	;# 
  2506  048F                     	;# 
  2507  0490                     	;# 
  2508  0491                     	;# 
  2509  0492                     	;# 
  2510  0492                     	;# 
  2511  0493                     	;# 
  2512  0494                     	;# 
  2513  0495                     	;# 
  2514  0495                     	;# 
  2515  0496                     	;# 
  2516  0497                     	;# 
  2517  0498                     	;# 
  2518  0499                     	;# 
  2519  049A                     	;# 
  2520  049B                     	;# 
  2521  049C                     	;# 
  2522  049D                     	;# 
  2523  050C                     	;# 
  2524  050C                     	;# 
  2525  050D                     	;# 
  2526  050E                     	;# 
  2527  050F                     	;# 
  2528  050F                     	;# 
  2529  0510                     	;# 
  2530  0511                     	;# 
  2531  0512                     	;# 
  2532  0512                     	;# 
  2533  0513                     	;# 
  2534  0514                     	;# 
  2535  0515                     	;# 
  2536  0515                     	;# 
  2537  0516                     	;# 
  2538  0517                     	;# 
  2539  0518                     	;# 
  2540  0519                     	;# 
  2541  051A                     	;# 
  2542  051B                     	;# 
  2543  051C                     	;# 
  2544  051D                     	;# 
  2545  058C                     	;# 
  2546  058C                     	;# 
  2547  058D                     	;# 
  2548  058E                     	;# 
  2549  058F                     	;# 
  2550  058F                     	;# 
  2551  0590                     	;# 
  2552  0591                     	;# 
  2553  0592                     	;# 
  2554  0593                     	;# 
  2555  060C                     	;# 
  2556  060D                     	;# 
  2557  060E                     	;# 
  2558  060F                     	;# 
  2559  0610                     	;# 
  2560  0611                     	;# 
  2561  0612                     	;# 
  2562  0613                     	;# 
  2563  0614                     	;# 
  2564  0616                     	;# 
  2565  0617                     	;# 
  2566  0618                     	;# 
  2567  0619                     	;# 
  2568  061A                     	;# 
  2569  061B                     	;# 
  2570  061C                     	;# 
  2571  061D                     	;# 
  2572  061E                     	;# 
  2573  068C                     	;# 
  2574  068D                     	;# 
  2575  068E                     	;# 
  2576  068F                     	;# 
  2577  0690                     	;# 
  2578  0691                     	;# 
  2579  0692                     	;# 
  2580  0693                     	;# 
  2581  0694                     	;# 
  2582  070C                     	;# 
  2583  070D                     	;# 
  2584  070E                     	;# 
  2585  070F                     	;# 
  2586  0710                     	;# 
  2587  0711                     	;# 
  2588  0712                     	;# 
  2589  0713                     	;# 
  2590  0714                     	;# 
  2591  0716                     	;# 
  2592  0717                     	;# 
  2593  0718                     	;# 
  2594  0719                     	;# 
  2595  071A                     	;# 
  2596  071B                     	;# 
  2597  071C                     	;# 
  2598  071D                     	;# 
  2599  071E                     	;# 
  2600  0796                     	;# 
  2601  0797                     	;# 
  2602  0798                     	;# 
  2603  0799                     	;# 
  2604  079A                     	;# 
  2605  079B                     	;# 
  2606  080C                     	;# 
  2607  080D                     	;# 
  2608  080E                     	;# 
  2609  080F                     	;# 
  2610  0810                     	;# 
  2611  0811                     	;# 
  2612  0812                     	;# 
  2613  0813                     	;# 
  2614  0814                     	;# 
  2615  081A                     	;# 
  2616  081B                     	;# 
  2617  081C                     	;# 
  2618  081D                     	;# 
  2619  081E                     	;# 
  2620  081F                     	;# 
  2621  088C                     	;# 
  2622  088D                     	;# 
  2623  088E                     	;# 
  2624  088F                     	;# 
  2625  0890                     	;# 
  2626  0891                     	;# 
  2627  0892                     	;# 
  2628  0893                     	;# 
  2629  0895                     	;# 
  2630  0896                     	;# 
  2631  0897                     	;# 
  2632  0898                     	;# 
  2633  0899                     	;# 
  2634  089A                     	;# 
  2635  089B                     	;# 
  2636  090C                     	;# 
  2637  090E                     	;# 
  2638  090F                     	;# 
  2639  091F                     	;# 
  2640  091F                     	;# 
  2641  098F                     	;# 
  2642  098F                     	;# 
  2643  0990                     	;# 
  2644  0991                     	;# 
  2645  0992                     	;# 
  2646  0993                     	;# 
  2647  0994                     	;# 
  2648  0995                     	;# 
  2649  0996                     	;# 
  2650  0997                     	;# 
  2651  0E0F                     	;# 
  2652  0E10                     	;# 
  2653  0E11                     	;# 
  2654  0E12                     	;# 
  2655  0E13                     	;# 
  2656  0E14                     	;# 
  2657  0E15                     	;# 
  2658  0E16                     	;# 
  2659  0E17                     	;# 
  2660  0E18                     	;# 
  2661  0E19                     	;# 
  2662  0E1A                     	;# 
  2663  0E1B                     	;# 
  2664  0E1C                     	;# 
  2665  0E1D                     	;# 
  2666  0E1E                     	;# 
  2667  0E1F                     	;# 
  2668  0E20                     	;# 
  2669  0E21                     	;# 
  2670  0E22                     	;# 
  2671  0E23                     	;# 
  2672  0E24                     	;# 
  2673  0E25                     	;# 
  2674  0E26                     	;# 
  2675  0E27                     	;# 
  2676  0E28                     	;# 
  2677  0E29                     	;# 
  2678  0E2A                     	;# 
  2679  0E2B                     	;# 
  2680  0E2C                     	;# 
  2681  0E2D                     	;# 
  2682  0E2E                     	;# 
  2683  0E2F                     	;# 
  2684  0E30                     	;# 
  2685  0E31                     	;# 
  2686  0E32                     	;# 
  2687  0E33                     	;# 
  2688  0E34                     	;# 
  2689  0E35                     	;# 
  2690  0E36                     	;# 
  2691  0E37                     	;# 
  2692  0E8F                     	;# 
  2693  0E90                     	;# 
  2694  0E91                     	;# 
  2695  0E92                     	;# 
  2696  0E93                     	;# 
  2697  0E94                     	;# 
  2698  0E95                     	;# 
  2699  0E96                     	;# 
  2700  0E97                     	;# 
  2701  0E9C                     	;# 
  2702  0E9D                     	;# 
  2703  0E9E                     	;# 
  2704  0EA1                     	;# 
  2705  0EA2                     	;# 
  2706  0EA3                     	;# 
  2707  0EA4                     	;# 
  2708  0EA5                     	;# 
  2709  0EA9                     	;# 
  2710  0EAA                     	;# 
  2711  0EAB                     	;# 
  2712  0EAC                     	;# 
  2713  0EB1                     	;# 
  2714  0EB2                     	;# 
  2715  0EB3                     	;# 
  2716  0EB8                     	;# 
  2717  0EB9                     	;# 
  2718  0EBA                     	;# 
  2719  0EBB                     	;# 
  2720  0EBC                     	;# 
  2721  0EBD                     	;# 
  2722  0EBE                     	;# 
  2723  0EC3                     	;# 
  2724  0EC5                     	;# 
  2725  0EC6                     	;# 
  2726  0EC7                     	;# 
  2727  0EC8                     	;# 
  2728  0EC9                     	;# 
  2729  0ECA                     	;# 
  2730  0ECB                     	;# 
  2731  0ECC                     	;# 
  2732  0F10                     	;# 
  2733  0F11                     	;# 
  2734  0F12                     	;# 
  2735  0F13                     	;# 
  2736  0F14                     	;# 
  2737  0F15                     	;# 
  2738  0F16                     	;# 
  2739  0F17                     	;# 
  2740  0F18                     	;# 
  2741  0F19                     	;# 
  2742  0F1A                     	;# 
  2743  0F1B                     	;# 
  2744  0F1C                     	;# 
  2745  0F1D                     	;# 
  2746  0F1E                     	;# 
  2747  0F1F                     	;# 
  2748  0F20                     	;# 
  2749  0F21                     	;# 
  2750  0F22                     	;# 
  2751  0F23                     	;# 
  2752  0F24                     	;# 
  2753  0F25                     	;# 
  2754  0F26                     	;# 
  2755  0F27                     	;# 
  2756  0F28                     	;# 
  2757  0F29                     	;# 
  2758  0F2A                     	;# 
  2759  0F2B                     	;# 
  2760  0F2C                     	;# 
  2761  0F2D                     	;# 
  2762  0F2E                     	;# 
  2763  0F2F                     	;# 
  2764  0F30                     	;# 
  2765  0F31                     	;# 
  2766  0F32                     	;# 
  2767  0F38                     	;# 
  2768  0F39                     	;# 
  2769  0F3A                     	;# 
  2770  0F3B                     	;# 
  2771  0F3C                     	;# 
  2772  0F3D                     	;# 
  2773  0F3E                     	;# 
  2774  0F3F                     	;# 
  2775  0F40                     	;# 
  2776  0F41                     	;# 
  2777  0F43                     	;# 
  2778  0F44                     	;# 
  2779  0F45                     	;# 
  2780  0F46                     	;# 
  2781  0F47                     	;# 
  2782  0F48                     	;# 
  2783  0F49                     	;# 
  2784  0F4A                     	;# 
  2785  0F4B                     	;# 
  2786  0F4C                     	;# 
  2787  0F4E                     	;# 
  2788  0F4F                     	;# 
  2789  0F50                     	;# 
  2790  0F51                     	;# 
  2791  0F52                     	;# 
  2792  0F53                     	;# 
  2793  0F54                     	;# 
  2794  0F55                     	;# 
  2795  0F56                     	;# 
  2796  0F57                     	;# 
  2797  0F59                     	;# 
  2798  0F5A                     	;# 
  2799  0F5B                     	;# 
  2800  0F5C                     	;# 
  2801  0F5D                     	;# 
  2802  0F61                     	;# 
  2803  0F62                     	;# 
  2804  0F64                     	;# 
  2805  0F65                     	;# 
  2806  0F66                     	;# 
  2807  0F67                     	;# 
  2808  0F68                     	;# 
  2809  0F69                     	;# 
  2810  0F6A                     	;# 
  2811  0F6B                     	;# 
  2812  0F6C                     	;# 
  2813  0F6D                     	;# 
  2814  0FE4                     	;# 
  2815  0FE5                     	;# 
  2816  0FE6                     	;# 
  2817  0FE7                     	;# 
  2818  0FE8                     	;# 
  2819  0FE9                     	;# 
  2820  0FEA                     	;# 
  2821  0FEB                     	;# 
  2822  0FED                     	;# 
  2823  0FEE                     	;# 
  2824  0FEF                     	;# 
  2825  0000                     	;# 
  2826  0001                     	;# 
  2827  0002                     	;# 
  2828  0003                     	;# 
  2829  0004                     	;# 
  2830  0005                     	;# 
  2831  0006                     	;# 
  2832  0007                     	;# 
  2833  0008                     	;# 
  2834  0009                     	;# 
  2835  000A                     	;# 
  2836  000B                     	;# 
  2837  000C                     	;# 
  2838  000D                     	;# 
  2839  000E                     	;# 
  2840  000F                     	;# 
  2841  0010                     	;# 
  2842  0011                     	;# 
  2843  0012                     	;# 
  2844  0013                     	;# 
  2845  0014                     	;# 
  2846  0015                     	;# 
  2847  0016                     	;# 
  2848  0017                     	;# 
  2849  0018                     	;# 
  2850  0019                     	;# 
  2851  001A                     	;# 
  2852  001C                     	;# 
  2853  001C                     	;# 
  2854  001D                     	;# 
  2855  001D                     	;# 
  2856  001E                     	;# 
  2857  001F                     	;# 
  2858  008C                     	;# 
  2859  008C                     	;# 
  2860  008D                     	;# 
  2861  008E                     	;# 
  2862  008E                     	;# 
  2863  008F                     	;# 
  2864  0090                     	;# 
  2865  0090                     	;# 
  2866  0091                     	;# 
  2867  0093                     	;# 
  2868  0094                     	;# 
  2869  0095                     	;# 
  2870  0096                     	;# 
  2871  0097                     	;# 
  2872  0098                     	;# 
  2873  0099                     	;# 
  2874  009A                     	;# 
  2875  009B                     	;# 
  2876  009C                     	;# 
  2877  009D                     	;# 
  2878  009E                     	;# 
  2879  010C                     	;# 
  2880  010D                     	;# 
  2881  010E                     	;# 
  2882  010E                     	;# 
  2883  010F                     	;# 
  2884  0110                     	;# 
  2885  0110                     	;# 
  2886  0111                     	;# 
  2887  0112                     	;# 
  2888  0112                     	;# 
  2889  0113                     	;# 
  2890  0114                     	;# 
  2891  0114                     	;# 
  2892  0115                     	;# 
  2893  0116                     	;# 
  2894  0116                     	;# 
  2895  0117                     	;# 
  2896  0119                     	;# 
  2897  0119                     	;# 
  2898  0119                     	;# 
  2899  011A                     	;# 
  2900  011A                     	;# 
  2901  011A                     	;# 
  2902  011B                     	;# 
  2903  011B                     	;# 
  2904  011B                     	;# 
  2905  011B                     	;# 
  2906  011B                     	;# 
  2907  011C                     	;# 
  2908  011C                     	;# 
  2909  011C                     	;# 
  2910  011D                     	;# 
  2911  011D                     	;# 
  2912  011D                     	;# 
  2913  011E                     	;# 
  2914  011E                     	;# 
  2915  011E                     	;# 
  2916  011F                     	;# 
  2917  011F                     	;# 
  2918  011F                     	;# 
  2919  011F                     	;# 
  2920  011F                     	;# 
  2921  018C                     	;# 
  2922  018D                     	;# 
  2923  018E                     	;# 
  2924  018F                     	;# 
  2925  0190                     	;# 
  2926  0191                     	;# 
  2927  0192                     	;# 
  2928  0196                     	;# 
  2929  0197                     	;# 
  2930  0198                     	;# 
  2931  0199                     	;# 
  2932  019A                     	;# 
  2933  019B                     	;# 
  2934  019C                     	;# 
  2935  020C                     	;# 
  2936  020C                     	;# 
  2937  020D                     	;# 
  2938  020E                     	;# 
  2939  020F                     	;# 
  2940  020F                     	;# 
  2941  0210                     	;# 
  2942  0210                     	;# 
  2943  0211                     	;# 
  2944  0211                     	;# 
  2945  0212                     	;# 
  2946  0212                     	;# 
  2947  0213                     	;# 
  2948  0214                     	;# 
  2949  0215                     	;# 
  2950  0215                     	;# 
  2951  0216                     	;# 
  2952  0216                     	;# 
  2953  0217                     	;# 
  2954  0217                     	;# 
  2955  0218                     	;# 
  2956  0218                     	;# 
  2957  0219                     	;# 
  2958  021A                     	;# 
  2959  021B                     	;# 
  2960  021B                     	;# 
  2961  021C                     	;# 
  2962  021C                     	;# 
  2963  021D                     	;# 
  2964  021D                     	;# 
  2965  021E                     	;# 
  2966  021F                     	;# 
  2967  028C                     	;# 
  2968  028C                     	;# 
  2969  028D                     	;# 
  2970  028D                     	;# 
  2971  028E                     	;# 
  2972  028F                     	;# 
  2973  0290                     	;# 
  2974  0290                     	;# 
  2975  0291                     	;# 
  2976  0292                     	;# 
  2977  0292                     	;# 
  2978  0293                     	;# 
  2979  0293                     	;# 
  2980  0294                     	;# 
  2981  0295                     	;# 
  2982  0296                     	;# 
  2983  0296                     	;# 
  2984  0297                     	;# 
  2985  0298                     	;# 
  2986  0298                     	;# 
  2987  0299                     	;# 
  2988  0299                     	;# 
  2989  029A                     	;# 
  2990  029B                     	;# 
  2991  029C                     	;# 
  2992  029C                     	;# 
  2993  029D                     	;# 
  2994  030C                     	;# 
  2995  030C                     	;# 
  2996  030D                     	;# 
  2997  030E                     	;# 
  2998  030F                     	;# 
  2999  0310                     	;# 
  3000  0310                     	;# 
  3001  0311                     	;# 
  3002  0312                     	;# 
  3003  0313                     	;# 
  3004  0314                     	;# 
  3005  0314                     	;# 
  3006  0315                     	;# 
  3007  0316                     	;# 
  3008  0317                     	;# 
  3009  0318                     	;# 
  3010  0318                     	;# 
  3011  0319                     	;# 
  3012  031A                     	;# 
  3013  031B                     	;# 
  3014  031C                     	;# 
  3015  031C                     	;# 
  3016  031D                     	;# 
  3017  031E                     	;# 
  3018  031F                     	;# 
  3019  038C                     	;# 
  3020  038D                     	;# 
  3021  038E                     	;# 
  3022  0390                     	;# 
  3023  0391                     	;# 
  3024  0392                     	;# 
  3025  040C                     	;# 
  3026  040D                     	;# 
  3027  040E                     	;# 
  3028  040F                     	;# 
  3029  0410                     	;# 
  3030  0411                     	;# 
  3031  0416                     	;# 
  3032  0416                     	;# 
  3033  0417                     	;# 
  3034  0418                     	;# 
  3035  0418                     	;# 
  3036  0419                     	;# 
  3037  041A                     	;# 
  3038  041A                     	;# 
  3039  041B                     	;# 
  3040  041C                     	;# 
  3041  041C                     	;# 
  3042  041D                     	;# 
  3043  041E                     	;# 
  3044  041F                     	;# 
  3045  048C                     	;# 
  3046  048C                     	;# 
  3047  048D                     	;# 
  3048  048E                     	;# 
  3049  048F                     	;# 
  3050  048F                     	;# 
  3051  0490                     	;# 
  3052  0491                     	;# 
  3053  0492                     	;# 
  3054  0492                     	;# 
  3055  0493                     	;# 
  3056  0494                     	;# 
  3057  0495                     	;# 
  3058  0495                     	;# 
  3059  0496                     	;# 
  3060  0497                     	;# 
  3061  0498                     	;# 
  3062  0499                     	;# 
  3063  049A                     	;# 
  3064  049B                     	;# 
  3065  049C                     	;# 
  3066  049D                     	;# 
  3067  050C                     	;# 
  3068  050C                     	;# 
  3069  050D                     	;# 
  3070  050E                     	;# 
  3071  050F                     	;# 
  3072  050F                     	;# 
  3073  0510                     	;# 
  3074  0511                     	;# 
  3075  0512                     	;# 
  3076  0512                     	;# 
  3077  0513                     	;# 
  3078  0514                     	;# 
  3079  0515                     	;# 
  3080  0515                     	;# 
  3081  0516                     	;# 
  3082  0517                     	;# 
  3083  0518                     	;# 
  3084  0519                     	;# 
  3085  051A                     	;# 
  3086  051B                     	;# 
  3087  051C                     	;# 
  3088  051D                     	;# 
  3089  058C                     	;# 
  3090  058C                     	;# 
  3091  058D                     	;# 
  3092  058E                     	;# 
  3093  058F                     	;# 
  3094  058F                     	;# 
  3095  0590                     	;# 
  3096  0591                     	;# 
  3097  0592                     	;# 
  3098  0593                     	;# 
  3099  060C                     	;# 
  3100  060D                     	;# 
  3101  060E                     	;# 
  3102  060F                     	;# 
  3103  0610                     	;# 
  3104  0611                     	;# 
  3105  0612                     	;# 
  3106  0613                     	;# 
  3107  0614                     	;# 
  3108  0616                     	;# 
  3109  0617                     	;# 
  3110  0618                     	;# 
  3111  0619                     	;# 
  3112  061A                     	;# 
  3113  061B                     	;# 
  3114  061C                     	;# 
  3115  061D                     	;# 
  3116  061E                     	;# 
  3117  068C                     	;# 
  3118  068D                     	;# 
  3119  068E                     	;# 
  3120  068F                     	;# 
  3121  0690                     	;# 
  3122  0691                     	;# 
  3123  0692                     	;# 
  3124  0693                     	;# 
  3125  0694                     	;# 
  3126  070C                     	;# 
  3127  070D                     	;# 
  3128  070E                     	;# 
  3129  070F                     	;# 
  3130  0710                     	;# 
  3131  0711                     	;# 
  3132  0712                     	;# 
  3133  0713                     	;# 
  3134  0714                     	;# 
  3135  0716                     	;# 
  3136  0717                     	;# 
  3137  0718                     	;# 
  3138  0719                     	;# 
  3139  071A                     	;# 
  3140  071B                     	;# 
  3141  071C                     	;# 
  3142  071D                     	;# 
  3143  071E                     	;# 
  3144  0796                     	;# 
  3145  0797                     	;# 
  3146  0798                     	;# 
  3147  0799                     	;# 
  3148  079A                     	;# 
  3149  079B                     	;# 
  3150  080C                     	;# 
  3151  080D                     	;# 
  3152  080E                     	;# 
  3153  080F                     	;# 
  3154  0810                     	;# 
  3155  0811                     	;# 
  3156  0812                     	;# 
  3157  0813                     	;# 
  3158  0814                     	;# 
  3159  081A                     	;# 
  3160  081B                     	;# 
  3161  081C                     	;# 
  3162  081D                     	;# 
  3163  081E                     	;# 
  3164  081F                     	;# 
  3165  088C                     	;# 
  3166  088D                     	;# 
  3167  088E                     	;# 
  3168  088F                     	;# 
  3169  0890                     	;# 
  3170  0891                     	;# 
  3171  0892                     	;# 
  3172  0893                     	;# 
  3173  0895                     	;# 
  3174  0896                     	;# 
  3175  0897                     	;# 
  3176  0898                     	;# 
  3177  0899                     	;# 
  3178  089A                     	;# 
  3179  089B                     	;# 
  3180  090C                     	;# 
  3181  090E                     	;# 
  3182  090F                     	;# 
  3183  091F                     	;# 
  3184  091F                     	;# 
  3185  098F                     	;# 
  3186  098F                     	;# 
  3187  0990                     	;# 
  3188  0991                     	;# 
  3189  0992                     	;# 
  3190  0993                     	;# 
  3191  0994                     	;# 
  3192  0995                     	;# 
  3193  0996                     	;# 
  3194  0997                     	;# 
  3195  0E0F                     	;# 
  3196  0E10                     	;# 
  3197  0E11                     	;# 
  3198  0E12                     	;# 
  3199  0E13                     	;# 
  3200  0E14                     	;# 
  3201  0E15                     	;# 
  3202  0E16                     	;# 
  3203  0E17                     	;# 
  3204  0E18                     	;# 
  3205  0E19                     	;# 
  3206  0E1A                     	;# 
  3207  0E1B                     	;# 
  3208  0E1C                     	;# 
  3209  0E1D                     	;# 
  3210  0E1E                     	;# 
  3211  0E1F                     	;# 
  3212  0E20                     	;# 
  3213  0E21                     	;# 
  3214  0E22                     	;# 
  3215  0E23                     	;# 
  3216  0E24                     	;# 
  3217  0E25                     	;# 
  3218  0E26                     	;# 
  3219  0E27                     	;# 
  3220  0E28                     	;# 
  3221  0E29                     	;# 
  3222  0E2A                     	;# 
  3223  0E2B                     	;# 
  3224  0E2C                     	;# 
  3225  0E2D                     	;# 
  3226  0E2E                     	;# 
  3227  0E2F                     	;# 
  3228  0E30                     	;# 
  3229  0E31                     	;# 
  3230  0E32                     	;# 
  3231  0E33                     	;# 
  3232  0E34                     	;# 
  3233  0E35                     	;# 
  3234  0E36                     	;# 
  3235  0E37                     	;# 
  3236  0E8F                     	;# 
  3237  0E90                     	;# 
  3238  0E91                     	;# 
  3239  0E92                     	;# 
  3240  0E93                     	;# 
  3241  0E94                     	;# 
  3242  0E95                     	;# 
  3243  0E96                     	;# 
  3244  0E97                     	;# 
  3245  0E9C                     	;# 
  3246  0E9D                     	;# 
  3247  0E9E                     	;# 
  3248  0EA1                     	;# 
  3249  0EA2                     	;# 
  3250  0EA3                     	;# 
  3251  0EA4                     	;# 
  3252  0EA5                     	;# 
  3253  0EA9                     	;# 
  3254  0EAA                     	;# 
  3255  0EAB                     	;# 
  3256  0EAC                     	;# 
  3257  0EB1                     	;# 
  3258  0EB2                     	;# 
  3259  0EB3                     	;# 
  3260  0EB8                     	;# 
  3261  0EB9                     	;# 
  3262  0EBA                     	;# 
  3263  0EBB                     	;# 
  3264  0EBC                     	;# 
  3265  0EBD                     	;# 
  3266  0EBE                     	;# 
  3267  0EC3                     	;# 
  3268  0EC5                     	;# 
  3269  0EC6                     	;# 
  3270  0EC7                     	;# 
  3271  0EC8                     	;# 
  3272  0EC9                     	;# 
  3273  0ECA                     	;# 
  3274  0ECB                     	;# 
  3275  0ECC                     	;# 
  3276  0F10                     	;# 
  3277  0F11                     	;# 
  3278  0F12                     	;# 
  3279  0F13                     	;# 
  3280  0F14                     	;# 
  3281  0F15                     	;# 
  3282  0F16                     	;# 
  3283  0F17                     	;# 
  3284  0F18                     	;# 
  3285  0F19                     	;# 
  3286  0F1A                     	;# 
  3287  0F1B                     	;# 
  3288  0F1C                     	;# 
  3289  0F1D                     	;# 
  3290  0F1E                     	;# 
  3291  0F1F                     	;# 
  3292  0F20                     	;# 
  3293  0F21                     	;# 
  3294  0F22                     	;# 
  3295  0F23                     	;# 
  3296  0F24                     	;# 
  3297  0F25                     	;# 
  3298  0F26                     	;# 
  3299  0F27                     	;# 
  3300  0F28                     	;# 
  3301  0F29                     	;# 
  3302  0F2A                     	;# 
  3303  0F2B                     	;# 
  3304  0F2C                     	;# 
  3305  0F2D                     	;# 
  3306  0F2E                     	;# 
  3307  0F2F                     	;# 
  3308  0F30                     	;# 
  3309  0F31                     	;# 
  3310  0F32                     	;# 
  3311  0F38                     	;# 
  3312  0F39                     	;# 
  3313  0F3A                     	;# 
  3314  0F3B                     	;# 
  3315  0F3C                     	;# 
  3316  0F3D                     	;# 
  3317  0F3E                     	;# 
  3318  0F3F                     	;# 
  3319  0F40                     	;# 
  3320  0F41                     	;# 
  3321  0F43                     	;# 
  3322  0F44                     	;# 
  3323  0F45                     	;# 
  3324  0F46                     	;# 
  3325  0F47                     	;# 
  3326  0F48                     	;# 
  3327  0F49                     	;# 
  3328  0F4A                     	;# 
  3329  0F4B                     	;# 
  3330  0F4C                     	;# 
  3331  0F4E                     	;# 
  3332  0F4F                     	;# 
  3333  0F50                     	;# 
  3334  0F51                     	;# 
  3335  0F52                     	;# 
  3336  0F53                     	;# 
  3337  0F54                     	;# 
  3338  0F55                     	;# 
  3339  0F56                     	;# 
  3340  0F57                     	;# 
  3341  0F59                     	;# 
  3342  0F5A                     	;# 
  3343  0F5B                     	;# 
  3344  0F5C                     	;# 
  3345  0F5D                     	;# 
  3346  0F61                     	;# 
  3347  0F62                     	;# 
  3348  0F64                     	;# 
  3349  0F65                     	;# 
  3350  0F66                     	;# 
  3351  0F67                     	;# 
  3352  0F68                     	;# 
  3353  0F69                     	;# 
  3354  0F6A                     	;# 
  3355  0F6B                     	;# 
  3356  0F6C                     	;# 
  3357  0F6D                     	;# 
  3358  0FE4                     	;# 
  3359  0FE5                     	;# 
  3360  0FE6                     	;# 
  3361  0FE7                     	;# 
  3362  0FE8                     	;# 
  3363  0FE9                     	;# 
  3364  0FEA                     	;# 
  3365  0FEB                     	;# 
  3366  0FED                     	;# 
  3367  0FEE                     	;# 
  3368  0FEF                     	;# 
  3369  0000                     	;# 
  3370  0001                     	;# 
  3371  0002                     	;# 
  3372  0003                     	;# 
  3373  0004                     	;# 
  3374  0005                     	;# 
  3375  0006                     	;# 
  3376  0007                     	;# 
  3377  0008                     	;# 
  3378  0009                     	;# 
  3379  000A                     	;# 
  3380  000B                     	;# 
  3381  000C                     	;# 
  3382  000D                     	;# 
  3383  000E                     	;# 
  3384  000F                     	;# 
  3385  0010                     	;# 
  3386  0011                     	;# 
  3387  0012                     	;# 
  3388  0013                     	;# 
  3389  0014                     	;# 
  3390  0015                     	;# 
  3391  0016                     	;# 
  3392  0017                     	;# 
  3393  0018                     	;# 
  3394  0019                     	;# 
  3395  001A                     	;# 
  3396  001C                     	;# 
  3397  001C                     	;# 
  3398  001D                     	;# 
  3399  001D                     	;# 
  3400  001E                     	;# 
  3401  001F                     	;# 
  3402  008C                     	;# 
  3403  008C                     	;# 
  3404  008D                     	;# 
  3405  008E                     	;# 
  3406  008E                     	;# 
  3407  008F                     	;# 
  3408  0090                     	;# 
  3409  0090                     	;# 
  3410  0091                     	;# 
  3411  0093                     	;# 
  3412  0094                     	;# 
  3413  0095                     	;# 
  3414  0096                     	;# 
  3415  0097                     	;# 
  3416  0098                     	;# 
  3417  0099                     	;# 
  3418  009A                     	;# 
  3419  009B                     	;# 
  3420  009C                     	;# 
  3421  009D                     	;# 
  3422  009E                     	;# 
  3423  010C                     	;# 
  3424  010D                     	;# 
  3425  010E                     	;# 
  3426  010E                     	;# 
  3427  010F                     	;# 
  3428  0110                     	;# 
  3429  0110                     	;# 
  3430  0111                     	;# 
  3431  0112                     	;# 
  3432  0112                     	;# 
  3433  0113                     	;# 
  3434  0114                     	;# 
  3435  0114                     	;# 
  3436  0115                     	;# 
  3437  0116                     	;# 
  3438  0116                     	;# 
  3439  0117                     	;# 
  3440  0119                     	;# 
  3441  0119                     	;# 
  3442  0119                     	;# 
  3443  011A                     	;# 
  3444  011A                     	;# 
  3445  011A                     	;# 
  3446  011B                     	;# 
  3447  011B                     	;# 
  3448  011B                     	;# 
  3449  011B                     	;# 
  3450  011B                     	;# 
  3451  011C                     	;# 
  3452  011C                     	;# 
  3453  011C                     	;# 
  3454  011D                     	;# 
  3455  011D                     	;# 
  3456  011D                     	;# 
  3457  011E                     	;# 
  3458  011E                     	;# 
  3459  011E                     	;# 
  3460  011F                     	;# 
  3461  011F                     	;# 
  3462  011F                     	;# 
  3463  011F                     	;# 
  3464  011F                     	;# 
  3465  018C                     	;# 
  3466  018D                     	;# 
  3467  018E                     	;# 
  3468  018F                     	;# 
  3469  0190                     	;# 
  3470  0191                     	;# 
  3471  0192                     	;# 
  3472  0196                     	;# 
  3473  0197                     	;# 
  3474  0198                     	;# 
  3475  0199                     	;# 
  3476  019A                     	;# 
  3477  019B                     	;# 
  3478  019C                     	;# 
  3479  020C                     	;# 
  3480  020C                     	;# 
  3481  020D                     	;# 
  3482  020E                     	;# 
  3483  020F                     	;# 
  3484  020F                     	;# 
  3485  0210                     	;# 
  3486  0210                     	;# 
  3487  0211                     	;# 
  3488  0211                     	;# 
  3489  0212                     	;# 
  3490  0212                     	;# 
  3491  0213                     	;# 
  3492  0214                     	;# 
  3493  0215                     	;# 
  3494  0215                     	;# 
  3495  0216                     	;# 
  3496  0216                     	;# 
  3497  0217                     	;# 
  3498  0217                     	;# 
  3499  0218                     	;# 
  3500  0218                     	;# 
  3501  0219                     	;# 
  3502  021A                     	;# 
  3503  021B                     	;# 
  3504  021B                     	;# 
  3505  021C                     	;# 
  3506  021C                     	;# 
  3507  021D                     	;# 
  3508  021D                     	;# 
  3509  021E                     	;# 
  3510  021F                     	;# 
  3511  028C                     	;# 
  3512  028C                     	;# 
  3513  028D                     	;# 
  3514  028D                     	;# 
  3515  028E                     	;# 
  3516  028F                     	;# 
  3517  0290                     	;# 
  3518  0290                     	;# 
  3519  0291                     	;# 
  3520  0292                     	;# 
  3521  0292                     	;# 
  3522  0293                     	;# 
  3523  0293                     	;# 
  3524  0294                     	;# 
  3525  0295                     	;# 
  3526  0296                     	;# 
  3527  0296                     	;# 
  3528  0297                     	;# 
  3529  0298                     	;# 
  3530  0298                     	;# 
  3531  0299                     	;# 
  3532  0299                     	;# 
  3533  029A                     	;# 
  3534  029B                     	;# 
  3535  029C                     	;# 
  3536  029C                     	;# 
  3537  029D                     	;# 
  3538  030C                     	;# 
  3539  030C                     	;# 
  3540  030D                     	;# 
  3541  030E                     	;# 
  3542  030F                     	;# 
  3543  0310                     	;# 
  3544  0310                     	;# 
  3545  0311                     	;# 
  3546  0312                     	;# 
  3547  0313                     	;# 
  3548  0314                     	;# 
  3549  0314                     	;# 
  3550  0315                     	;# 
  3551  0316                     	;# 
  3552  0317                     	;# 
  3553  0318                     	;# 
  3554  0318                     	;# 
  3555  0319                     	;# 
  3556  031A                     	;# 
  3557  031B                     	;# 
  3558  031C                     	;# 
  3559  031C                     	;# 
  3560  031D                     	;# 
  3561  031E                     	;# 
  3562  031F                     	;# 
  3563  038C                     	;# 
  3564  038D                     	;# 
  3565  038E                     	;# 
  3566  0390                     	;# 
  3567  0391                     	;# 
  3568  0392                     	;# 
  3569  040C                     	;# 
  3570  040D                     	;# 
  3571  040E                     	;# 
  3572  040F                     	;# 
  3573  0410                     	;# 
  3574  0411                     	;# 
  3575  0416                     	;# 
  3576  0416                     	;# 
  3577  0417                     	;# 
  3578  0418                     	;# 
  3579  0418                     	;# 
  3580  0419                     	;# 
  3581  041A                     	;# 
  3582  041A                     	;# 
  3583  041B                     	;# 
  3584  041C                     	;# 
  3585  041C                     	;# 
  3586  041D                     	;# 
  3587  041E                     	;# 
  3588  041F                     	;# 
  3589  048C                     	;# 
  3590  048C                     	;# 
  3591  048D                     	;# 
  3592  048E                     	;# 
  3593  048F                     	;# 
  3594  048F                     	;# 
  3595  0490                     	;# 
  3596  0491                     	;# 
  3597  0492                     	;# 
  3598  0492                     	;# 
  3599  0493                     	;# 
  3600  0494                     	;# 
  3601  0495                     	;# 
  3602  0495                     	;# 
  3603  0496                     	;# 
  3604  0497                     	;# 
  3605  0498                     	;# 
  3606  0499                     	;# 
  3607  049A                     	;# 
  3608  049B                     	;# 
  3609  049C                     	;# 
  3610  049D                     	;# 
  3611  050C                     	;# 
  3612  050C                     	;# 
  3613  050D                     	;# 
  3614  050E                     	;# 
  3615  050F                     	;# 
  3616  050F                     	;# 
  3617  0510                     	;# 
  3618  0511                     	;# 
  3619  0512                     	;# 
  3620  0512                     	;# 
  3621  0513                     	;# 
  3622  0514                     	;# 
  3623  0515                     	;# 
  3624  0515                     	;# 
  3625  0516                     	;# 
  3626  0517                     	;# 
  3627  0518                     	;# 
  3628  0519                     	;# 
  3629  051A                     	;# 
  3630  051B                     	;# 
  3631  051C                     	;# 
  3632  051D                     	;# 
  3633  058C                     	;# 
  3634  058C                     	;# 
  3635  058D                     	;# 
  3636  058E                     	;# 
  3637  058F                     	;# 
  3638  058F                     	;# 
  3639  0590                     	;# 
  3640  0591                     	;# 
  3641  0592                     	;# 
  3642  0593                     	;# 
  3643  060C                     	;# 
  3644  060D                     	;# 
  3645  060E                     	;# 
  3646  060F                     	;# 
  3647  0610                     	;# 
  3648  0611                     	;# 
  3649  0612                     	;# 
  3650  0613                     	;# 
  3651  0614                     	;# 
  3652  0616                     	;# 
  3653  0617                     	;# 
  3654  0618                     	;# 
  3655  0619                     	;# 
  3656  061A                     	;# 
  3657  061B                     	;# 
  3658  061C                     	;# 
  3659  061D                     	;# 
  3660  061E                     	;# 
  3661  068C                     	;# 
  3662  068D                     	;# 
  3663  068E                     	;# 
  3664  068F                     	;# 
  3665  0690                     	;# 
  3666  0691                     	;# 
  3667  0692                     	;# 
  3668  0693                     	;# 
  3669  0694                     	;# 
  3670  070C                     	;# 
  3671  070D                     	;# 
  3672  070E                     	;# 
  3673  070F                     	;# 
  3674  0710                     	;# 
  3675  0711                     	;# 
  3676  0712                     	;# 
  3677  0713                     	;# 
  3678  0714                     	;# 
  3679  0716                     	;# 
  3680  0717                     	;# 
  3681  0718                     	;# 
  3682  0719                     	;# 
  3683  071A                     	;# 
  3684  071B                     	;# 
  3685  071C                     	;# 
  3686  071D                     	;# 
  3687  071E                     	;# 
  3688  0796                     	;# 
  3689  0797                     	;# 
  3690  0798                     	;# 
  3691  0799                     	;# 
  3692  079A                     	;# 
  3693  079B                     	;# 
  3694  080C                     	;# 
  3695  080D                     	;# 
  3696  080E                     	;# 
  3697  080F                     	;# 
  3698  0810                     	;# 
  3699  0811                     	;# 
  3700  0812                     	;# 
  3701  0813                     	;# 
  3702  0814                     	;# 
  3703  081A                     	;# 
  3704  081B                     	;# 
  3705  081C                     	;# 
  3706  081D                     	;# 
  3707  081E                     	;# 
  3708  081F                     	;# 
  3709  088C                     	;# 
  3710  088D                     	;# 
  3711  088E                     	;# 
  3712  088F                     	;# 
  3713  0890                     	;# 
  3714  0891                     	;# 
  3715  0892                     	;# 
  3716  0893                     	;# 
  3717  0895                     	;# 
  3718  0896                     	;# 
  3719  0897                     	;# 
  3720  0898                     	;# 
  3721  0899                     	;# 
  3722  089A                     	;# 
  3723  089B                     	;# 
  3724  090C                     	;# 
  3725  090E                     	;# 
  3726  090F                     	;# 
  3727  091F                     	;# 
  3728  091F                     	;# 
  3729  098F                     	;# 
  3730  098F                     	;# 
  3731  0990                     	;# 
  3732  0991                     	;# 
  3733  0992                     	;# 
  3734  0993                     	;# 
  3735  0994                     	;# 
  3736  0995                     	;# 
  3737  0996                     	;# 
  3738  0997                     	;# 
  3739  0E0F                     	;# 
  3740  0E10                     	;# 
  3741  0E11                     	;# 
  3742  0E12                     	;# 
  3743  0E13                     	;# 
  3744  0E14                     	;# 
  3745  0E15                     	;# 
  3746  0E16                     	;# 
  3747  0E17                     	;# 
  3748  0E18                     	;# 
  3749  0E19                     	;# 
  3750  0E1A                     	;# 
  3751  0E1B                     	;# 
  3752  0E1C                     	;# 
  3753  0E1D                     	;# 
  3754  0E1E                     	;# 
  3755  0E1F                     	;# 
  3756  0E20                     	;# 
  3757  0E21                     	;# 
  3758  0E22                     	;# 
  3759  0E23                     	;# 
  3760  0E24                     	;# 
  3761  0E25                     	;# 
  3762  0E26                     	;# 
  3763  0E27                     	;# 
  3764  0E28                     	;# 
  3765  0E29                     	;# 
  3766  0E2A                     	;# 
  3767  0E2B                     	;# 
  3768  0E2C                     	;# 
  3769  0E2D                     	;# 
  3770  0E2E                     	;# 
  3771  0E2F                     	;# 
  3772  0E30                     	;# 
  3773  0E31                     	;# 
  3774  0E32                     	;# 
  3775  0E33                     	;# 
  3776  0E34                     	;# 
  3777  0E35                     	;# 
  3778  0E36                     	;# 
  3779  0E37                     	;# 
  3780  0E8F                     	;# 
  3781  0E90                     	;# 
  3782  0E91                     	;# 
  3783  0E92                     	;# 
  3784  0E93                     	;# 
  3785  0E94                     	;# 
  3786  0E95                     	;# 
  3787  0E96                     	;# 
  3788  0E97                     	;# 
  3789  0E9C                     	;# 
  3790  0E9D                     	;# 
  3791  0E9E                     	;# 
  3792  0EA1                     	;# 
  3793  0EA2                     	;# 
  3794  0EA3                     	;# 
  3795  0EA4                     	;# 
  3796  0EA5                     	;# 
  3797  0EA9                     	;# 
  3798  0EAA                     	;# 
  3799  0EAB                     	;# 
  3800  0EAC                     	;# 
  3801  0EB1                     	;# 
  3802  0EB2                     	;# 
  3803  0EB3                     	;# 
  3804  0EB8                     	;# 
  3805  0EB9                     	;# 
  3806  0EBA                     	;# 
  3807  0EBB                     	;# 
  3808  0EBC                     	;# 
  3809  0EBD                     	;# 
  3810  0EBE                     	;# 
  3811  0EC3                     	;# 
  3812  0EC5                     	;# 
  3813  0EC6                     	;# 
  3814  0EC7                     	;# 
  3815  0EC8                     	;# 
  3816  0EC9                     	;# 
  3817  0ECA                     	;# 
  3818  0ECB                     	;# 
  3819  0ECC                     	;# 
  3820  0F10                     	;# 
  3821  0F11                     	;# 
  3822  0F12                     	;# 
  3823  0F13                     	;# 
  3824  0F14                     	;# 
  3825  0F15                     	;# 
  3826  0F16                     	;# 
  3827  0F17                     	;# 
  3828  0F18                     	;# 
  3829  0F19                     	;# 
  3830  0F1A                     	;# 
  3831  0F1B                     	;# 
  3832  0F1C                     	;# 
  3833  0F1D                     	;# 
  3834  0F1E                     	;# 
  3835  0F1F                     	;# 
  3836  0F20                     	;# 
  3837  0F21                     	;# 
  3838  0F22                     	;# 
  3839  0F23                     	;# 
  3840  0F24                     	;# 
  3841  0F25                     	;# 
  3842  0F26                     	;# 
  3843  0F27                     	;# 
  3844  0F28                     	;# 
  3845  0F29                     	;# 
  3846  0F2A                     	;# 
  3847  0F2B                     	;# 
  3848  0F2C                     	;# 
  3849  0F2D                     	;# 
  3850  0F2E                     	;# 
  3851  0F2F                     	;# 
  3852  0F30                     	;# 
  3853  0F31                     	;# 
  3854  0F32                     	;# 
  3855  0F38                     	;# 
  3856  0F39                     	;# 
  3857  0F3A                     	;# 
  3858  0F3B                     	;# 
  3859  0F3C                     	;# 
  3860  0F3D                     	;# 
  3861  0F3E                     	;# 
  3862  0F3F                     	;# 
  3863  0F40                     	;# 
  3864  0F41                     	;# 
  3865  0F43                     	;# 
  3866  0F44                     	;# 
  3867  0F45                     	;# 
  3868  0F46                     	;# 
  3869  0F47                     	;# 
  3870  0F48                     	;# 
  3871  0F49                     	;# 
  3872  0F4A                     	;# 
  3873  0F4B                     	;# 
  3874  0F4C                     	;# 
  3875  0F4E                     	;# 
  3876  0F4F                     	;# 
  3877  0F50                     	;# 
  3878  0F51                     	;# 
  3879  0F52                     	;# 
  3880  0F53                     	;# 
  3881  0F54                     	;# 
  3882  0F55                     	;# 
  3883  0F56                     	;# 
  3884  0F57                     	;# 
  3885  0F59                     	;# 
  3886  0F5A                     	;# 
  3887  0F5B                     	;# 
  3888  0F5C                     	;# 
  3889  0F5D                     	;# 
  3890  0F61                     	;# 
  3891  0F62                     	;# 
  3892  0F64                     	;# 
  3893  0F65                     	;# 
  3894  0F66                     	;# 
  3895  0F67                     	;# 
  3896  0F68                     	;# 
  3897  0F69                     	;# 
  3898  0F6A                     	;# 
  3899  0F6B                     	;# 
  3900  0F6C                     	;# 
  3901  0F6D                     	;# 
  3902  0FE4                     	;# 
  3903  0FE5                     	;# 
  3904  0FE6                     	;# 
  3905  0FE7                     	;# 
  3906  0FE8                     	;# 
  3907  0FE9                     	;# 
  3908  0FEA                     	;# 
  3909  0FEB                     	;# 
  3910  0FED                     	;# 
  3911  0FEE                     	;# 
  3912  0FEF                     	;# 
  3913  0000                     	;# 
  3914  0001                     	;# 
  3915  0002                     	;# 
  3916  0003                     	;# 
  3917  0004                     	;# 
  3918  0005                     	;# 
  3919  0006                     	;# 
  3920  0007                     	;# 
  3921  0008                     	;# 
  3922  0009                     	;# 
  3923  000A                     	;# 
  3924  000B                     	;# 
  3925  000C                     	;# 
  3926  000D                     	;# 
  3927  000E                     	;# 
  3928  000F                     	;# 
  3929  0010                     	;# 
  3930  0011                     	;# 
  3931  0012                     	;# 
  3932  0013                     	;# 
  3933  0014                     	;# 
  3934  0015                     	;# 
  3935  0016                     	;# 
  3936  0017                     	;# 
  3937  0018                     	;# 
  3938  0019                     	;# 
  3939  001A                     	;# 
  3940  001C                     	;# 
  3941  001C                     	;# 
  3942  001D                     	;# 
  3943  001D                     	;# 
  3944  001E                     	;# 
  3945  001F                     	;# 
  3946  008C                     	;# 
  3947  008C                     	;# 
  3948  008D                     	;# 
  3949  008E                     	;# 
  3950  008E                     	;# 
  3951  008F                     	;# 
  3952  0090                     	;# 
  3953  0090                     	;# 
  3954  0091                     	;# 
  3955  0093                     	;# 
  3956  0094                     	;# 
  3957  0095                     	;# 
  3958  0096                     	;# 
  3959  0097                     	;# 
  3960  0098                     	;# 
  3961  0099                     	;# 
  3962  009A                     	;# 
  3963  009B                     	;# 
  3964  009C                     	;# 
  3965  009D                     	;# 
  3966  009E                     	;# 
  3967  010C                     	;# 
  3968  010D                     	;# 
  3969  010E                     	;# 
  3970  010E                     	;# 
  3971  010F                     	;# 
  3972  0110                     	;# 
  3973  0110                     	;# 
  3974  0111                     	;# 
  3975  0112                     	;# 
  3976  0112                     	;# 
  3977  0113                     	;# 
  3978  0114                     	;# 
  3979  0114                     	;# 
  3980  0115                     	;# 
  3981  0116                     	;# 
  3982  0116                     	;# 
  3983  0117                     	;# 
  3984  0119                     	;# 
  3985  0119                     	;# 
  3986  0119                     	;# 
  3987  011A                     	;# 
  3988  011A                     	;# 
  3989  011A                     	;# 
  3990  011B                     	;# 
  3991  011B                     	;# 
  3992  011B                     	;# 
  3993  011B                     	;# 
  3994  011B                     	;# 
  3995  011C                     	;# 
  3996  011C                     	;# 
  3997  011C                     	;# 
  3998  011D                     	;# 
  3999  011D                     	;# 
  4000  011D                     	;# 
  4001  011E                     	;# 
  4002  011E                     	;# 
  4003  011E                     	;# 
  4004  011F                     	;# 
  4005  011F                     	;# 
  4006  011F                     	;# 
  4007  011F                     	;# 
  4008  011F                     	;# 
  4009  018C                     	;# 
  4010  018D                     	;# 
  4011  018E                     	;# 
  4012  018F                     	;# 
  4013  0190                     	;# 
  4014  0191                     	;# 
  4015  0192                     	;# 
  4016  0196                     	;# 
  4017  0197                     	;# 
  4018  0198                     	;# 
  4019  0199                     	;# 
  4020  019A                     	;# 
  4021  019B                     	;# 
  4022  019C                     	;# 
  4023  020C                     	;# 
  4024  020C                     	;# 
  4025  020D                     	;# 
  4026  020E                     	;# 
  4027  020F                     	;# 
  4028  020F                     	;# 
  4029  0210                     	;# 
  4030  0210                     	;# 
  4031  0211                     	;# 
  4032  0211                     	;# 
  4033  0212                     	;# 
  4034  0212                     	;# 
  4035  0213                     	;# 
  4036  0214                     	;# 
  4037  0215                     	;# 
  4038  0215                     	;# 
  4039  0216                     	;# 
  4040  0216                     	;# 
  4041  0217                     	;# 
  4042  0217                     	;# 
  4043  0218                     	;# 
  4044  0218                     	;# 
  4045  0219                     	;# 
  4046  021A                     	;# 
  4047  021B                     	;# 
  4048  021B                     	;# 
  4049  021C                     	;# 
  4050  021C                     	;# 
  4051  021D                     	;# 
  4052  021D                     	;# 
  4053  021E                     	;# 
  4054  021F                     	;# 
  4055  028C                     	;# 
  4056  028C                     	;# 
  4057  028D                     	;# 
  4058  028D                     	;# 
  4059  028E                     	;# 
  4060  028F                     	;# 
  4061  0290                     	;# 
  4062  0290                     	;# 
  4063  0291                     	;# 
  4064  0292                     	;# 
  4065  0292                     	;# 
  4066  0293                     	;# 
  4067  0293                     	;# 
  4068  0294                     	;# 
  4069  0295                     	;# 
  4070  0296                     	;# 
  4071  0296                     	;# 
  4072  0297                     	;# 
  4073  0298                     	;# 
  4074  0298                     	;# 
  4075  0299                     	;# 
  4076  0299                     	;# 
  4077  029A                     	;# 
  4078  029B                     	;# 
  4079  029C                     	;# 
  4080  029C                     	;# 
  4081  029D                     	;# 
  4082  030C                     	;# 
  4083  030C                     	;# 
  4084  030D                     	;# 
  4085  030E                     	;# 
  4086  030F                     	;# 
  4087  0310                     	;# 
  4088  0310                     	;# 
  4089  0311                     	;# 
  4090  0312                     	;# 
  4091  0313                     	;# 
  4092  0314                     	;# 
  4093  0314                     	;# 
  4094  0315                     	;# 
  4095  0316                     	;# 
  4096  0317                     	;# 
  4097  0318                     	;# 
  4098  0318                     	;# 
  4099  0319                     	;# 
  4100  031A                     	;# 
  4101  031B                     	;# 
  4102  031C                     	;# 
  4103  031C                     	;# 
  4104  031D                     	;# 
  4105  031E                     	;# 
  4106  031F                     	;# 
  4107  038C                     	;# 
  4108  038D                     	;# 
  4109  038E                     	;# 
  4110  0390                     	;# 
  4111  0391                     	;# 
  4112  0392                     	;# 
  4113  040C                     	;# 
  4114  040D                     	;# 
  4115  040E                     	;# 
  4116  040F                     	;# 
  4117  0410                     	;# 
  4118  0411                     	;# 
  4119  0416                     	;# 
  4120  0416                     	;# 
  4121  0417                     	;# 
  4122  0418                     	;# 
  4123  0418                     	;# 
  4124  0419                     	;# 
  4125  041A                     	;# 
  4126  041A                     	;# 
  4127  041B                     	;# 
  4128  041C                     	;# 
  4129  041C                     	;# 
  4130  041D                     	;# 
  4131  041E                     	;# 
  4132  041F                     	;# 
  4133  048C                     	;# 
  4134  048C                     	;# 
  4135  048D                     	;# 
  4136  048E                     	;# 
  4137  048F                     	;# 
  4138  048F                     	;# 
  4139  0490                     	;# 
  4140  0491                     	;# 
  4141  0492                     	;# 
  4142  0492                     	;# 
  4143  0493                     	;# 
  4144  0494                     	;# 
  4145  0495                     	;# 
  4146  0495                     	;# 
  4147  0496                     	;# 
  4148  0497                     	;# 
  4149  0498                     	;# 
  4150  0499                     	;# 
  4151  049A                     	;# 
  4152  049B                     	;# 
  4153  049C                     	;# 
  4154  049D                     	;# 
  4155  050C                     	;# 
  4156  050C                     	;# 
  4157  050D                     	;# 
  4158  050E                     	;# 
  4159  050F                     	;# 
  4160  050F                     	;# 
  4161  0510                     	;# 
  4162  0511                     	;# 
  4163  0512                     	;# 
  4164  0512                     	;# 
  4165  0513                     	;# 
  4166  0514                     	;# 
  4167  0515                     	;# 
  4168  0515                     	;# 
  4169  0516                     	;# 
  4170  0517                     	;# 
  4171  0518                     	;# 
  4172  0519                     	;# 
  4173  051A                     	;# 
  4174  051B                     	;# 
  4175  051C                     	;# 
  4176  051D                     	;# 
  4177  058C                     	;# 
  4178  058C                     	;# 
  4179  058D                     	;# 
  4180  058E                     	;# 
  4181  058F                     	;# 
  4182  058F                     	;# 
  4183  0590                     	;# 
  4184  0591                     	;# 
  4185  0592                     	;# 
  4186  0593                     	;# 
  4187  060C                     	;# 
  4188  060D                     	;# 
  4189  060E                     	;# 
  4190  060F                     	;# 
  4191  0610                     	;# 
  4192  0611                     	;# 
  4193  0612                     	;# 
  4194  0613                     	;# 
  4195  0614                     	;# 
  4196  0616                     	;# 
  4197  0617                     	;# 
  4198  0618                     	;# 
  4199  0619                     	;# 
  4200  061A                     	;# 
  4201  061B                     	;# 
  4202  061C                     	;# 
  4203  061D                     	;# 
  4204  061E                     	;# 
  4205  068C                     	;# 
  4206  068D                     	;# 
  4207  068E                     	;# 
  4208  068F                     	;# 
  4209  0690                     	;# 
  4210  0691                     	;# 
  4211  0692                     	;# 
  4212  0693                     	;# 
  4213  0694                     	;# 
  4214  070C                     	;# 
  4215  070D                     	;# 
  4216  070E                     	;# 
  4217  070F                     	;# 
  4218  0710                     	;# 
  4219  0711                     	;# 
  4220  0712                     	;# 
  4221  0713                     	;# 
  4222  0714                     	;# 
  4223  0716                     	;# 
  4224  0717                     	;# 
  4225  0718                     	;# 
  4226  0719                     	;# 
  4227  071A                     	;# 
  4228  071B                     	;# 
  4229  071C                     	;# 
  4230  071D                     	;# 
  4231  071E                     	;# 
  4232  0796                     	;# 
  4233  0797                     	;# 
  4234  0798                     	;# 
  4235  0799                     	;# 
  4236  079A                     	;# 
  4237  079B                     	;# 
  4238  080C                     	;# 
  4239  080D                     	;# 
  4240  080E                     	;# 
  4241  080F                     	;# 
  4242  0810                     	;# 
  4243  0811                     	;# 
  4244  0812                     	;# 
  4245  0813                     	;# 
  4246  0814                     	;# 
  4247  081A                     	;# 
  4248  081B                     	;# 
  4249  081C                     	;# 
  4250  081D                     	;# 
  4251  081E                     	;# 
  4252  081F                     	;# 
  4253  088C                     	;# 
  4254  088D                     	;# 
  4255  088E                     	;# 
  4256  088F                     	;# 
  4257  0890                     	;# 
  4258  0891                     	;# 
  4259  0892                     	;# 
  4260  0893                     	;# 
  4261  0895                     	;# 
  4262  0896                     	;# 
  4263  0897                     	;# 
  4264  0898                     	;# 
  4265  0899                     	;# 
  4266  089A                     	;# 
  4267  089B                     	;# 
  4268  090C                     	;# 
  4269  090E                     	;# 
  4270  090F                     	;# 
  4271  091F                     	;# 
  4272  091F                     	;# 
  4273  098F                     	;# 
  4274  098F                     	;# 
  4275  0990                     	;# 
  4276  0991                     	;# 
  4277  0992                     	;# 
  4278  0993                     	;# 
  4279  0994                     	;# 
  4280  0995                     	;# 
  4281  0996                     	;# 
  4282  0997                     	;# 
  4283  0E0F                     	;# 
  4284  0E10                     	;# 
  4285  0E11                     	;# 
  4286  0E12                     	;# 
  4287  0E13                     	;# 
  4288  0E14                     	;# 
  4289  0E15                     	;# 
  4290  0E16                     	;# 
  4291  0E17                     	;# 
  4292  0E18                     	;# 
  4293  0E19                     	;# 
  4294  0E1A                     	;# 
  4295  0E1B                     	;# 
  4296  0E1C                     	;# 
  4297  0E1D                     	;# 
  4298  0E1E                     	;# 
  4299  0E1F                     	;# 
  4300  0E20                     	;# 
  4301  0E21                     	;# 
  4302  0E22                     	;# 
  4303  0E23                     	;# 
  4304  0E24                     	;# 
  4305  0E25                     	;# 
  4306  0E26                     	;# 
  4307  0E27                     	;# 
  4308  0E28                     	;# 
  4309  0E29                     	;# 
  4310  0E2A                     	;# 
  4311  0E2B                     	;# 
  4312  0E2C                     	;# 
  4313  0E2D                     	;# 
  4314  0E2E                     	;# 
  4315  0E2F                     	;# 
  4316  0E30                     	;# 
  4317  0E31                     	;# 
  4318  0E32                     	;# 
  4319  0E33                     	;# 
  4320  0E34                     	;# 
  4321  0E35                     	;# 
  4322  0E36                     	;# 
  4323  0E37                     	;# 
  4324  0E8F                     	;# 
  4325  0E90                     	;# 
  4326  0E91                     	;# 
  4327  0E92                     	;# 
  4328  0E93                     	;# 
  4329  0E94                     	;# 
  4330  0E95                     	;# 
  4331  0E96                     	;# 
  4332  0E97                     	;# 
  4333  0E9C                     	;# 
  4334  0E9D                     	;# 
  4335  0E9E                     	;# 
  4336  0EA1                     	;# 
  4337  0EA2                     	;# 
  4338  0EA3                     	;# 
  4339  0EA4                     	;# 
  4340  0EA5                     	;# 
  4341  0EA9                     	;# 
  4342  0EAA                     	;# 
  4343  0EAB                     	;# 
  4344  0EAC                     	;# 
  4345  0EB1                     	;# 
  4346  0EB2                     	;# 
  4347  0EB3                     	;# 
  4348  0EB8                     	;# 
  4349  0EB9                     	;# 
  4350  0EBA                     	;# 
  4351  0EBB                     	;# 
  4352  0EBC                     	;# 
  4353  0EBD                     	;# 
  4354  0EBE                     	;# 
  4355  0EC3                     	;# 
  4356  0EC5                     	;# 
  4357  0EC6                     	;# 
  4358  0EC7                     	;# 
  4359  0EC8                     	;# 
  4360  0EC9                     	;# 
  4361  0ECA                     	;# 
  4362  0ECB                     	;# 
  4363  0ECC                     	;# 
  4364  0F10                     	;# 
  4365  0F11                     	;# 
  4366  0F12                     	;# 
  4367  0F13                     	;# 
  4368  0F14                     	;# 
  4369  0F15                     	;# 
  4370  0F16                     	;# 
  4371  0F17                     	;# 
  4372  0F18                     	;# 
  4373  0F19                     	;# 
  4374  0F1A                     	;# 
  4375  0F1B                     	;# 
  4376  0F1C                     	;# 
  4377  0F1D                     	;# 
  4378  0F1E                     	;# 
  4379  0F1F                     	;# 
  4380  0F20                     	;# 
  4381  0F21                     	;# 
  4382  0F22                     	;# 
  4383  0F23                     	;# 
  4384  0F24                     	;# 
  4385  0F25                     	;# 
  4386  0F26                     	;# 
  4387  0F27                     	;# 
  4388  0F28                     	;# 
  4389  0F29                     	;# 
  4390  0F2A                     	;# 
  4391  0F2B                     	;# 
  4392  0F2C                     	;# 
  4393  0F2D                     	;# 
  4394  0F2E                     	;# 
  4395  0F2F                     	;# 
  4396  0F30                     	;# 
  4397  0F31                     	;# 
  4398  0F32                     	;# 
  4399  0F38                     	;# 
  4400  0F39                     	;# 
  4401  0F3A                     	;# 
  4402  0F3B                     	;# 
  4403  0F3C                     	;# 
  4404  0F3D                     	;# 
  4405  0F3E                     	;# 
  4406  0F3F                     	;# 
  4407  0F40                     	;# 
  4408  0F41                     	;# 
  4409  0F43                     	;# 
  4410  0F44                     	;# 
  4411  0F45                     	;# 
  4412  0F46                     	;# 
  4413  0F47                     	;# 
  4414  0F48                     	;# 
  4415  0F49                     	;# 
  4416  0F4A                     	;# 
  4417  0F4B                     	;# 
  4418  0F4C                     	;# 
  4419  0F4E                     	;# 
  4420  0F4F                     	;# 
  4421  0F50                     	;# 
  4422  0F51                     	;# 
  4423  0F52                     	;# 
  4424  0F53                     	;# 
  4425  0F54                     	;# 
  4426  0F55                     	;# 
  4427  0F56                     	;# 
  4428  0F57                     	;# 
  4429  0F59                     	;# 
  4430  0F5A                     	;# 
  4431  0F5B                     	;# 
  4432  0F5C                     	;# 
  4433  0F5D                     	;# 
  4434  0F61                     	;# 
  4435  0F62                     	;# 
  4436  0F64                     	;# 
  4437  0F65                     	;# 
  4438  0F66                     	;# 
  4439  0F67                     	;# 
  4440  0F68                     	;# 
  4441  0F69                     	;# 
  4442  0F6A                     	;# 
  4443  0F6B                     	;# 
  4444  0F6C                     	;# 
  4445  0F6D                     	;# 
  4446  0FE4                     	;# 
  4447  0FE5                     	;# 
  4448  0FE6                     	;# 
  4449  0FE7                     	;# 
  4450  0FE8                     	;# 
  4451  0FE9                     	;# 
  4452  0FEA                     	;# 
  4453  0FEB                     	;# 
  4454  0FED                     	;# 
  4455  0FEE                     	;# 
  4456  0FEF                     	;# 
  4457  0000                     	;# 
  4458  0001                     	;# 
  4459  0002                     	;# 
  4460  0003                     	;# 
  4461  0004                     	;# 
  4462  0005                     	;# 
  4463  0006                     	;# 
  4464  0007                     	;# 
  4465  0008                     	;# 
  4466  0009                     	;# 
  4467  000A                     	;# 
  4468  000B                     	;# 
  4469  000C                     	;# 
  4470  000D                     	;# 
  4471  000E                     	;# 
  4472  000F                     	;# 
  4473  0010                     	;# 
  4474  0011                     	;# 
  4475  0012                     	;# 
  4476  0013                     	;# 
  4477  0014                     	;# 
  4478  0015                     	;# 
  4479  0016                     	;# 
  4480  0017                     	;# 
  4481  0018                     	;# 
  4482  0019                     	;# 
  4483  001A                     	;# 
  4484  001C                     	;# 
  4485  001C                     	;# 
  4486  001D                     	;# 
  4487  001D                     	;# 
  4488  001E                     	;# 
  4489  001F                     	;# 
  4490  008C                     	;# 
  4491  008C                     	;# 
  4492  008D                     	;# 
  4493  008E                     	;# 
  4494  008E                     	;# 
  4495  008F                     	;# 
  4496  0090                     	;# 
  4497  0090                     	;# 
  4498  0091                     	;# 
  4499  0093                     	;# 
  4500  0094                     	;# 
  4501  0095                     	;# 
  4502  0096                     	;# 
  4503  0097                     	;# 
  4504  0098                     	;# 
  4505  0099                     	;# 
  4506  009A                     	;# 
  4507  009B                     	;# 
  4508  009C                     	;# 
  4509  009D                     	;# 
  4510  009E                     	;# 
  4511  010C                     	;# 
  4512  010D                     	;# 
  4513  010E                     	;# 
  4514  010E                     	;# 
  4515  010F                     	;# 
  4516  0110                     	;# 
  4517  0110                     	;# 
  4518  0111                     	;# 
  4519  0112                     	;# 
  4520  0112                     	;# 
  4521  0113                     	;# 
  4522  0114                     	;# 
  4523  0114                     	;# 
  4524  0115                     	;# 
  4525  0116                     	;# 
  4526  0116                     	;# 
  4527  0117                     	;# 
  4528  0119                     	;# 
  4529  0119                     	;# 
  4530  0119                     	;# 
  4531  011A                     	;# 
  4532  011A                     	;# 
  4533  011A                     	;# 
  4534  011B                     	;# 
  4535  011B                     	;# 
  4536  011B                     	;# 
  4537  011B                     	;# 
  4538  011B                     	;# 
  4539  011C                     	;# 
  4540  011C                     	;# 
  4541  011C                     	;# 
  4542  011D                     	;# 
  4543  011D                     	;# 
  4544  011D                     	;# 
  4545  011E                     	;# 
  4546  011E                     	;# 
  4547  011E                     	;# 
  4548  011F                     	;# 
  4549  011F                     	;# 
  4550  011F                     	;# 
  4551  011F                     	;# 
  4552  011F                     	;# 
  4553  018C                     	;# 
  4554  018D                     	;# 
  4555  018E                     	;# 
  4556  018F                     	;# 
  4557  0190                     	;# 
  4558  0191                     	;# 
  4559  0192                     	;# 
  4560  0196                     	;# 
  4561  0197                     	;# 
  4562  0198                     	;# 
  4563  0199                     	;# 
  4564  019A                     	;# 
  4565  019B                     	;# 
  4566  019C                     	;# 
  4567  020C                     	;# 
  4568  020C                     	;# 
  4569  020D                     	;# 
  4570  020E                     	;# 
  4571  020F                     	;# 
  4572  020F                     	;# 
  4573  0210                     	;# 
  4574  0210                     	;# 
  4575  0211                     	;# 
  4576  0211                     	;# 
  4577  0212                     	;# 
  4578  0212                     	;# 
  4579  0213                     	;# 
  4580  0214                     	;# 
  4581  0215                     	;# 
  4582  0215                     	;# 
  4583  0216                     	;# 
  4584  0216                     	;# 
  4585  0217                     	;# 
  4586  0217                     	;# 
  4587  0218                     	;# 
  4588  0218                     	;# 
  4589  0219                     	;# 
  4590  021A                     	;# 
  4591  021B                     	;# 
  4592  021B                     	;# 
  4593  021C                     	;# 
  4594  021C                     	;# 
  4595  021D                     	;# 
  4596  021D                     	;# 
  4597  021E                     	;# 
  4598  021F                     	;# 
  4599  028C                     	;# 
  4600  028C                     	;# 
  4601  028D                     	;# 
  4602  028D                     	;# 
  4603  028E                     	;# 
  4604  028F                     	;# 
  4605  0290                     	;# 
  4606  0290                     	;# 
  4607  0291                     	;# 
  4608  0292                     	;# 
  4609  0292                     	;# 
  4610  0293                     	;# 
  4611  0293                     	;# 
  4612  0294                     	;# 
  4613  0295                     	;# 
  4614  0296                     	;# 
  4615  0296                     	;# 
  4616  0297                     	;# 
  4617  0298                     	;# 
  4618  0298                     	;# 
  4619  0299                     	;# 
  4620  0299                     	;# 
  4621  029A                     	;# 
  4622  029B                     	;# 
  4623  029C                     	;# 
  4624  029C                     	;# 
  4625  029D                     	;# 
  4626  030C                     	;# 
  4627  030C                     	;# 
  4628  030D                     	;# 
  4629  030E                     	;# 
  4630  030F                     	;# 
  4631  0310                     	;# 
  4632  0310                     	;# 
  4633  0311                     	;# 
  4634  0312                     	;# 
  4635  0313                     	;# 
  4636  0314                     	;# 
  4637  0314                     	;# 
  4638  0315                     	;# 
  4639  0316                     	;# 
  4640  0317                     	;# 
  4641  0318                     	;# 
  4642  0318                     	;# 
  4643  0319                     	;# 
  4644  031A                     	;# 
  4645  031B                     	;# 
  4646  031C                     	;# 
  4647  031C                     	;# 
  4648  031D                     	;# 
  4649  031E                     	;# 
  4650  031F                     	;# 
  4651  038C                     	;# 
  4652  038D                     	;# 
  4653  038E                     	;# 
  4654  0390                     	;# 
  4655  0391                     	;# 
  4656  0392                     	;# 
  4657  040C                     	;# 
  4658  040D                     	;# 
  4659  040E                     	;# 
  4660  040F                     	;# 
  4661  0410                     	;# 
  4662  0411                     	;# 
  4663  0416                     	;# 
  4664  0416                     	;# 
  4665  0417                     	;# 
  4666  0418                     	;# 
  4667  0418                     	;# 
  4668  0419                     	;# 
  4669  041A                     	;# 
  4670  041A                     	;# 
  4671  041B                     	;# 
  4672  041C                     	;# 
  4673  041C                     	;# 
  4674  041D                     	;# 
  4675  041E                     	;# 
  4676  041F                     	;# 
  4677  048C                     	;# 
  4678  048C                     	;# 
  4679  048D                     	;# 
  4680  048E                     	;# 
  4681  048F                     	;# 
  4682  048F                     	;# 
  4683  0490                     	;# 
  4684  0491                     	;# 
  4685  0492                     	;# 
  4686  0492                     	;# 
  4687  0493                     	;# 
  4688  0494                     	;# 
  4689  0495                     	;# 
  4690  0495                     	;# 
  4691  0496                     	;# 
  4692  0497                     	;# 
  4693  0498                     	;# 
  4694  0499                     	;# 
  4695  049A                     	;# 
  4696  049B                     	;# 
  4697  049C                     	;# 
  4698  049D                     	;# 
  4699  050C                     	;# 
  4700  050C                     	;# 
  4701  050D                     	;# 
  4702  050E                     	;# 
  4703  050F                     	;# 
  4704  050F                     	;# 
  4705  0510                     	;# 
  4706  0511                     	;# 
  4707  0512                     	;# 
  4708  0512                     	;# 
  4709  0513                     	;# 
  4710  0514                     	;# 
  4711  0515                     	;# 
  4712  0515                     	;# 
  4713  0516                     	;# 
  4714  0517                     	;# 
  4715  0518                     	;# 
  4716  0519                     	;# 
  4717  051A                     	;# 
  4718  051B                     	;# 
  4719  051C                     	;# 
  4720  051D                     	;# 
  4721  058C                     	;# 
  4722  058C                     	;# 
  4723  058D                     	;# 
  4724  058E                     	;# 
  4725  058F                     	;# 
  4726  058F                     	;# 
  4727  0590                     	;# 
  4728  0591                     	;# 
  4729  0592                     	;# 
  4730  0593                     	;# 
  4731  060C                     	;# 
  4732  060D                     	;# 
  4733  060E                     	;# 
  4734  060F                     	;# 
  4735  0610                     	;# 
  4736  0611                     	;# 
  4737  0612                     	;# 
  4738  0613                     	;# 
  4739  0614                     	;# 
  4740  0616                     	;# 
  4741  0617                     	;# 
  4742  0618                     	;# 
  4743  0619                     	;# 
  4744  061A                     	;# 
  4745  061B                     	;# 
  4746  061C                     	;# 
  4747  061D                     	;# 
  4748  061E                     	;# 
  4749  068C                     	;# 
  4750  068D                     	;# 
  4751  068E                     	;# 
  4752  068F                     	;# 
  4753  0690                     	;# 
  4754  0691                     	;# 
  4755  0692                     	;# 
  4756  0693                     	;# 
  4757  0694                     	;# 
  4758  070C                     	;# 
  4759  070D                     	;# 
  4760  070E                     	;# 
  4761  070F                     	;# 
  4762  0710                     	;# 
  4763  0711                     	;# 
  4764  0712                     	;# 
  4765  0713                     	;# 
  4766  0714                     	;# 
  4767  0716                     	;# 
  4768  0717                     	;# 
  4769  0718                     	;# 
  4770  0719                     	;# 
  4771  071A                     	;# 
  4772  071B                     	;# 
  4773  071C                     	;# 
  4774  071D                     	;# 
  4775  071E                     	;# 
  4776  0796                     	;# 
  4777  0797                     	;# 
  4778  0798                     	;# 
  4779  0799                     	;# 
  4780  079A                     	;# 
  4781  079B                     	;# 
  4782  080C                     	;# 
  4783  080D                     	;# 
  4784  080E                     	;# 
  4785  080F                     	;# 
  4786  0810                     	;# 
  4787  0811                     	;# 
  4788  0812                     	;# 
  4789  0813                     	;# 
  4790  0814                     	;# 
  4791  081A                     	;# 
  4792  081B                     	;# 
  4793  081C                     	;# 
  4794  081D                     	;# 
  4795  081E                     	;# 
  4796  081F                     	;# 
  4797  088C                     	;# 
  4798  088D                     	;# 
  4799  088E                     	;# 
  4800  088F                     	;# 
  4801  0890                     	;# 
  4802  0891                     	;# 
  4803  0892                     	;# 
  4804  0893                     	;# 
  4805  0895                     	;# 
  4806  0896                     	;# 
  4807  0897                     	;# 
  4808  0898                     	;# 
  4809  0899                     	;# 
  4810  089A                     	;# 
  4811  089B                     	;# 
  4812  090C                     	;# 
  4813  090E                     	;# 
  4814  090F                     	;# 
  4815  091F                     	;# 
  4816  091F                     	;# 
  4817  098F                     	;# 
  4818  098F                     	;# 
  4819  0990                     	;# 
  4820  0991                     	;# 
  4821  0992                     	;# 
  4822  0993                     	;# 
  4823  0994                     	;# 
  4824  0995                     	;# 
  4825  0996                     	;# 
  4826  0997                     	;# 
  4827  0E0F                     	;# 
  4828  0E10                     	;# 
  4829  0E11                     	;# 
  4830  0E12                     	;# 
  4831  0E13                     	;# 
  4832  0E14                     	;# 
  4833  0E15                     	;# 
  4834  0E16                     	;# 
  4835  0E17                     	;# 
  4836  0E18                     	;# 
  4837  0E19                     	;# 
  4838  0E1A                     	;# 
  4839  0E1B                     	;# 
  4840  0E1C                     	;# 
  4841  0E1D                     	;# 
  4842  0E1E                     	;# 
  4843  0E1F                     	;# 
  4844  0E20                     	;# 
  4845  0E21                     	;# 
  4846  0E22                     	;# 
  4847  0E23                     	;# 
  4848  0E24                     	;# 
  4849  0E25                     	;# 
  4850  0E26                     	;# 
  4851  0E27                     	;# 
  4852  0E28                     	;# 
  4853  0E29                     	;# 
  4854  0E2A                     	;# 
  4855  0E2B                     	;# 
  4856  0E2C                     	;# 
  4857  0E2D                     	;# 
  4858  0E2E                     	;# 
  4859  0E2F                     	;# 
  4860  0E30                     	;# 
  4861  0E31                     	;# 
  4862  0E32                     	;# 
  4863  0E33                     	;# 
  4864  0E34                     	;# 
  4865  0E35                     	;# 
  4866  0E36                     	;# 
  4867  0E37                     	;# 
  4868  0E8F                     	;# 
  4869  0E90                     	;# 
  4870  0E91                     	;# 
  4871  0E92                     	;# 
  4872  0E93                     	;# 
  4873  0E94                     	;# 
  4874  0E95                     	;# 
  4875  0E96                     	;# 
  4876  0E97                     	;# 
  4877  0E9C                     	;# 
  4878  0E9D                     	;# 
  4879  0E9E                     	;# 
  4880  0EA1                     	;# 
  4881  0EA2                     	;# 
  4882  0EA3                     	;# 
  4883  0EA4                     	;# 
  4884  0EA5                     	;# 
  4885  0EA9                     	;# 
  4886  0EAA                     	;# 
  4887  0EAB                     	;# 
  4888  0EAC                     	;# 
  4889  0EB1                     	;# 
  4890  0EB2                     	;# 
  4891  0EB3                     	;# 
  4892  0EB8                     	;# 
  4893  0EB9                     	;# 
  4894  0EBA                     	;# 
  4895  0EBB                     	;# 
  4896  0EBC                     	;# 
  4897  0EBD                     	;# 
  4898  0EBE                     	;# 
  4899  0EC3                     	;# 
  4900  0EC5                     	;# 
  4901  0EC6                     	;# 
  4902  0EC7                     	;# 
  4903  0EC8                     	;# 
  4904  0EC9                     	;# 
  4905  0ECA                     	;# 
  4906  0ECB                     	;# 
  4907  0ECC                     	;# 
  4908  0F10                     	;# 
  4909  0F11                     	;# 
  4910  0F12                     	;# 
  4911  0F13                     	;# 
  4912  0F14                     	;# 
  4913  0F15                     	;# 
  4914  0F16                     	;# 
  4915  0F17                     	;# 
  4916  0F18                     	;# 
  4917  0F19                     	;# 
  4918  0F1A                     	;# 
  4919  0F1B                     	;# 
  4920  0F1C                     	;# 
  4921  0F1D                     	;# 
  4922  0F1E                     	;# 
  4923  0F1F                     	;# 
  4924  0F20                     	;# 
  4925  0F21                     	;# 
  4926  0F22                     	;# 
  4927  0F23                     	;# 
  4928  0F24                     	;# 
  4929  0F25                     	;# 
  4930  0F26                     	;# 
  4931  0F27                     	;# 
  4932  0F28                     	;# 
  4933  0F29                     	;# 
  4934  0F2A                     	;# 
  4935  0F2B                     	;# 
  4936  0F2C                     	;# 
  4937  0F2D                     	;# 
  4938  0F2E                     	;# 
  4939  0F2F                     	;# 
  4940  0F30                     	;# 
  4941  0F31                     	;# 
  4942  0F32                     	;# 
  4943  0F38                     	;# 
  4944  0F39                     	;# 
  4945  0F3A                     	;# 
  4946  0F3B                     	;# 
  4947  0F3C                     	;# 
  4948  0F3D                     	;# 
  4949  0F3E                     	;# 
  4950  0F3F                     	;# 
  4951  0F40                     	;# 
  4952  0F41                     	;# 
  4953  0F43                     	;# 
  4954  0F44                     	;# 
  4955  0F45                     	;# 
  4956  0F46                     	;# 
  4957  0F47                     	;# 
  4958  0F48                     	;# 
  4959  0F49                     	;# 
  4960  0F4A                     	;# 
  4961  0F4B                     	;# 
  4962  0F4C                     	;# 
  4963  0F4E                     	;# 
  4964  0F4F                     	;# 
  4965  0F50                     	;# 
  4966  0F51                     	;# 
  4967  0F52                     	;# 
  4968  0F53                     	;# 
  4969  0F54                     	;# 
  4970  0F55                     	;# 
  4971  0F56                     	;# 
  4972  0F57                     	;# 
  4973  0F59                     	;# 
  4974  0F5A                     	;# 
  4975  0F5B                     	;# 
  4976  0F5C                     	;# 
  4977  0F5D                     	;# 
  4978  0F61                     	;# 
  4979  0F62                     	;# 
  4980  0F64                     	;# 
  4981  0F65                     	;# 
  4982  0F66                     	;# 
  4983  0F67                     	;# 
  4984  0F68                     	;# 
  4985  0F69                     	;# 
  4986  0F6A                     	;# 
  4987  0F6B                     	;# 
  4988  0F6C                     	;# 
  4989  0F6D                     	;# 
  4990  0FE4                     	;# 
  4991  0FE5                     	;# 
  4992  0FE6                     	;# 
  4993  0FE7                     	;# 
  4994  0FE8                     	;# 
  4995  0FE9                     	;# 
  4996  0FEA                     	;# 
  4997  0FEB                     	;# 
  4998  0FED                     	;# 
  4999  0FEE                     	;# 
  5000  0FEF                     	;# 
  5001  0000                     	;# 
  5002  0001                     	;# 
  5003  0002                     	;# 
  5004  0003                     	;# 
  5005  0004                     	;# 
  5006  0005                     	;# 
  5007  0006                     	;# 
  5008  0007                     	;# 
  5009  0008                     	;# 
  5010  0009                     	;# 
  5011  000A                     	;# 
  5012  000B                     	;# 
  5013  000C                     	;# 
  5014  000D                     	;# 
  5015  000E                     	;# 
  5016  000F                     	;# 
  5017  0010                     	;# 
  5018  0011                     	;# 
  5019  0012                     	;# 
  5020  0013                     	;# 
  5021  0014                     	;# 
  5022  0015                     	;# 
  5023  0016                     	;# 
  5024  0017                     	;# 
  5025  0018                     	;# 
  5026  0019                     	;# 
  5027  001A                     	;# 
  5028  001C                     	;# 
  5029  001C                     	;# 
  5030  001D                     	;# 
  5031  001D                     	;# 
  5032  001E                     	;# 
  5033  001F                     	;# 
  5034  008C                     	;# 
  5035  008C                     	;# 
  5036  008D                     	;# 
  5037  008E                     	;# 
  5038  008E                     	;# 
  5039  008F                     	;# 
  5040  0090                     	;# 
  5041  0090                     	;# 
  5042  0091                     	;# 
  5043  0093                     	;# 
  5044  0094                     	;# 
  5045  0095                     	;# 
  5046  0096                     	;# 
  5047  0097                     	;# 
  5048  0098                     	;# 
  5049  0099                     	;# 
  5050  009A                     	;# 
  5051  009B                     	;# 
  5052  009C                     	;# 
  5053  009D                     	;# 
  5054  009E                     	;# 
  5055  010C                     	;# 
  5056  010D                     	;# 
  5057  010E                     	;# 
  5058  010E                     	;# 
  5059  010F                     	;# 
  5060  0110                     	;# 
  5061  0110                     	;# 
  5062  0111                     	;# 
  5063  0112                     	;# 
  5064  0112                     	;# 
  5065  0113                     	;# 
  5066  0114                     	;# 
  5067  0114                     	;# 
  5068  0115                     	;# 
  5069  0116                     	;# 
  5070  0116                     	;# 
  5071  0117                     	;# 
  5072  0119                     	;# 
  5073  0119                     	;# 
  5074  0119                     	;# 
  5075  011A                     	;# 
  5076  011A                     	;# 
  5077  011A                     	;# 
  5078  011B                     	;# 
  5079  011B                     	;# 
  5080  011B                     	;# 
  5081  011B                     	;# 
  5082  011B                     	;# 
  5083  011C                     	;# 
  5084  011C                     	;# 
  5085  011C                     	;# 
  5086  011D                     	;# 
  5087  011D                     	;# 
  5088  011D                     	;# 
  5089  011E                     	;# 
  5090  011E                     	;# 
  5091  011E                     	;# 
  5092  011F                     	;# 
  5093  011F                     	;# 
  5094  011F                     	;# 
  5095  011F                     	;# 
  5096  011F                     	;# 
  5097  018C                     	;# 
  5098  018D                     	;# 
  5099  018E                     	;# 
  5100  018F                     	;# 
  5101  0190                     	;# 
  5102  0191                     	;# 
  5103  0192                     	;# 
  5104  0196                     	;# 
  5105  0197                     	;# 
  5106  0198                     	;# 
  5107  0199                     	;# 
  5108  019A                     	;# 
  5109  019B                     	;# 
  5110  019C                     	;# 
  5111  020C                     	;# 
  5112  020C                     	;# 
  5113  020D                     	;# 
  5114  020E                     	;# 
  5115  020F                     	;# 
  5116  020F                     	;# 
  5117  0210                     	;# 
  5118  0210                     	;# 
  5119  0211                     	;# 
  5120  0211                     	;# 
  5121  0212                     	;# 
  5122  0212                     	;# 
  5123  0213                     	;# 
  5124  0214                     	;# 
  5125  0215                     	;# 
  5126  0215                     	;# 
  5127  0216                     	;# 
  5128  0216                     	;# 
  5129  0217                     	;# 
  5130  0217                     	;# 
  5131  0218                     	;# 
  5132  0218                     	;# 
  5133  0219                     	;# 
  5134  021A                     	;# 
  5135  021B                     	;# 
  5136  021B                     	;# 
  5137  021C                     	;# 
  5138  021C                     	;# 
  5139  021D                     	;# 
  5140  021D                     	;# 
  5141  021E                     	;# 
  5142  021F                     	;# 
  5143  028C                     	;# 
  5144  028C                     	;# 
  5145  028D                     	;# 
  5146  028D                     	;# 
  5147  028E                     	;# 
  5148  028F                     	;# 
  5149  0290                     	;# 
  5150  0290                     	;# 
  5151  0291                     	;# 
  5152  0292                     	;# 
  5153  0292                     	;# 
  5154  0293                     	;# 
  5155  0293                     	;# 
  5156  0294                     	;# 
  5157  0295                     	;# 
  5158  0296                     	;# 
  5159  0296                     	;# 
  5160  0297                     	;# 
  5161  0298                     	;# 
  5162  0298                     	;# 
  5163  0299                     	;# 
  5164  0299                     	;# 
  5165  029A                     	;# 
  5166  029B                     	;# 
  5167  029C                     	;# 
  5168  029C                     	;# 
  5169  029D                     	;# 
  5170  030C                     	;# 
  5171  030C                     	;# 
  5172  030D                     	;# 
  5173  030E                     	;# 
  5174  030F                     	;# 
  5175  0310                     	;# 
  5176  0310                     	;# 
  5177  0311                     	;# 
  5178  0312                     	;# 
  5179  0313                     	;# 
  5180  0314                     	;# 
  5181  0314                     	;# 
  5182  0315                     	;# 
  5183  0316                     	;# 
  5184  0317                     	;# 
  5185  0318                     	;# 
  5186  0318                     	;# 
  5187  0319                     	;# 
  5188  031A                     	;# 
  5189  031B                     	;# 
  5190  031C                     	;# 
  5191  031C                     	;# 
  5192  031D                     	;# 
  5193  031E                     	;# 
  5194  031F                     	;# 
  5195  038C                     	;# 
  5196  038D                     	;# 
  5197  038E                     	;# 
  5198  0390                     	;# 
  5199  0391                     	;# 
  5200  0392                     	;# 
  5201  040C                     	;# 
  5202  040D                     	;# 
  5203  040E                     	;# 
  5204  040F                     	;# 
  5205  0410                     	;# 
  5206  0411                     	;# 
  5207  0416                     	;# 
  5208  0416                     	;# 
  5209  0417                     	;# 
  5210  0418                     	;# 
  5211  0418                     	;# 
  5212  0419                     	;# 
  5213  041A                     	;# 
  5214  041A                     	;# 
  5215  041B                     	;# 
  5216  041C                     	;# 
  5217  041C                     	;# 
  5218  041D                     	;# 
  5219  041E                     	;# 
  5220  041F                     	;# 
  5221  048C                     	;# 
  5222  048C                     	;# 
  5223  048D                     	;# 
  5224  048E                     	;# 
  5225  048F                     	;# 
  5226  048F                     	;# 
  5227  0490                     	;# 
  5228  0491                     	;# 
  5229  0492                     	;# 
  5230  0492                     	;# 
  5231  0493                     	;# 
  5232  0494                     	;# 
  5233  0495                     	;# 
  5234  0495                     	;# 
  5235  0496                     	;# 
  5236  0497                     	;# 
  5237  0498                     	;# 
  5238  0499                     	;# 
  5239  049A                     	;# 
  5240  049B                     	;# 
  5241  049C                     	;# 
  5242  049D                     	;# 
  5243  050C                     	;# 
  5244  050C                     	;# 
  5245  050D                     	;# 
  5246  050E                     	;# 
  5247  050F                     	;# 
  5248  050F                     	;# 
  5249  0510                     	;# 
  5250  0511                     	;# 
  5251  0512                     	;# 
  5252  0512                     	;# 
  5253  0513                     	;# 
  5254  0514                     	;# 
  5255  0515                     	;# 
  5256  0515                     	;# 
  5257  0516                     	;# 
  5258  0517                     	;# 
  5259  0518                     	;# 
  5260  0519                     	;# 
  5261  051A                     	;# 
  5262  051B                     	;# 
  5263  051C                     	;# 
  5264  051D                     	;# 
  5265  058C                     	;# 
  5266  058C                     	;# 
  5267  058D                     	;# 
  5268  058E                     	;# 
  5269  058F                     	;# 
  5270  058F                     	;# 
  5271  0590                     	;# 
  5272  0591                     	;# 
  5273  0592                     	;# 
  5274  0593                     	;# 
  5275  060C                     	;# 
  5276  060D                     	;# 
  5277  060E                     	;# 
  5278  060F                     	;# 
  5279  0610                     	;# 
  5280  0611                     	;# 
  5281  0612                     	;# 
  5282  0613                     	;# 
  5283  0614                     	;# 
  5284  0616                     	;# 
  5285  0617                     	;# 
  5286  0618                     	;# 
  5287  0619                     	;# 
  5288  061A                     	;# 
  5289  061B                     	;# 
  5290  061C                     	;# 
  5291  061D                     	;# 
  5292  061E                     	;# 
  5293  068C                     	;# 
  5294  068D                     	;# 
  5295  068E                     	;# 
  5296  068F                     	;# 
  5297  0690                     	;# 
  5298  0691                     	;# 
  5299  0692                     	;# 
  5300  0693                     	;# 
  5301  0694                     	;# 
  5302  070C                     	;# 
  5303  070D                     	;# 
  5304  070E                     	;# 
  5305  070F                     	;# 
  5306  0710                     	;# 
  5307  0711                     	;# 
  5308  0712                     	;# 
  5309  0713                     	;# 
  5310  0714                     	;# 
  5311  0716                     	;# 
  5312  0717                     	;# 
  5313  0718                     	;# 
  5314  0719                     	;# 
  5315  071A                     	;# 
  5316  071B                     	;# 
  5317  071C                     	;# 
  5318  071D                     	;# 
  5319  071E                     	;# 
  5320  0796                     	;# 
  5321  0797                     	;# 
  5322  0798                     	;# 
  5323  0799                     	;# 
  5324  079A                     	;# 
  5325  079B                     	;# 
  5326  080C                     	;# 
  5327  080D                     	;# 
  5328  080E                     	;# 
  5329  080F                     	;# 
  5330  0810                     	;# 
  5331  0811                     	;# 
  5332  0812                     	;# 
  5333  0813                     	;# 
  5334  0814                     	;# 
  5335  081A                     	;# 
  5336  081B                     	;# 
  5337  081C                     	;# 
  5338  081D                     	;# 
  5339  081E                     	;# 
  5340  081F                     	;# 
  5341  088C                     	;# 
  5342  088D                     	;# 
  5343  088E                     	;# 
  5344  088F                     	;# 
  5345  0890                     	;# 
  5346  0891                     	;# 
  5347  0892                     	;# 
  5348  0893                     	;# 
  5349  0895                     	;# 
  5350  0896                     	;# 
  5351  0897                     	;# 
  5352  0898                     	;# 
  5353  0899                     	;# 
  5354  089A                     	;# 
  5355  089B                     	;# 
  5356  090C                     	;# 
  5357  090E                     	;# 
  5358  090F                     	;# 
  5359  091F                     	;# 
  5360  091F                     	;# 
  5361  098F                     	;# 
  5362  098F                     	;# 
  5363  0990                     	;# 
  5364  0991                     	;# 
  5365  0992                     	;# 
  5366  0993                     	;# 
  5367  0994                     	;# 
  5368  0995                     	;# 
  5369  0996                     	;# 
  5370  0997                     	;# 
  5371  0E0F                     	;# 
  5372  0E10                     	;# 
  5373  0E11                     	;# 
  5374  0E12                     	;# 
  5375  0E13                     	;# 
  5376  0E14                     	;# 
  5377  0E15                     	;# 
  5378  0E16                     	;# 
  5379  0E17                     	;# 
  5380  0E18                     	;# 
  5381  0E19                     	;# 
  5382  0E1A                     	;# 
  5383  0E1B                     	;# 
  5384  0E1C                     	;# 
  5385  0E1D                     	;# 
  5386  0E1E                     	;# 
  5387  0E1F                     	;# 
  5388  0E20                     	;# 
  5389  0E21                     	;# 
  5390  0E22                     	;# 
  5391  0E23                     	;# 
  5392  0E24                     	;# 
  5393  0E25                     	;# 
  5394  0E26                     	;# 
  5395  0E27                     	;# 
  5396  0E28                     	;# 
  5397  0E29                     	;# 
  5398  0E2A                     	;# 
  5399  0E2B                     	;# 
  5400  0E2C                     	;# 
  5401  0E2D                     	;# 
  5402  0E2E                     	;# 
  5403  0E2F                     	;# 
  5404  0E30                     	;# 
  5405  0E31                     	;# 
  5406  0E32                     	;# 
  5407  0E33                     	;# 
  5408  0E34                     	;# 
  5409  0E35                     	;# 
  5410  0E36                     	;# 
  5411  0E37                     	;# 
  5412  0E8F                     	;# 
  5413  0E90                     	;# 
  5414  0E91                     	;# 
  5415  0E92                     	;# 
  5416  0E93                     	;# 
  5417  0E94                     	;# 
  5418  0E95                     	;# 
  5419  0E96                     	;# 
  5420  0E97                     	;# 
  5421  0E9C                     	;# 
  5422  0E9D                     	;# 
  5423  0E9E                     	;# 
  5424  0EA1                     	;# 
  5425  0EA2                     	;# 
  5426  0EA3                     	;# 
  5427  0EA4                     	;# 
  5428  0EA5                     	;# 
  5429  0EA9                     	;# 
  5430  0EAA                     	;# 
  5431  0EAB                     	;# 
  5432  0EAC                     	;# 
  5433  0EB1                     	;# 
  5434  0EB2                     	;# 
  5435  0EB3                     	;# 
  5436  0EB8                     	;# 
  5437  0EB9                     	;# 
  5438  0EBA                     	;# 
  5439  0EBB                     	;# 
  5440  0EBC                     	;# 
  5441  0EBD                     	;# 
  5442  0EBE                     	;# 
  5443  0EC3                     	;# 
  5444  0EC5                     	;# 
  5445  0EC6                     	;# 
  5446  0EC7                     	;# 
  5447  0EC8                     	;# 
  5448  0EC9                     	;# 
  5449  0ECA                     	;# 
  5450  0ECB                     	;# 
  5451  0ECC                     	;# 
  5452  0F10                     	;# 
  5453  0F11                     	;# 
  5454  0F12                     	;# 
  5455  0F13                     	;# 
  5456  0F14                     	;# 
  5457  0F15                     	;# 
  5458  0F16                     	;# 
  5459  0F17                     	;# 
  5460  0F18                     	;# 
  5461  0F19                     	;# 
  5462  0F1A                     	;# 
  5463  0F1B                     	;# 
  5464  0F1C                     	;# 
  5465  0F1D                     	;# 
  5466  0F1E                     	;# 
  5467  0F1F                     	;# 
  5468  0F20                     	;# 
  5469  0F21                     	;# 
  5470  0F22                     	;# 
  5471  0F23                     	;# 
  5472  0F24                     	;# 
  5473  0F25                     	;# 
  5474  0F26                     	;# 
  5475  0F27                     	;# 
  5476  0F28                     	;# 
  5477  0F29                     	;# 
  5478  0F2A                     	;# 
  5479  0F2B                     	;# 
  5480  0F2C                     	;# 
  5481  0F2D                     	;# 
  5482  0F2E                     	;# 
  5483  0F2F                     	;# 
  5484  0F30                     	;# 
  5485  0F31                     	;# 
  5486  0F32                     	;# 
  5487  0F38                     	;# 
  5488  0F39                     	;# 
  5489  0F3A                     	;# 
  5490  0F3B                     	;# 
  5491  0F3C                     	;# 
  5492  0F3D                     	;# 
  5493  0F3E                     	;# 
  5494  0F3F                     	;# 
  5495  0F40                     	;# 
  5496  0F41                     	;# 
  5497  0F43                     	;# 
  5498  0F44                     	;# 
  5499  0F45                     	;# 
  5500  0F46                     	;# 
  5501  0F47                     	;# 
  5502  0F48                     	;# 
  5503  0F49                     	;# 
  5504  0F4A                     	;# 
  5505  0F4B                     	;# 
  5506  0F4C                     	;# 
  5507  0F4E                     	;# 
  5508  0F4F                     	;# 
  5509  0F50                     	;# 
  5510  0F51                     	;# 
  5511  0F52                     	;# 
  5512  0F53                     	;# 
  5513  0F54                     	;# 
  5514  0F55                     	;# 
  5515  0F56                     	;# 
  5516  0F57                     	;# 
  5517  0F59                     	;# 
  5518  0F5A                     	;# 
  5519  0F5B                     	;# 
  5520  0F5C                     	;# 
  5521  0F5D                     	;# 
  5522  0F61                     	;# 
  5523  0F62                     	;# 
  5524  0F64                     	;# 
  5525  0F65                     	;# 
  5526  0F66                     	;# 
  5527  0F67                     	;# 
  5528  0F68                     	;# 
  5529  0F69                     	;# 
  5530  0F6A                     	;# 
  5531  0F6B                     	;# 
  5532  0F6C                     	;# 
  5533  0F6D                     	;# 
  5534  0FE4                     	;# 
  5535  0FE5                     	;# 
  5536  0FE6                     	;# 
  5537  0FE7                     	;# 
  5538  0FE8                     	;# 
  5539  0FE9                     	;# 
  5540  0FEA                     	;# 
  5541  0FEB                     	;# 
  5542  0FED                     	;# 
  5543  0FEE                     	;# 
  5544  0FEF                     	;# 
  5545  0000                     	;# 
  5546  0001                     	;# 
  5547  0002                     	;# 
  5548  0003                     	;# 
  5549  0004                     	;# 
  5550  0005                     	;# 
  5551  0006                     	;# 
  5552  0007                     	;# 
  5553  0008                     	;# 
  5554  0009                     	;# 
  5555  000A                     	;# 
  5556  000B                     	;# 
  5557  000C                     	;# 
  5558  000D                     	;# 
  5559  000E                     	;# 
  5560  000F                     	;# 
  5561  0010                     	;# 
  5562  0011                     	;# 
  5563  0012                     	;# 
  5564  0013                     	;# 
  5565  0014                     	;# 
  5566  0015                     	;# 
  5567  0016                     	;# 
  5568  0017                     	;# 
  5569  0018                     	;# 
  5570  0019                     	;# 
  5571  001A                     	;# 
  5572  001C                     	;# 
  5573  001C                     	;# 
  5574  001D                     	;# 
  5575  001D                     	;# 
  5576  001E                     	;# 
  5577  001F                     	;# 
  5578  008C                     	;# 
  5579  008C                     	;# 
  5580  008D                     	;# 
  5581  008E                     	;# 
  5582  008E                     	;# 
  5583  008F                     	;# 
  5584  0090                     	;# 
  5585  0090                     	;# 
  5586  0091                     	;# 
  5587  0093                     	;# 
  5588  0094                     	;# 
  5589  0095                     	;# 
  5590  0096                     	;# 
  5591  0097                     	;# 
  5592  0098                     	;# 
  5593  0099                     	;# 
  5594  009A                     	;# 
  5595  009B                     	;# 
  5596  009C                     	;# 
  5597  009D                     	;# 
  5598  009E                     	;# 
  5599  010C                     	;# 
  5600  010D                     	;# 
  5601  010E                     	;# 
  5602  010E                     	;# 
  5603  010F                     	;# 
  5604  0110                     	;# 
  5605  0110                     	;# 
  5606  0111                     	;# 
  5607  0112                     	;# 
  5608  0112                     	;# 
  5609  0113                     	;# 
  5610  0114                     	;# 
  5611  0114                     	;# 
  5612  0115                     	;# 
  5613  0116                     	;# 
  5614  0116                     	;# 
  5615  0117                     	;# 
  5616  0119                     	;# 
  5617  0119                     	;# 
  5618  0119                     	;# 
  5619  011A                     	;# 
  5620  011A                     	;# 
  5621  011A                     	;# 
  5622  011B                     	;# 
  5623  011B                     	;# 
  5624  011B                     	;# 
  5625  011B                     	;# 
  5626  011B                     	;# 
  5627  011C                     	;# 
  5628  011C                     	;# 
  5629  011C                     	;# 
  5630  011D                     	;# 
  5631  011D                     	;# 
  5632  011D                     	;# 
  5633  011E                     	;# 
  5634  011E                     	;# 
  5635  011E                     	;# 
  5636  011F                     	;# 
  5637  011F                     	;# 
  5638  011F                     	;# 
  5639  011F                     	;# 
  5640  011F                     	;# 
  5641  018C                     	;# 
  5642  018D                     	;# 
  5643  018E                     	;# 
  5644  018F                     	;# 
  5645  0190                     	;# 
  5646  0191                     	;# 
  5647  0192                     	;# 
  5648  0196                     	;# 
  5649  0197                     	;# 
  5650  0198                     	;# 
  5651  0199                     	;# 
  5652  019A                     	;# 
  5653  019B                     	;# 
  5654  019C                     	;# 
  5655  020C                     	;# 
  5656  020C                     	;# 
  5657  020D                     	;# 
  5658  020E                     	;# 
  5659  020F                     	;# 
  5660  020F                     	;# 
  5661  0210                     	;# 
  5662  0210                     	;# 
  5663  0211                     	;# 
  5664  0211                     	;# 
  5665  0212                     	;# 
  5666  0212                     	;# 
  5667  0213                     	;# 
  5668  0214                     	;# 
  5669  0215                     	;# 
  5670  0215                     	;# 
  5671  0216                     	;# 
  5672  0216                     	;# 
  5673  0217                     	;# 
  5674  0217                     	;# 
  5675  0218                     	;# 
  5676  0218                     	;# 
  5677  0219                     	;# 
  5678  021A                     	;# 
  5679  021B                     	;# 
  5680  021B                     	;# 
  5681  021C                     	;# 
  5682  021C                     	;# 
  5683  021D                     	;# 
  5684  021D                     	;# 
  5685  021E                     	;# 
  5686  021F                     	;# 
  5687  028C                     	;# 
  5688  028C                     	;# 
  5689  028D                     	;# 
  5690  028D                     	;# 
  5691  028E                     	;# 
  5692  028F                     	;# 
  5693  0290                     	;# 
  5694  0290                     	;# 
  5695  0291                     	;# 
  5696  0292                     	;# 
  5697  0292                     	;# 
  5698  0293                     	;# 
  5699  0293                     	;# 
  5700  0294                     	;# 
  5701  0295                     	;# 
  5702  0296                     	;# 
  5703  0296                     	;# 
  5704  0297                     	;# 
  5705  0298                     	;# 
  5706  0298                     	;# 
  5707  0299                     	;# 
  5708  0299                     	;# 
  5709  029A                     	;# 
  5710  029B                     	;# 
  5711  029C                     	;# 
  5712  029C                     	;# 
  5713  029D                     	;# 
  5714  030C                     	;# 
  5715  030C                     	;# 
  5716  030D                     	;# 
  5717  030E                     	;# 
  5718  030F                     	;# 
  5719  0310                     	;# 
  5720  0310                     	;# 
  5721  0311                     	;# 
  5722  0312                     	;# 
  5723  0313                     	;# 
  5724  0314                     	;# 
  5725  0314                     	;# 
  5726  0315                     	;# 
  5727  0316                     	;# 
  5728  0317                     	;# 
  5729  0318                     	;# 
  5730  0318                     	;# 
  5731  0319                     	;# 
  5732  031A                     	;# 
  5733  031B                     	;# 
  5734  031C                     	;# 
  5735  031C                     	;# 
  5736  031D                     	;# 
  5737  031E                     	;# 
  5738  031F                     	;# 
  5739  038C                     	;# 
  5740  038D                     	;# 
  5741  038E                     	;# 
  5742  0390                     	;# 
  5743  0391                     	;# 
  5744  0392                     	;# 
  5745  040C                     	;# 
  5746  040D                     	;# 
  5747  040E                     	;# 
  5748  040F                     	;# 
  5749  0410                     	;# 
  5750  0411                     	;# 
  5751  0416                     	;# 
  5752  0416                     	;# 
  5753  0417                     	;# 
  5754  0418                     	;# 
  5755  0418                     	;# 
  5756  0419                     	;# 
  5757  041A                     	;# 
  5758  041A                     	;# 
  5759  041B                     	;# 
  5760  041C                     	;# 
  5761  041C                     	;# 
  5762  041D                     	;# 
  5763  041E                     	;# 
  5764  041F                     	;# 
  5765  048C                     	;# 
  5766  048C                     	;# 
  5767  048D                     	;# 
  5768  048E                     	;# 
  5769  048F                     	;# 
  5770  048F                     	;# 
  5771  0490                     	;# 
  5772  0491                     	;# 
  5773  0492                     	;# 
  5774  0492                     	;# 
  5775  0493                     	;# 
  5776  0494                     	;# 
  5777  0495                     	;# 
  5778  0495                     	;# 
  5779  0496                     	;# 
  5780  0497                     	;# 
  5781  0498                     	;# 
  5782  0499                     	;# 
  5783  049A                     	;# 
  5784  049B                     	;# 
  5785  049C                     	;# 
  5786  049D                     	;# 
  5787  050C                     	;# 
  5788  050C                     	;# 
  5789  050D                     	;# 
  5790  050E                     	;# 
  5791  050F                     	;# 
  5792  050F                     	;# 
  5793  0510                     	;# 
  5794  0511                     	;# 
  5795  0512                     	;# 
  5796  0512                     	;# 
  5797  0513                     	;# 
  5798  0514                     	;# 
  5799  0515                     	;# 
  5800  0515                     	;# 
  5801  0516                     	;# 
  5802  0517                     	;# 
  5803  0518                     	;# 
  5804  0519                     	;# 
  5805  051A                     	;# 
  5806  051B                     	;# 
  5807  051C                     	;# 
  5808  051D                     	;# 
  5809  058C                     	;# 
  5810  058C                     	;# 
  5811  058D                     	;# 
  5812  058E                     	;# 
  5813  058F                     	;# 
  5814  058F                     	;# 
  5815  0590                     	;# 
  5816  0591                     	;# 
  5817  0592                     	;# 
  5818  0593                     	;# 
  5819  060C                     	;# 
  5820  060D                     	;# 
  5821  060E                     	;# 
  5822  060F                     	;# 
  5823  0610                     	;# 
  5824  0611                     	;# 
  5825  0612                     	;# 
  5826  0613                     	;# 
  5827  0614                     	;# 
  5828  0616                     	;# 
  5829  0617                     	;# 
  5830  0618                     	;# 
  5831  0619                     	;# 
  5832  061A                     	;# 
  5833  061B                     	;# 
  5834  061C                     	;# 
  5835  061D                     	;# 
  5836  061E                     	;# 
  5837  068C                     	;# 
  5838  068D                     	;# 
  5839  068E                     	;# 
  5840  068F                     	;# 
  5841  0690                     	;# 
  5842  0691                     	;# 
  5843  0692                     	;# 
  5844  0693                     	;# 
  5845  0694                     	;# 
  5846  070C                     	;# 
  5847  070D                     	;# 
  5848  070E                     	;# 
  5849  070F                     	;# 
  5850  0710                     	;# 
  5851  0711                     	;# 
  5852  0712                     	;# 
  5853  0713                     	;# 
  5854  0714                     	;# 
  5855  0716                     	;# 
  5856  0717                     	;# 
  5857  0718                     	;# 
  5858  0719                     	;# 
  5859  071A                     	;# 
  5860  071B                     	;# 
  5861  071C                     	;# 
  5862  071D                     	;# 
  5863  071E                     	;# 
  5864  0796                     	;# 
  5865  0797                     	;# 
  5866  0798                     	;# 
  5867  0799                     	;# 
  5868  079A                     	;# 
  5869  079B                     	;# 
  5870  080C                     	;# 
  5871  080D                     	;# 
  5872  080E                     	;# 
  5873  080F                     	;# 
  5874  0810                     	;# 
  5875  0811                     	;# 
  5876  0812                     	;# 
  5877  0813                     	;# 
  5878  0814                     	;# 
  5879  081A                     	;# 
  5880  081B                     	;# 
  5881  081C                     	;# 
  5882  081D                     	;# 
  5883  081E                     	;# 
  5884  081F                     	;# 
  5885  088C                     	;# 
  5886  088D                     	;# 
  5887  088E                     	;# 
  5888  088F                     	;# 
  5889  0890                     	;# 
  5890  0891                     	;# 
  5891  0892                     	;# 
  5892  0893                     	;# 
  5893  0895                     	;# 
  5894  0896                     	;# 
  5895  0897                     	;# 
  5896  0898                     	;# 
  5897  0899                     	;# 
  5898  089A                     	;# 
  5899  089B                     	;# 
  5900  090C                     	;# 
  5901  090E                     	;# 
  5902  090F                     	;# 
  5903  091F                     	;# 
  5904  091F                     	;# 
  5905  098F                     	;# 
  5906  098F                     	;# 
  5907  0990                     	;# 
  5908  0991                     	;# 
  5909  0992                     	;# 
  5910  0993                     	;# 
  5911  0994                     	;# 
  5912  0995                     	;# 
  5913  0996                     	;# 
  5914  0997                     	;# 
  5915  0E0F                     	;# 
  5916  0E10                     	;# 
  5917  0E11                     	;# 
  5918  0E12                     	;# 
  5919  0E13                     	;# 
  5920  0E14                     	;# 
  5921  0E15                     	;# 
  5922  0E16                     	;# 
  5923  0E17                     	;# 
  5924  0E18                     	;# 
  5925  0E19                     	;# 
  5926  0E1A                     	;# 
  5927  0E1B                     	;# 
  5928  0E1C                     	;# 
  5929  0E1D                     	;# 
  5930  0E1E                     	;# 
  5931  0E1F                     	;# 
  5932  0E20                     	;# 
  5933  0E21                     	;# 
  5934  0E22                     	;# 
  5935  0E23                     	;# 
  5936  0E24                     	;# 
  5937  0E25                     	;# 
  5938  0E26                     	;# 
  5939  0E27                     	;# 
  5940  0E28                     	;# 
  5941  0E29                     	;# 
  5942  0E2A                     	;# 
  5943  0E2B                     	;# 
  5944  0E2C                     	;# 
  5945  0E2D                     	;# 
  5946  0E2E                     	;# 
  5947  0E2F                     	;# 
  5948  0E30                     	;# 
  5949  0E31                     	;# 
  5950  0E32                     	;# 
  5951  0E33                     	;# 
  5952  0E34                     	;# 
  5953  0E35                     	;# 
  5954  0E36                     	;# 
  5955  0E37                     	;# 
  5956  0E8F                     	;# 
  5957  0E90                     	;# 
  5958  0E91                     	;# 
  5959  0E92                     	;# 
  5960  0E93                     	;# 
  5961  0E94                     	;# 
  5962  0E95                     	;# 
  5963  0E96                     	;# 
  5964  0E97                     	;# 
  5965  0E9C                     	;# 
  5966  0E9D                     	;# 
  5967  0E9E                     	;# 
  5968  0EA1                     	;# 
  5969  0EA2                     	;# 
  5970  0EA3                     	;# 
  5971  0EA4                     	;# 
  5972  0EA5                     	;# 
  5973  0EA9                     	;# 
  5974  0EAA                     	;# 
  5975  0EAB                     	;# 
  5976  0EAC                     	;# 
  5977  0EB1                     	;# 
  5978  0EB2                     	;# 
  5979  0EB3                     	;# 
  5980  0EB8                     	;# 
  5981  0EB9                     	;# 
  5982  0EBA                     	;# 
  5983  0EBB                     	;# 
  5984  0EBC                     	;# 
  5985  0EBD                     	;# 
  5986  0EBE                     	;# 
  5987  0EC3                     	;# 
  5988  0EC5                     	;# 
  5989  0EC6                     	;# 
  5990  0EC7                     	;# 
  5991  0EC8                     	;# 
  5992  0EC9                     	;# 
  5993  0ECA                     	;# 
  5994  0ECB                     	;# 
  5995  0ECC                     	;# 
  5996  0F10                     	;# 
  5997  0F11                     	;# 
  5998  0F12                     	;# 
  5999  0F13                     	;# 
  6000  0F14                     	;# 
  6001  0F15                     	;# 
  6002  0F16                     	;# 
  6003  0F17                     	;# 
  6004  0F18                     	;# 
  6005  0F19                     	;# 
  6006  0F1A                     	;# 
  6007  0F1B                     	;# 
  6008  0F1C                     	;# 
  6009  0F1D                     	;# 
  6010  0F1E                     	;# 
  6011  0F1F                     	;# 
  6012  0F20                     	;# 
  6013  0F21                     	;# 
  6014  0F22                     	;# 
  6015  0F23                     	;# 
  6016  0F24                     	;# 
  6017  0F25                     	;# 
  6018  0F26                     	;# 
  6019  0F27                     	;# 
  6020  0F28                     	;# 
  6021  0F29                     	;# 
  6022  0F2A                     	;# 
  6023  0F2B                     	;# 
  6024  0F2C                     	;# 
  6025  0F2D                     	;# 
  6026  0F2E                     	;# 
  6027  0F2F                     	;# 
  6028  0F30                     	;# 
  6029  0F31                     	;# 
  6030  0F32                     	;# 
  6031  0F38                     	;# 
  6032  0F39                     	;# 
  6033  0F3A                     	;# 
  6034  0F3B                     	;# 
  6035  0F3C                     	;# 
  6036  0F3D                     	;# 
  6037  0F3E                     	;# 
  6038  0F3F                     	;# 
  6039  0F40                     	;# 
  6040  0F41                     	;# 
  6041  0F43                     	;# 
  6042  0F44                     	;# 
  6043  0F45                     	;# 
  6044  0F46                     	;# 
  6045  0F47                     	;# 
  6046  0F48                     	;# 
  6047  0F49                     	;# 
  6048  0F4A                     	;# 
  6049  0F4B                     	;# 
  6050  0F4C                     	;# 
  6051  0F4E                     	;# 
  6052  0F4F                     	;# 
  6053  0F50                     	;# 
  6054  0F51                     	;# 
  6055  0F52                     	;# 
  6056  0F53                     	;# 
  6057  0F54                     	;# 
  6058  0F55                     	;# 
  6059  0F56                     	;# 
  6060  0F57                     	;# 
  6061  0F59                     	;# 
  6062  0F5A                     	;# 
  6063  0F5B                     	;# 
  6064  0F5C                     	;# 
  6065  0F5D                     	;# 
  6066  0F61                     	;# 
  6067  0F62                     	;# 
  6068  0F64                     	;# 
  6069  0F65                     	;# 
  6070  0F66                     	;# 
  6071  0F67                     	;# 
  6072  0F68                     	;# 
  6073  0F69                     	;# 
  6074  0F6A                     	;# 
  6075  0F6B                     	;# 
  6076  0F6C                     	;# 
  6077  0F6D                     	;# 
  6078  0FE4                     	;# 
  6079  0FE5                     	;# 
  6080  0FE6                     	;# 
  6081  0FE7                     	;# 
  6082  0FE8                     	;# 
  6083  0FE9                     	;# 
  6084  0FEA                     	;# 
  6085  0FEB                     	;# 
  6086  0FED                     	;# 
  6087  0FEE                     	;# 
  6088  0FEF                     	;# 
  6089  0000                     	;# 
  6090  0001                     	;# 
  6091  0002                     	;# 
  6092  0003                     	;# 
  6093  0004                     	;# 
  6094  0005                     	;# 
  6095  0006                     	;# 
  6096  0007                     	;# 
  6097  0008                     	;# 
  6098  0009                     	;# 
  6099  000A                     	;# 
  6100  000B                     	;# 
  6101  000C                     	;# 
  6102  000D                     	;# 
  6103  000E                     	;# 
  6104  000F                     	;# 
  6105  0010                     	;# 
  6106  0011                     	;# 
  6107  0012                     	;# 
  6108  0013                     	;# 
  6109  0014                     	;# 
  6110  0015                     	;# 
  6111  0016                     	;# 
  6112  0017                     	;# 
  6113  0018                     	;# 
  6114  0019                     	;# 
  6115  001A                     	;# 
  6116  001C                     	;# 
  6117  001C                     	;# 
  6118  001D                     	;# 
  6119  001D                     	;# 
  6120  001E                     	;# 
  6121  001F                     	;# 
  6122  008C                     	;# 
  6123  008C                     	;# 
  6124  008D                     	;# 
  6125  008E                     	;# 
  6126  008E                     	;# 
  6127  008F                     	;# 
  6128  0090                     	;# 
  6129  0090                     	;# 
  6130  0091                     	;# 
  6131  0093                     	;# 
  6132  0094                     	;# 
  6133  0095                     	;# 
  6134  0096                     	;# 
  6135  0097                     	;# 
  6136  0098                     	;# 
  6137  0099                     	;# 
  6138  009A                     	;# 
  6139  009B                     	;# 
  6140  009C                     	;# 
  6141  009D                     	;# 
  6142  009E                     	;# 
  6143  010C                     	;# 
  6144  010D                     	;# 
  6145  010E                     	;# 
  6146  010E                     	;# 
  6147  010F                     	;# 
  6148  0110                     	;# 
  6149  0110                     	;# 
  6150  0111                     	;# 
  6151  0112                     	;# 
  6152  0112                     	;# 
  6153  0113                     	;# 
  6154  0114                     	;# 
  6155  0114                     	;# 
  6156  0115                     	;# 
  6157  0116                     	;# 
  6158  0116                     	;# 
  6159  0117                     	;# 
  6160  0119                     	;# 
  6161  0119                     	;# 
  6162  0119                     	;# 
  6163  011A                     	;# 
  6164  011A                     	;# 
  6165  011A                     	;# 
  6166  011B                     	;# 
  6167  011B                     	;# 
  6168  011B                     	;# 
  6169  011B                     	;# 
  6170  011B                     	;# 
  6171  011C                     	;# 
  6172  011C                     	;# 
  6173  011C                     	;# 
  6174  011D                     	;# 
  6175  011D                     	;# 
  6176  011D                     	;# 
  6177  011E                     	;# 
  6178  011E                     	;# 
  6179  011E                     	;# 
  6180  011F                     	;# 
  6181  011F                     	;# 
  6182  011F                     	;# 
  6183  011F                     	;# 
  6184  011F                     	;# 
  6185  018C                     	;# 
  6186  018D                     	;# 
  6187  018E                     	;# 
  6188  018F                     	;# 
  6189  0190                     	;# 
  6190  0191                     	;# 
  6191  0192                     	;# 
  6192  0196                     	;# 
  6193  0197                     	;# 
  6194  0198                     	;# 
  6195  0199                     	;# 
  6196  019A                     	;# 
  6197  019B                     	;# 
  6198  019C                     	;# 
  6199  020C                     	;# 
  6200  020C                     	;# 
  6201  020D                     	;# 
  6202  020E                     	;# 
  6203  020F                     	;# 
  6204  020F                     	;# 
  6205  0210                     	;# 
  6206  0210                     	;# 
  6207  0211                     	;# 
  6208  0211                     	;# 
  6209  0212                     	;# 
  6210  0212                     	;# 
  6211  0213                     	;# 
  6212  0214                     	;# 
  6213  0215                     	;# 
  6214  0215                     	;# 
  6215  0216                     	;# 
  6216  0216                     	;# 
  6217  0217                     	;# 
  6218  0217                     	;# 
  6219  0218                     	;# 
  6220  0218                     	;# 
  6221  0219                     	;# 
  6222  021A                     	;# 
  6223  021B                     	;# 
  6224  021B                     	;# 
  6225  021C                     	;# 
  6226  021C                     	;# 
  6227  021D                     	;# 
  6228  021D                     	;# 
  6229  021E                     	;# 
  6230  021F                     	;# 
  6231  028C                     	;# 
  6232  028C                     	;# 
  6233  028D                     	;# 
  6234  028D                     	;# 
  6235  028E                     	;# 
  6236  028F                     	;# 
  6237  0290                     	;# 
  6238  0290                     	;# 
  6239  0291                     	;# 
  6240  0292                     	;# 
  6241  0292                     	;# 
  6242  0293                     	;# 
  6243  0293                     	;# 
  6244  0294                     	;# 
  6245  0295                     	;# 
  6246  0296                     	;# 
  6247  0296                     	;# 
  6248  0297                     	;# 
  6249  0298                     	;# 
  6250  0298                     	;# 
  6251  0299                     	;# 
  6252  0299                     	;# 
  6253  029A                     	;# 
  6254  029B                     	;# 
  6255  029C                     	;# 
  6256  029C                     	;# 
  6257  029D                     	;# 
  6258  030C                     	;# 
  6259  030C                     	;# 
  6260  030D                     	;# 
  6261  030E                     	;# 
  6262  030F                     	;# 
  6263  0310                     	;# 
  6264  0310                     	;# 
  6265  0311                     	;# 
  6266  0312                     	;# 
  6267  0313                     	;# 
  6268  0314                     	;# 
  6269  0314                     	;# 
  6270  0315                     	;# 
  6271  0316                     	;# 
  6272  0317                     	;# 
  6273  0318                     	;# 
  6274  0318                     	;# 
  6275  0319                     	;# 
  6276  031A                     	;# 
  6277  031B                     	;# 
  6278  031C                     	;# 
  6279  031C                     	;# 
  6280  031D                     	;# 
  6281  031E                     	;# 
  6282  031F                     	;# 
  6283  038C                     	;# 
  6284  038D                     	;# 
  6285  038E                     	;# 
  6286  0390                     	;# 
  6287  0391                     	;# 
  6288  0392                     	;# 
  6289  040C                     	;# 
  6290  040D                     	;# 
  6291  040E                     	;# 
  6292  040F                     	;# 
  6293  0410                     	;# 
  6294  0411                     	;# 
  6295  0416                     	;# 
  6296  0416                     	;# 
  6297  0417                     	;# 
  6298  0418                     	;# 
  6299  0418                     	;# 
  6300  0419                     	;# 
  6301  041A                     	;# 
  6302  041A                     	;# 
  6303  041B                     	;# 
  6304  041C                     	;# 
  6305  041C                     	;# 
  6306  041D                     	;# 
  6307  041E                     	;# 
  6308  041F                     	;# 
  6309  048C                     	;# 
  6310  048C                     	;# 
  6311  048D                     	;# 
  6312  048E                     	;# 
  6313  048F                     	;# 
  6314  048F                     	;# 
  6315  0490                     	;# 
  6316  0491                     	;# 
  6317  0492                     	;# 
  6318  0492                     	;# 
  6319  0493                     	;# 
  6320  0494                     	;# 
  6321  0495                     	;# 
  6322  0495                     	;# 
  6323  0496                     	;# 
  6324  0497                     	;# 
  6325  0498                     	;# 
  6326  0499                     	;# 
  6327  049A                     	;# 
  6328  049B                     	;# 
  6329  049C                     	;# 
  6330  049D                     	;# 
  6331  050C                     	;# 
  6332  050C                     	;# 
  6333  050D                     	;# 
  6334  050E                     	;# 
  6335  050F                     	;# 
  6336  050F                     	;# 
  6337  0510                     	;# 
  6338  0511                     	;# 
  6339  0512                     	;# 
  6340  0512                     	;# 
  6341  0513                     	;# 
  6342  0514                     	;# 
  6343  0515                     	;# 
  6344  0515                     	;# 
  6345  0516                     	;# 
  6346  0517                     	;# 
  6347  0518                     	;# 
  6348  0519                     	;# 
  6349  051A                     	;# 
  6350  051B                     	;# 
  6351  051C                     	;# 
  6352  051D                     	;# 
  6353  058C                     	;# 
  6354  058C                     	;# 
  6355  058D                     	;# 
  6356  058E                     	;# 
  6357  058F                     	;# 
  6358  058F                     	;# 
  6359  0590                     	;# 
  6360  0591                     	;# 
  6361  0592                     	;# 
  6362  0593                     	;# 
  6363  060C                     	;# 
  6364  060D                     	;# 
  6365  060E                     	;# 
  6366  060F                     	;# 
  6367  0610                     	;# 
  6368  0611                     	;# 
  6369  0612                     	;# 
  6370  0613                     	;# 
  6371  0614                     	;# 
  6372  0616                     	;# 
  6373  0617                     	;# 
  6374  0618                     	;# 
  6375  0619                     	;# 
  6376  061A                     	;# 
  6377  061B                     	;# 
  6378  061C                     	;# 
  6379  061D                     	;# 
  6380  061E                     	;# 
  6381  068C                     	;# 
  6382  068D                     	;# 
  6383  068E                     	;# 
  6384  068F                     	;# 
  6385  0690                     	;# 
  6386  0691                     	;# 
  6387  0692                     	;# 
  6388  0693                     	;# 
  6389  0694                     	;# 
  6390  070C                     	;# 
  6391  070D                     	;# 
  6392  070E                     	;# 
  6393  070F                     	;# 
  6394  0710                     	;# 
  6395  0711                     	;# 
  6396  0712                     	;# 
  6397  0713                     	;# 
  6398  0714                     	;# 
  6399  0716                     	;# 
  6400  0717                     	;# 
  6401  0718                     	;# 
  6402  0719                     	;# 
  6403  071A                     	;# 
  6404  071B                     	;# 
  6405  071C                     	;# 
  6406  071D                     	;# 
  6407  071E                     	;# 
  6408  0796                     	;# 
  6409  0797                     	;# 
  6410  0798                     	;# 
  6411  0799                     	;# 
  6412  079A                     	;# 
  6413  079B                     	;# 
  6414  080C                     	;# 
  6415  080D                     	;# 
  6416  080E                     	;# 
  6417  080F                     	;# 
  6418  0810                     	;# 
  6419  0811                     	;# 
  6420  0812                     	;# 
  6421  0813                     	;# 
  6422  0814                     	;# 
  6423  081A                     	;# 
  6424  081B                     	;# 
  6425  081C                     	;# 
  6426  081D                     	;# 
  6427  081E                     	;# 
  6428  081F                     	;# 
  6429  088C                     	;# 
  6430  088D                     	;# 
  6431  088E                     	;# 
  6432  088F                     	;# 
  6433  0890                     	;# 
  6434  0891                     	;# 
  6435  0892                     	;# 
  6436  0893                     	;# 
  6437  0895                     	;# 
  6438  0896                     	;# 
  6439  0897                     	;# 
  6440  0898                     	;# 
  6441  0899                     	;# 
  6442  089A                     	;# 
  6443  089B                     	;# 
  6444  090C                     	;# 
  6445  090E                     	;# 
  6446  090F                     	;# 
  6447  091F                     	;# 
  6448  091F                     	;# 
  6449  098F                     	;# 
  6450  098F                     	;# 
  6451  0990                     	;# 
  6452  0991                     	;# 
  6453  0992                     	;# 
  6454  0993                     	;# 
  6455  0994                     	;# 
  6456  0995                     	;# 
  6457  0996                     	;# 
  6458  0997                     	;# 
  6459  0E0F                     	;# 
  6460  0E10                     	;# 
  6461  0E11                     	;# 
  6462  0E12                     	;# 
  6463  0E13                     	;# 
  6464  0E14                     	;# 
  6465  0E15                     	;# 
  6466  0E16                     	;# 
  6467  0E17                     	;# 
  6468  0E18                     	;# 
  6469  0E19                     	;# 
  6470  0E1A                     	;# 
  6471  0E1B                     	;# 
  6472  0E1C                     	;# 
  6473  0E1D                     	;# 
  6474  0E1E                     	;# 
  6475  0E1F                     	;# 
  6476  0E20                     	;# 
  6477  0E21                     	;# 
  6478  0E22                     	;# 
  6479  0E23                     	;# 
  6480  0E24                     	;# 
  6481  0E25                     	;# 
  6482  0E26                     	;# 
  6483  0E27                     	;# 
  6484  0E28                     	;# 
  6485  0E29                     	;# 
  6486  0E2A                     	;# 
  6487  0E2B                     	;# 
  6488  0E2C                     	;# 
  6489  0E2D                     	;# 
  6490  0E2E                     	;# 
  6491  0E2F                     	;# 
  6492  0E30                     	;# 
  6493  0E31                     	;# 
  6494  0E32                     	;# 
  6495  0E33                     	;# 
  6496  0E34                     	;# 
  6497  0E35                     	;# 
  6498  0E36                     	;# 
  6499  0E37                     	;# 
  6500  0E8F                     	;# 
  6501  0E90                     	;# 
  6502  0E91                     	;# 
  6503  0E92                     	;# 
  6504  0E93                     	;# 
  6505  0E94                     	;# 
  6506  0E95                     	;# 
  6507  0E96                     	;# 
  6508  0E97                     	;# 
  6509  0E9C                     	;# 
  6510  0E9D                     	;# 
  6511  0E9E                     	;# 
  6512  0EA1                     	;# 
  6513  0EA2                     	;# 
  6514  0EA3                     	;# 
  6515  0EA4                     	;# 
  6516  0EA5                     	;# 
  6517  0EA9                     	;# 
  6518  0EAA                     	;# 
  6519  0EAB                     	;# 
  6520  0EAC                     	;# 
  6521  0EB1                     	;# 
  6522  0EB2                     	;# 
  6523  0EB3                     	;# 
  6524  0EB8                     	;# 
  6525  0EB9                     	;# 
  6526  0EBA                     	;# 
  6527  0EBB                     	;# 
  6528  0EBC                     	;# 
  6529  0EBD                     	;# 
  6530  0EBE                     	;# 
  6531  0EC3                     	;# 
  6532  0EC5                     	;# 
  6533  0EC6                     	;# 
  6534  0EC7                     	;# 
  6535  0EC8                     	;# 
  6536  0EC9                     	;# 
  6537  0ECA                     	;# 
  6538  0ECB                     	;# 
  6539  0ECC                     	;# 
  6540  0F10                     	;# 
  6541  0F11                     	;# 
  6542  0F12                     	;# 
  6543  0F13                     	;# 
  6544  0F14                     	;# 
  6545  0F15                     	;# 
  6546  0F16                     	;# 
  6547  0F17                     	;# 
  6548  0F18                     	;# 
  6549  0F19                     	;# 
  6550  0F1A                     	;# 
  6551  0F1B                     	;# 
  6552  0F1C                     	;# 
  6553  0F1D                     	;# 
  6554  0F1E                     	;# 
  6555  0F1F                     	;# 
  6556  0F20                     	;# 
  6557  0F21                     	;# 
  6558  0F22                     	;# 
  6559  0F23                     	;# 
  6560  0F24                     	;# 
  6561  0F25                     	;# 
  6562  0F26                     	;# 
  6563  0F27                     	;# 
  6564  0F28                     	;# 
  6565  0F29                     	;# 
  6566  0F2A                     	;# 
  6567  0F2B                     	;# 
  6568  0F2C                     	;# 
  6569  0F2D                     	;# 
  6570  0F2E                     	;# 
  6571  0F2F                     	;# 
  6572  0F30                     	;# 
  6573  0F31                     	;# 
  6574  0F32                     	;# 
  6575  0F38                     	;# 
  6576  0F39                     	;# 
  6577  0F3A                     	;# 
  6578  0F3B                     	;# 
  6579  0F3C                     	;# 
  6580  0F3D                     	;# 
  6581  0F3E                     	;# 
  6582  0F3F                     	;# 
  6583  0F40                     	;# 
  6584  0F41                     	;# 
  6585  0F43                     	;# 
  6586  0F44                     	;# 
  6587  0F45                     	;# 
  6588  0F46                     	;# 
  6589  0F47                     	;# 
  6590  0F48                     	;# 
  6591  0F49                     	;# 
  6592  0F4A                     	;# 
  6593  0F4B                     	;# 
  6594  0F4C                     	;# 
  6595  0F4E                     	;# 
  6596  0F4F                     	;# 
  6597  0F50                     	;# 
  6598  0F51                     	;# 
  6599  0F52                     	;# 
  6600  0F53                     	;# 
  6601  0F54                     	;# 
  6602  0F55                     	;# 
  6603  0F56                     	;# 
  6604  0F57                     	;# 
  6605  0F59                     	;# 
  6606  0F5A                     	;# 
  6607  0F5B                     	;# 
  6608  0F5C                     	;# 
  6609  0F5D                     	;# 
  6610  0F61                     	;# 
  6611  0F62                     	;# 
  6612  0F64                     	;# 
  6613  0F65                     	;# 
  6614  0F66                     	;# 
  6615  0F67                     	;# 
  6616  0F68                     	;# 
  6617  0F69                     	;# 
  6618  0F6A                     	;# 
  6619  0F6B                     	;# 
  6620  0F6C                     	;# 
  6621  0F6D                     	;# 
  6622  0FE4                     	;# 
  6623  0FE5                     	;# 
  6624  0FE6                     	;# 
  6625  0FE7                     	;# 
  6626  0FE8                     	;# 
  6627  0FE9                     	;# 
  6628  0FEA                     	;# 
  6629  0FEB                     	;# 
  6630  0FED                     	;# 
  6631  0FEE                     	;# 
  6632  0FEF                     	;# 
  6633                           
  6634 ;; Function _EUSART_is_tx_ready is unused but had its address taken
  6635  0000                     
  6636 ;; Function _EUSART_is_tx_done is unused but had its address taken
  6637  0000                     
  6638                           	psect	idataBANK1
  6639  0068                     __pidataBANK1:	
  6640                           
  6641                           ;initializer for Knock@F15448
  6642  0068  346B               	retlw	107
  6643  0069  346E               	retlw	110
  6644  006A  346F               	retlw	111
  6645  006B  3463               	retlw	99
  6646  006C  346B               	retlw	107
  6647  006D  3420               	retlw	32
  6648  006E  3431               	retlw	49
  6649  006F  3432               	retlw	50
  6650  0070  3433               	retlw	51
  6651  0071  3400               	retlw	0
  6652                           
  6653                           ;initializer for Pair@F15440
  6654  0072  3470               	retlw	112
  6655  0073  3461               	retlw	97
  6656  0074  3469               	retlw	105
  6657  0075  3472               	retlw	114
  6658  0076  3420               	retlw	32
  6659  0077  3431               	retlw	49
  6660  0078  3432               	retlw	50
  6661  0079  3433               	retlw	51
  6662  007A  3400               	retlw	0
  6663                           
  6664                           ;initializer for _failedStr
  6665  007B  3446               	retlw	70
  6666  007C  3441               	retlw	65
  6667  007D  3449               	retlw	73
  6668  007E  344C               	retlw	76
  6669  007F  3445               	retlw	69
  6670  0080  3444               	retlw	68
  6671  0081  3400               	retlw	0
  6672                           
  6673                           ;initializer for _errStr
  6674  0082  3445               	retlw	69
  6675  0083  3452               	retlw	82
  6676  0084  3452               	retlw	82
  6677  0085  3400               	retlw	0
  6678                           
  6679                           	psect	idataBANK2
  6680  00E7                     __pidataBANK2:	
  6681                           
  6682                           ;initializer for Validate@F15444
  6683  00E7  3476               	retlw	118
  6684  00E8  3461               	retlw	97
  6685  00E9  346C               	retlw	108
  6686  00EA  3469               	retlw	105
  6687  00EB  3464               	retlw	100
  6688  00EC  3461               	retlw	97
  6689  00ED  3474               	retlw	116
  6690  00EE  3465               	retlw	101
  6691  00EF  3420               	retlw	32
  6692  00F0  3431               	retlw	49
  6693  00F1  3432               	retlw	50
  6694  00F2  3433               	retlw	51
  6695  00F3  3400               	retlw	0
  6696                           
  6697                           	psect	stringtext1
  6698  11C6                     __pstringtext1:	
  6699  11C6                     _uart:	
  6700  11C6  34B6               	retlw	low _EUSART_is_rx_ready
  6701  11C7  340A               	retlw	high _EUSART_is_rx_ready
  6702  11C8  3436               	retlw	low _EUSART_Initialize
  6703  11C9  3400               	retlw	high _EUSART_Initialize
  6704  11CA  34BA               	retlw	low _EUSART_Read
  6705  11CB  3400               	retlw	high _EUSART_Read
  6706  11CC  34D1               	retlw	low _EUSART_Receive_ISR
  6707  11CD  3400               	retlw	high _EUSART_Receive_ISR
  6708  11CE  3463               	retlw	low _EUSART_SetRxInterruptHandler
  6709  11CF  3400               	retlw	high _EUSART_SetRxInterruptHandler
  6710  11D0  345D               	retlw	low _EUSART_SetTxInterruptHandler
  6711  11D1  3400               	retlw	high _EUSART_SetTxInterruptHandler
  6712  11D2  3400               	retlw	0
  6713  11D3  3400               	retlw	0
  6714  11D4  3400               	retlw	0
  6715  11D5  3400               	retlw	0
  6716  11D6  34A2               	retlw	low _EUSART_Transmit_ISR
  6717  11D7  3400               	retlw	high _EUSART_Transmit_ISR
  6718  11D8  3486               	retlw	low _EUSART_Write
  6719  11D9  3400               	retlw	high _EUSART_Write
  6720  11DA                     __end_of_uart:	
  6721                           
  6722                           	psect	stringtext2
  6723  127E                     __pstringtext2:	
  6724  127E                     _dpowers:	
  6725  127E  3401               	retlw	1
  6726  127F  3400               	retlw	0
  6727  1280  340A               	retlw	10
  6728  1281  3400               	retlw	0
  6729  1282  3464               	retlw	100
  6730  1283  3400               	retlw	0
  6731  1284  34E8               	retlw	232
  6732  1285  3403               	retlw	3
  6733  1286  3410               	retlw	16
  6734  1287  3427               	retlw	39
  6735  1288                     __end_of_dpowers:	
  6736                           
  6737                           	psect	stringtext3
  6738  12AE                     __pstringtext3:	
  6739  12AE                     _hexpowers:	
  6740  12AE  3401               	retlw	1
  6741  12AF  3400               	retlw	0
  6742  12B0  3410               	retlw	16
  6743  12B1  3400               	retlw	0
  6744  12B2  3400               	retlw	0
  6745  12B3  3401               	retlw	1
  6746  12B4  3400               	retlw	0
  6747  12B5  3410               	retlw	16
  6748  12B6                     __end_of_hexpowers:	
  6749                           
  6750                           	psect	stringtext4
  6751  12BE                     __pstringtext4:	
  6752  12BE                     _softRebootStr:	
  6753  12BE  3452               	retlw	82
  6754  12BF  3465               	retlw	101
  6755  12C0  3462               	retlw	98
  6756  12C1  346F               	retlw	111
  6757  12C2  346F               	retlw	111
  6758  12C3  3474               	retlw	116
  6759  12C4  3400               	retlw	0
  6760  12C5                     __end_of_softRebootStr:	
  6761                           
  6762                           	psect	stringtext5
  6763  12E8                     __pstringtext5:	
  6764  12E8                     _hardRebootStr:	
  6765  12E8  3452               	retlw	82
  6766  12E9  3445               	retlw	69
  6767  12EA  3441               	retlw	65
  6768  12EB  3444               	retlw	68
  6769  12EC  3459               	retlw	89
  6770  12ED  3400               	retlw	0
  6771  12EE                     __end_of_hardRebootStr:	
  6772                           
  6773                           	psect	stringtext6
  6774  12F4                     __pstringtext6:	
  6775  12F4                     _openStr:	
  6776  12F4  344F               	retlw	79
  6777  12F5  3450               	retlw	80
  6778  12F6  3445               	retlw	69
  6779  12F7  344E               	retlw	78
  6780  12F8  3400               	retlw	0
  6781  12F9                     __end_of_openStr:	
  6782                           
  6783                           	psect	stringtext7
  6784  12F9                     __pstringtext7:	
  6785  12F9                     _endStr:	
  6786  12F9  3445               	retlw	69
  6787  12FA  3458               	retlw	88
  6788  12FB  3449               	retlw	73
  6789  12FC  3454               	retlw	84
  6790  12FD  3400               	retlw	0
  6791  12FE                     __end_of_endStr:	
  6792                           
  6793                           	psect	stringtext8
  6794  1308                     __pstringtext8:	
  6795  1308                     _aokStr:	
  6796  1308  3441               	retlw	65
  6797  1309  344F               	retlw	79
  6798  130A  344B               	retlw	75
  6799  130B  3400               	retlw	0
  6800  130C                     __end_of_aokStr:	
  6801                           
  6802                           	psect	stringtext9
  6803  130C                     __pstringtext9:	
  6804  130C                     _cmdStr:	
  6805  130C  3443               	retlw	67
  6806  130D  344D               	retlw	77
  6807  130E  3444               	retlw	68
  6808  130F  3400               	retlw	0
  6809  1310                     __end_of_cmdStr:	
  6810                           
  6811                           	psect	nvBANK1
  6812  00E1                     __pnvBANK1:	
  6813  00E1                     _TMR2_InterruptHandler:	
  6814  00E1                     	ds	2
  6815  00E3                     _EUSART_RxDefaultInterruptHandler:	
  6816  00E3                     	ds	2
  6817  00E5                     _EUSART_TxDefaultInterruptHandler:	
  6818  00E5                     	ds	2
  6819  00E7                     _TMR4_InterruptHandler:	
  6820  00E7                     	ds	2
  6821  00E9                     _UID:	
  6822  00E9                     	ds	1
  6823  00EA                     _inCMD:	
  6824  00EA                     	ds	1
  6825  00EB                     _eusartTxBufferRemaining:	
  6826  00EB                     	ds	1
  6827  0003                     _STATUSbits	set	3
  6828  000D                     _PORTBbits	set	13
  6829  000E                     _PORTCbits	set	14
  6830  0016                     _LATAbits	set	22
  6831  000B                     _INTCONbits	set	11
  6832  0019                     _LATDbits	set	25
  6833  0014                     _TRISD	set	20
  6834  0013                     _TRISC	set	19
  6835  0012                     _TRISB	set	18
  6836  0011                     _TRISA	set	17
  6837  0015                     _TRISE	set	21
  6838  0018                     _LATC	set	24
  6839  0017                     _LATB	set	23
  6840  0016                     _LATA	set	22
  6841  0019                     _LATD	set	25
  6842  001A                     _LATE	set	26
  6843  0018                     _LATCbits	set	24
  6844  005F                     _GIE	set	95
  6845  0119                     _RC1REG	set	281
  6846  011D                     _RC1STAbits	set	285
  6847  011A                     _TX1REG	set	282
  6848  011E                     _TX1STAbits	set	286
  6849  011C                     _SP1BRGH	set	284
  6850  011B                     _SP1BRGL	set	283
  6851  011E                     _TX1STA	set	286
  6852  011D                     _RC1STA	set	285
  6853  011F                     _BAUD1CON	set	287
  6854  028E                     _T2CONbits	set	654
  6855  028C                     _T2TMR	set	652
  6856  028D                     _T2PR	set	653
  6857  0291                     _T2RST	set	657
  6858  028F                     _T2HLT	set	655
  6859  0290                     _T2CLKCON	set	656
  6860  028E                     _T2CON	set	654
  6861  0294                     _T4CONbits	set	660
  6862  0292                     _T4TMR	set	658
  6863  0293                     _T4PR	set	659
  6864  0297                     _T4RST	set	663
  6865  0295                     _T4HLT	set	661
  6866  0296                     _T4CLKCON	set	662
  6867  0294                     _T4CON	set	660
  6868  070F                     _PIR3bits	set	1807
  6869  0719                     _PIE3bits	set	1817
  6870  071A                     _PIE4bits	set	1818
  6871  0710                     _PIR4bits	set	1808
  6872  081F                     _NVMCON2	set	2079
  6873  081D                     _NVMDATH	set	2077
  6874  081C                     _NVMDATL	set	2076
  6875  081B                     _NVMADRH	set	2075
  6876  081A                     _NVMADRL	set	2074
  6877  081E                     _NVMCON1bits	set	2078
  6878  080C                     _WDTCON0bits	set	2060
  6879  080D                     _WDTCON1	set	2061
  6880  080C                     _WDTCON0	set	2060
  6881  40F1                     _WR	set	16625
  6882  0892                     _OSCTUNE	set	2194
  6883  0893                     _OSCFRQ	set	2195
  6884  0891                     _OSCEN	set	2193
  6885  088F                     _OSCCON3	set	2191
  6886  088D                     _OSCCON1	set	2189
  6887  0ECB                     _RXPPSbits	set	3787
  6888  0E8F                     _PPSLOCKbits	set	3727
  6889  0E8F                     _PPSLOCK	set	3727
  6890  0F21                     _RC1PPS	set	3873
  6891  0F5B                     _ODCOND	set	3931
  6892  0F50                     _ODCONC	set	3920
  6893  0F45                     _ODCONB	set	3909
  6894  0F3A                     _ODCONA	set	3898
  6895  0F66                     _ODCONE	set	3942
  6896  0F4F                     _WPUC	set	3919
  6897  0F39                     _WPUA	set	3897
  6898  0F44                     _WPUB	set	3908
  6899  0F65                     _WPUE	set	3941
  6900  0F5A                     _WPUD	set	3930
  6901  0F38                     _ANSELA	set	3896
  6902  0F64                     _ANSELE	set	3940
  6903  0F59                     _ANSELD	set	3929
  6904  0F43                     _ANSELB	set	3907
  6905  0F4E                     _ANSELC	set	3918
  6906                           
  6907                           	psect	stringtext10
  6908  1000                     __pstringtext10:	
  6909  1000                     STR_19:	
  6910  1000  340A               	retlw	10
  6911  1001  3420               	retlw	32	;' '
  6912  1002  3420               	retlw	32	;' '
  6913  1003  3420               	retlw	32	;' '
  6914  1004  3420               	retlw	32	;' '
  6915  1005  3420               	retlw	32	;' '
  6916  1006  3420               	retlw	32	;' '
  6917  1007  3420               	retlw	32	;' '
  6918  1008  3420               	retlw	32	;' '
  6919  1009  3420               	retlw	32	;' '
  6920  100A  3420               	retlw	32	;' '
  6921  100B  3420               	retlw	32	;' '
  6922  100C  347C               	retlw	124	;'|'
  6923  100D  3420               	retlw	32	;' '
  6924  100E  347C               	retlw	124	;'|'
  6925  100F  340A               	retlw	10
  6926  1010  3420               	retlw	32	;' '
  6927  1011  3420               	retlw	32	;' '
  6928  1012  3420               	retlw	32	;' '
  6929  1013  3420               	retlw	32	;' '
  6930  1014  3420               	retlw	32	;' '
  6931  1015  3420               	retlw	32	;' '
  6932  1016  3420               	retlw	32	;' '
  6933  1017  3420               	retlw	32	;' '
  6934  1018  3420               	retlw	32	;' '
  6935  1019  3420               	retlw	32	;' '
  6936  101A  3420               	retlw	32	;' '
  6937  101B  347C               	retlw	124	;'|'
  6938  101C  3420               	retlw	32	;' '
  6939  101D  347C               	retlw	124	;'|'
  6940  101E  340A               	retlw	10
  6941  101F  3420               	retlw	32	;' '
  6942  1020  3420               	retlw	32	;' '
  6943  1021  3420               	retlw	32	;' '
  6944  1022  342D               	retlw	45	;'-'
  6945  1023  342D               	retlw	45	;'-'
  6946  1024  342D               	retlw	45	;'-'
  6947  1025  342D               	retlw	45	;'-'
  6948  1026  342D               	retlw	45	;'-'
  6949  1027  342D               	retlw	45	;'-'
  6950  1028  342D               	retlw	45	;'-'
  6951  1029  342D               	retlw	45	;'-'
  6952  102A  342D               	retlw	45	;'-'
  6953  102B  342D               	retlw	45	;'-'
  6954  102C  342D               	retlw	45	;'-'
  6955  102D  342D               	retlw	45	;'-'
  6956  102E  342D               	retlw	45	;'-'
  6957  102F  342D               	retlw	45	;'-'
  6958  1030  342D               	retlw	45	;'-'
  6959  1031  342D               	retlw	45	;'-'
  6960  1032  342D               	retlw	45	;'-'
  6961  1033  342D               	retlw	45	;'-'
  6962  1034  342D               	retlw	45	;'-'
  6963  1035  340A               	retlw	10
  6964  1036  3420               	retlw	32	;' '
  6965  1037  3420               	retlw	32	;' '
  6966  1038  3420               	retlw	32	;' '
  6967  1039  342D               	retlw	45	;'-'
  6968  103A  342D               	retlw	45	;'-'
  6969  103B  342D               	retlw	45	;'-'
  6970  103C  342D               	retlw	45	;'-'
  6971  103D  342D               	retlw	45	;'-'
  6972  103E  342D               	retlw	45	;'-'
  6973  103F  342D               	retlw	45	;'-'
  6974  1040  342D               	retlw	45	;'-'
  6975  1041  342D               	retlw	45	;'-'
  6976  1042  342D               	retlw	45	;'-'
  6977  1043  342D               	retlw	45	;'-'
  6978  1044  342D               	retlw	45	;'-'
  6979  1045  342D               	retlw	45	;'-'
  6980  1046  342D               	retlw	45	;'-'
  6981  1047  342D               	retlw	45	;'-'
  6982  1048  342D               	retlw	45	;'-'
  6983  1049  342D               	retlw	45	;'-'
  6984  104A  342D               	retlw	45	;'-'
  6985  104B  342D               	retlw	45	;'-'
  6986  104C  340A               	retlw	10
  6987  104D  3420               	retlw	32	;' '
  6988  104E  3420               	retlw	32	;' '
  6989  104F  3420               	retlw	32	;' '
  6990  1050  3420               	retlw	32	;' '
  6991  1051  347C               	retlw	124	;'|'
  6992  1052  3420               	retlw	32	;' '
  6993  1053  3420               	retlw	32	;' '
  6994  1054  345F               	retlw	95	;'_'
  6995  1055  345F               	retlw	95	;'_'
  6996  1056  345F               	retlw	95	;'_'
  6997  1057  3420               	retlw	32	;' '
  6998  1058  3420               	retlw	32	;' '
  6999  1059  347C               	retlw	124	;'|'
  7000  105A  3420               	retlw	32	;' '
  7001  105B  3420               	retlw	32	;' '
  7002  105C  345F               	retlw	95	;'_'
  7003  105D  345F               	retlw	95	;'_'
  7004  105E  345F               	retlw	95	;'_'
  7005  105F  3420               	retlw	32	;' '
  7006  1060  3420               	retlw	32	;' '
  7007  1061  347C               	retlw	124	;'|'
  7008  1062  340A               	retlw	10
  7009  1063  3420               	retlw	32	;' '
  7010  1064  3420               	retlw	32	;' '
  7011  1065  3420               	retlw	32	;' '
  7012  1066  3420               	retlw	32	;' '
  7013  1067  347C               	retlw	124	;'|'
  7014  1068  3420               	retlw	32	;' '
  7015  1069  347C               	retlw	124	;'|'
  7016  106A  3420               	retlw	32	;' '
  7017  106B  347C               	retlw	124	;'|'
  7018  106C  3420               	retlw	32	;' '
  7019  106D  347C               	retlw	124	;'|'
  7020  106E  3420               	retlw	32	;' '
  7021  106F  347C               	retlw	124	;'|'
  7022  1070  3420               	retlw	32	;' '
  7023  1071  347C               	retlw	124	;'|'
  7024  1072  3420               	retlw	32	;' '
  7025  1073  347C               	retlw	124	;'|'
  7026  1074  3420               	retlw	32	;' '
  7027  1075  347C               	retlw	124	;'|'
  7028  1076  3420               	retlw	32	;' '
  7029  1077  347C               	retlw	124	;'|'
  7030  1078  340A               	retlw	10
  7031  1079  3420               	retlw	32	;' '
  7032  107A  3420               	retlw	32	;' '
  7033  107B  3420               	retlw	32	;' '
  7034  107C  3420               	retlw	32	;' '
  7035  107D  347C               	retlw	124	;'|'
  7036  107E  3420               	retlw	32	;' '
  7037  107F  347C               	retlw	124	;'|'
  7038  1080  342D               	retlw	45	;'-'
  7039  1081  342B               	retlw	43	;'+'
  7040  1082  342D               	retlw	45	;'-'
  7041  1083  347C               	retlw	124	;'|'
  7042  1084  3420               	retlw	32	;' '
  7043  1085  347C               	retlw	124	;'|'
  7044  1086  3420               	retlw	32	;' '
  7045  1087  347C               	retlw	124	;'|'
  7046  1088  342D               	retlw	45	;'-'
  7047  1089  342B               	retlw	43	;'+'
  7048  108A  342D               	retlw	45	;'-'
  7049  108B  347C               	retlw	124	;'|'
  7050  108C  3420               	retlw	32	;' '
  7051  108D  347C               	retlw	124	;'|'
  7052  108E  340A               	retlw	10
  7053  108F  3420               	retlw	32	;' '
  7054  1090  3420               	retlw	32	;' '
  7055  1091  3420               	retlw	32	;' '
  7056  1092  3420               	retlw	32	;' '
  7057  1093  347C               	retlw	124	;'|'
  7058  1094  3420               	retlw	32	;' '
  7059  1095  347C               	retlw	124	;'|'
  7060  1096  345F               	retlw	95	;'_'
  7061  1097  347C               	retlw	124	;'|'
  7062  1098  345F               	retlw	95	;'_'
  7063  1099  347C               	retlw	124	;'|'
  7064  109A  3420               	retlw	32	;' '
  7065  109B  347C               	retlw	124	;'|'
  7066  109C  3420               	retlw	32	;' '
  7067  109D  347C               	retlw	124	;'|'
  7068  109E  345F               	retlw	95	;'_'
  7069  109F  347C               	retlw	124	;'|'
  7070  10A0  345F               	retlw	95	;'_'
  7071  10A1  347C               	retlw	124	;'|'
  7072  10A2  3420               	retlw	32	;' '
  7073  10A3  347C               	retlw	124	;'|'
  7074  10A4  340A               	retlw	10
  7075  10A5  3420               	retlw	32	;' '
  7076  10A6  3420               	retlw	32	;' '
  7077  10A7  3420               	retlw	32	;' '
  7078  10A8  3420               	retlw	32	;' '
  7079  10A9  347C               	retlw	124	;'|'
  7080  10AA  3420               	retlw	32	;' '
  7081  10AB  3420               	retlw	32	;' '
  7082  10AC  345F               	retlw	95	;'_'
  7083  10AD  345F               	retlw	95	;'_'
  7084  10AE  345F               	retlw	95	;'_'
  7085  10AF  3420               	retlw	32	;' '
  7086  10B0  3420               	retlw	32	;' '
  7087  10B1  347C               	retlw	124	;'|'
  7088  10B2  3420               	retlw	32	;' '
  7089  10B3  3420               	retlw	32	;' '
  7090  10B4  345F               	retlw	95	;'_'
  7091  10B5  345F               	retlw	95	;'_'
  7092  10B6  345F               	retlw	95	;'_'
  7093  10B7  3420               	retlw	32	;' '
  7094  10B8  3420               	retlw	32	;' '
  7095  10B9  347C               	retlw	124	;'|'
  7096  10BA  340A               	retlw	10
  7097  10BB  3420               	retlw	32	;' '
  7098  10BC  3420               	retlw	32	;' '
  7099  10BD  3420               	retlw	32	;' '
  7100  10BE  3420               	retlw	32	;' '
  7101  10BF  347C               	retlw	124	;'|'
  7102  10C0  3420               	retlw	32	;' '
  7103  10C1  347C               	retlw	124	;'|'
  7104  10C2  3420               	retlw	32	;' '
  7105  10C3  3420               	retlw	32	;' '
  7106  10C4  3420               	retlw	32	;' '
  7107  10C5  347C               	retlw	124	;'|'
  7108  10C6  3420               	retlw	32	;' '
  7109  10C7  347C               	retlw	124	;'|'
  7110  10C8  3420               	retlw	32	;' '
  7111  10C9  347C               	retlw	124	;'|'
  7112  10CA  3420               	retlw	32	;' '
  7113  10CB  3420               	retlw	32	;' '
  7114  10CC  3420               	retlw	32	;' '
  7115  10CD  347C               	retlw	124	;'|'
  7116  10CE  3420               	retlw	32	;' '
  7117  10CF  347C               	retlw	124	;'|'
  7118  10D0  340A               	retlw	10
  7119  10D1  3420               	retlw	32	;' '
  7120  10D2  3420               	retlw	32	;' '
  7121  10D3  3420               	retlw	32	;' '
  7122  10D4  3420               	retlw	32	;' '
  7123  10D5  347C               	retlw	124	;'|'
  7124  10D6  3420               	retlw	32	;' '
  7125  10D7  347C               	retlw	124	;'|'
  7126  10D8  3420               	retlw	32	;' '
  7127  10D9  3420               	retlw	32	;' '
  7128  10DA  3420               	retlw	32	;' '
  7129  10DB  347C               	retlw	124	;'|'
  7130  10DC  3420               	retlw	32	;' '
  7131  10DD  347C               	retlw	124	;'|'
  7132  10DE  3420               	retlw	32	;' '
  7133  10DF  347C               	retlw	124	;'|'
  7134  10E0  3420               	retlw	32	;' '
  7135  10E1  3420               	retlw	32	;' '
  7136  10E2  3420               	retlw	32	;' '
  7137  10E3  347C               	retlw	124	;'|'
  7138  10E4  3420               	retlw	32	;' '
  7139  10E5  347C               	retlw	124	;'|'
  7140  10E6  340A               	retlw	10
  7141  10E7  3420               	retlw	32	;' '
  7142  10E8  3420               	retlw	32	;' '
  7143  10E9  3420               	retlw	32	;' '
  7144  10EA  3420               	retlw	32	;' '
  7145  10EB  347C               	retlw	124	;'|'
  7146  10EC  3420               	retlw	32	;' '
  7147  10ED  347C               	retlw	124	;'|'
  7148  10EE  345F               	retlw	95	;'_'
  7149  10EF  345F               	retlw	95	;'_'
  7150  10F0  345F               	retlw	95	;'_'
  7151  10F1  347C               	retlw	124	;'|'
  7152  10F2  3420               	retlw	32	;' '
  7153  10F3  347C               	retlw	124	;'|'
  7154  10F4  3420               	retlw	32	;' '
  7155  10F5  347C               	retlw	124	;'|'
  7156  10F6  345F               	retlw	95	;'_'
  7157  10F7  345F               	retlw	95	;'_'
  7158  10F8  345F               	retlw	95	;'_'
  7159  10F9  347C               	retlw	124	;'|'
  7160  10FA  3420               	retlw	32	;' '
  7161  10FB  347C               	retlw	124	;'|'
  7162  10FC  340A               	retlw	10
  7163  10FD  3420               	retlw	32	;' '
  7164  10FE  3420               	retlw	32	;' '
  7165  10FF  3420               	retlw	32	;' '
  7166  1100  3420               	retlw	32	;' '
  7167  1101  347C               	retlw	124	;'|'
  7168  1102  3420               	retlw	32	;' '
  7169  1103  3420               	retlw	32	;' '
  7170  1104  345F               	retlw	95	;'_'
  7171  1105  345F               	retlw	95	;'_'
  7172  1106  345F               	retlw	95	;'_'
  7173  1107  3420               	retlw	32	;' '
  7174  1108  3420               	retlw	32	;' '
  7175  1109  347C               	retlw	124	;'|'
  7176  110A  3420               	retlw	32	;' '
  7177  110B  3420               	retlw	32	;' '
  7178  110C  345F               	retlw	95	;'_'
  7179  110D  345F               	retlw	95	;'_'
  7180  110E  345F               	retlw	95	;'_'
  7181  110F  3420               	retlw	32	;' '
  7182  1110  3420               	retlw	32	;' '
  7183  1111  347C               	retlw	124	;'|'
  7184  1112  340A               	retlw	10
  7185  1113  3420               	retlw	32	;' '
  7186  1114  3420               	retlw	32	;' '
  7187  1115  3420               	retlw	32	;' '
  7188  1116  3420               	retlw	32	;' '
  7189  1117  347C               	retlw	124	;'|'
  7190  1118  3420               	retlw	32	;' '
  7191  1119  347C               	retlw	124	;'|'
  7192  111A  3420               	retlw	32	;' '
  7193  111B  3420               	retlw	32	;' '
  7194  111C  3420               	retlw	32	;' '
  7195  111D  347C               	retlw	124	;'|'
  7196  111E  3420               	retlw	32	;' '
  7197  111F  347C               	retlw	124	;'|'
  7198  1120  3420               	retlw	32	;' '
  7199  1121  347C               	retlw	124	;'|'
  7200  1122  3420               	retlw	32	;' '
  7201  1123  3420               	retlw	32	;' '
  7202  1124  3420               	retlw	32	;' '
  7203  1125  347C               	retlw	124	;'|'
  7204  1126  3420               	retlw	32	;' '
  7205  1127  347C               	retlw	124	;'|'
  7206  1128  340A               	retlw	10
  7207  1129  3420               	retlw	32	;' '
  7208  112A  3420               	retlw	32	;' '
  7209  112B  3420               	retlw	32	;' '
  7210  112C  3420               	retlw	32	;' '
  7211  112D  347C               	retlw	124	;'|'
  7212  112E  3420               	retlw	32	;' '
  7213  112F  347C               	retlw	124	;'|'
  7214  1130  3420               	retlw	32	;' '
  7215  1131  3420               	retlw	32	;' '
  7216  1132  3420               	retlw	32	;' '
  7217  1133  347C               	retlw	124	;'|'
  7218  1134  3420               	retlw	32	;' '
  7219  1135  347C               	retlw	124	;'|'
  7220  1136  3420               	retlw	32	;' '
  7221  1137  347C               	retlw	124	;'|'
  7222  1138  3420               	retlw	32	;' '
  7223  1139  3420               	retlw	32	;' '
  7224  113A  3420               	retlw	32	;' '
  7225  113B  347C               	retlw	124	;'|'
  7226  113C  3420               	retlw	32	;' '
  7227  113D  347C               	retlw	124	;'|'
  7228  113E  340A               	retlw	10
  7229  113F  3420               	retlw	32	;' '
  7230  1140  3420               	retlw	32	;' '
  7231  1141  3420               	retlw	32	;' '
  7232  1142  3420               	retlw	32	;' '
  7233  1143  347C               	retlw	124	;'|'
  7234  1144  3420               	retlw	32	;' '
  7235  1145  347C               	retlw	124	;'|'
  7236  1146  345F               	retlw	95	;'_'
  7237  1147  345F               	retlw	95	;'_'
  7238  1148  345F               	retlw	95	;'_'
  7239  1149  347C               	retlw	124	;'|'
  7240  114A  3420               	retlw	32	;' '
  7241  114B  347C               	retlw	124	;'|'
  7242  114C  3420               	retlw	32	;' '
  7243  114D  347C               	retlw	124	;'|'
  7244  114E  345F               	retlw	95	;'_'
  7245  114F  345F               	retlw	95	;'_'
  7246  1150  345F               	retlw	95	;'_'
  7247  1151  347C               	retlw	124	;'|'
  7248  1152  3420               	retlw	32	;' '
  7249  1153  347C               	retlw	124	;'|'
  7250  1154  340A               	retlw	10
  7251  1155  3420               	retlw	32	;' '
  7252  1156  3420               	retlw	32	;' '
  7253  1157  3420               	retlw	32	;' '
  7254  1158  3420               	retlw	32	;' '
  7255  1159  347C               	retlw	124	;'|'
  7256  115A  3420               	retlw	32	;' '
  7257  115B  3420               	retlw	32	;' '
  7258  115C  3420               	retlw	32	;' '
  7259  115D  3420               	retlw	32	;' '
  7260  115E  3420               	retlw	32	;' '
  7261  115F  3420               	retlw	32	;' '
  7262  1160  3420               	retlw	32	;' '
  7263  1161  347C               	retlw	124	;'|'
  7264  1162  3420               	retlw	32	;' '
  7265  1163  3420               	retlw	32	;' '
  7266  1164  3420               	retlw	32	;' '
  7267  1165  3420               	retlw	32	;' '
  7268  1166  3420               	retlw	32	;' '
  7269  1167  3420               	retlw	32	;' '
  7270  1168  3420               	retlw	32	;' '
  7271  1169  347C               	retlw	124	;'|'
  7272  116A  340A               	retlw	10
  7273  116B  3420               	retlw	32	;' '
  7274  116C  3420               	retlw	32	;' '
  7275  116D  3420               	retlw	32	;' '
  7276  116E  343D               	retlw	61	;'='
  7277  116F  343D               	retlw	61	;'='
  7278  1170  343D               	retlw	61	;'='
  7279  1171  343D               	retlw	61	;'='
  7280  1172  343D               	retlw	61	;'='
  7281  1173  343D               	retlw	61	;'='
  7282  1174  343D               	retlw	61	;'='
  7283  1175  343D               	retlw	61	;'='
  7284  1176  343D               	retlw	61	;'='
  7285  1177  343D               	retlw	61	;'='
  7286  1178  343D               	retlw	61	;'='
  7287  1179  343D               	retlw	61	;'='
  7288  117A  343D               	retlw	61	;'='
  7289  117B  343D               	retlw	61	;'='
  7290  117C  343D               	retlw	61	;'='
  7291  117D  343D               	retlw	61	;'='
  7292  117E  343D               	retlw	61	;'='
  7293  117F  343D               	retlw	61	;'='
  7294  1180  343D               	retlw	61	;'='
  7295  1181  340A               	retlw	10
  7296  1182  3400               	retlw	0
  7297                           
  7298                           	psect	stringtext11
  7299  1183                     __pstringtext11:	
  7300  1183                     STR_8:	
  7301  1183  3473               	retlw	115	;'s'
  7302  1184  3465               	retlw	101	;'e'
  7303  1185  3474               	retlw	116	;'t'
  7304  1186  3420               	retlw	32	;' '
  7305  1187  3477               	retlw	119	;'w'
  7306  1188  346C               	retlw	108	;'l'
  7307  1189  3461               	retlw	97	;'a'
  7308  118A  346E               	retlw	110	;'n'
  7309  118B  3420               	retlw	32	;' '
  7310  118C  3470               	retlw	112	;'p'
  7311  118D  3461               	retlw	97	;'a'
  7312  118E  3473               	retlw	115	;'s'
  7313  118F  3473               	retlw	115	;'s'
  7314  1190  3470               	retlw	112	;'p'
  7315  1191  3468               	retlw	104	;'h'
  7316  1192  3472               	retlw	114	;'r'
  7317  1193  3461               	retlw	97	;'a'
  7318  1194  3473               	retlw	115	;'s'
  7319  1195  3465               	retlw	101	;'e'
  7320  1196  3420               	retlw	32	;' '
  7321  1197  3425               	retlw	37	;'%'
  7322  1198  3473               	retlw	115	;'s'
  7323  1199  340D               	retlw	13
  7324  119A  340A               	retlw	10
  7325  119B  3400               	retlw	0
  7326                           
  7327                           	psect	stringtext12
  7328  119C                     __pstringtext12:	
  7329  119C                     STR_11:	
  7330  119C  3473               	retlw	115	;'s'
  7331  119D  3465               	retlw	101	;'e'
  7332  119E  3474               	retlw	116	;'t'
  7333  119F  3420               	retlw	32	;' '
  7334  11A0  3469               	retlw	105	;'i'
  7335  11A1  3470               	retlw	112	;'p'
  7336  11A2  3420               	retlw	32	;' '
  7337  11A3  3470               	retlw	112	;'p'
  7338  11A4  3472               	retlw	114	;'r'
  7339  11A5  346F               	retlw	111	;'o'
  7340  11A6  3474               	retlw	116	;'t'
  7341  11A7  346F               	retlw	111	;'o'
  7342  11A8  3463               	retlw	99	;'c'
  7343  11A9  346F               	retlw	111	;'o'
  7344  11AA  346C               	retlw	108	;'l'
  7345  11AB  3420               	retlw	32	;' '
  7346  11AC  3430               	retlw	48	;'0'
  7347  11AD  3438               	retlw	56	;'8'
  7348  11AE  340D               	retlw	13
  7349  11AF  340A               	retlw	10
  7350  11B0  3400               	retlw	0
  7351                           
  7352                           	psect	stringtext13
  7353  11B1                     __pstringtext13:	
  7354  11B1                     STR_6:	
  7355  11B1  3473               	retlw	115	;'s'
  7356  11B2  3465               	retlw	101	;'e'
  7357  11B3  3474               	retlw	116	;'t'
  7358  11B4  3420               	retlw	32	;' '
  7359  11B5  3475               	retlw	117	;'u'
  7360  11B6  3461               	retlw	97	;'a'
  7361  11B7  3472               	retlw	114	;'r'
  7362  11B8  3474               	retlw	116	;'t'
  7363  11B9  3420               	retlw	32	;' '
  7364  11BA  346D               	retlw	109	;'m'
  7365  11BB  346F               	retlw	111	;'o'
  7366  11BC  3464               	retlw	100	;'d'
  7367  11BD  3465               	retlw	101	;'e'
  7368  11BE  3420               	retlw	32	;' '
  7369  11BF  3430               	retlw	48	;'0'
  7370  11C0  3478               	retlw	120	;'x'
  7371  11C1  3431               	retlw	49	;'1'
  7372  11C2  3431               	retlw	49	;'1'
  7373  11C3  340D               	retlw	13
  7374  11C4  340A               	retlw	10
  7375  11C5  3400               	retlw	0
  7376                           
  7377                           	psect	stringtext14
  7378  11DA                     __pstringtext14:	
  7379  11DA                     STR_9:	
  7380  11DA  3473               	retlw	115	;'s'
  7381  11DB  3465               	retlw	101	;'e'
  7382  11DC  3474               	retlw	116	;'t'
  7383  11DD  3420               	retlw	32	;' '
  7384  11DE  3477               	retlw	119	;'w'
  7385  11DF  346C               	retlw	108	;'l'
  7386  11E0  3461               	retlw	97	;'a'
  7387  11E1  346E               	retlw	110	;'n'
  7388  11E2  3420               	retlw	32	;' '
  7389  11E3  3473               	retlw	115	;'s'
  7390  11E4  3473               	retlw	115	;'s'
  7391  11E5  3469               	retlw	105	;'i'
  7392  11E6  3464               	retlw	100	;'d'
  7393  11E7  3420               	retlw	32	;' '
  7394  11E8  3425               	retlw	37	;'%'
  7395  11E9  3473               	retlw	115	;'s'
  7396  11EA  340D               	retlw	13
  7397  11EB  340A               	retlw	10
  7398  11EC  3400               	retlw	0
  7399                           
  7400                           	psect	stringtext15
  7401  11ED                     __pstringtext15:	
  7402  11ED                     STR_10:	
  7403  11ED  3473               	retlw	115	;'s'
  7404  11EE  3465               	retlw	101	;'e'
  7405  11EF  3474               	retlw	116	;'t'
  7406  11F0  3420               	retlw	32	;' '
  7407  11F1  3477               	retlw	119	;'w'
  7408  11F2  346C               	retlw	108	;'l'
  7409  11F3  3461               	retlw	97	;'a'
  7410  11F4  346E               	retlw	110	;'n'
  7411  11F5  3420               	retlw	32	;' '
  7412  11F6  346A               	retlw	106	;'j'
  7413  11F7  346F               	retlw	111	;'o'
  7414  11F8  3469               	retlw	105	;'i'
  7415  11F9  346E               	retlw	110	;'n'
  7416  11FA  3420               	retlw	32	;' '
  7417  11FB  3431               	retlw	49	;'1'
  7418  11FC  340D               	retlw	13
  7419  11FD  340A               	retlw	10
  7420  11FE  3400               	retlw	0
  7421                           
  7422                           	psect	stringtext16
  7423  11FF                     __pstringtext16:	
  7424  11FF                     STR_31:	
  7425  11FF  3430               	retlw	48	;'0'
  7426  1200  3431               	retlw	49	;'1'
  7427  1201  3432               	retlw	50	;'2'
  7428  1202  3433               	retlw	51	;'3'
  7429  1203  3434               	retlw	52	;'4'
  7430  1204  3435               	retlw	53	;'5'
  7431  1205  3436               	retlw	54	;'6'
  7432  1206  3437               	retlw	55	;'7'
  7433  1207  3438               	retlw	56	;'8'
  7434  1208  3439               	retlw	57	;'9'
  7435  1209  3461               	retlw	97	;'a'
  7436  120A  3462               	retlw	98	;'b'
  7437  120B  3463               	retlw	99	;'c'
  7438  120C  3464               	retlw	100	;'d'
  7439  120D  3465               	retlw	101	;'e'
  7440  120E  3466               	retlw	102	;'f'
  7441  120F  3400               	retlw	0
  7442                           
  7443                           	psect	stringtext17
  7444  1210                     __pstringtext17:	
  7445  1210                     STR_7:	
  7446  1210  3473               	retlw	115	;'s'
  7447  1211  3465               	retlw	101	;'e'
  7448  1212  3474               	retlw	116	;'t'
  7449  1213  3420               	retlw	32	;' '
  7450  1214  3469               	retlw	105	;'i'
  7451  1215  3470               	retlw	112	;'p'
  7452  1216  3420               	retlw	32	;' '
  7453  1217  3464               	retlw	100	;'d'
  7454  1218  3468               	retlw	104	;'h'
  7455  1219  3463               	retlw	99	;'c'
  7456  121A  3470               	retlw	112	;'p'
  7457  121B  3420               	retlw	32	;' '
  7458  121C  3431               	retlw	49	;'1'
  7459  121D  340D               	retlw	13
  7460  121E  340A               	retlw	10
  7461  121F  3400               	retlw	0
  7462                           
  7463                           	psect	stringtext18
  7464  1220                     __pstringtext18:	
  7465  1220                     STR_5:	
  7466  1220  3466               	retlw	102	;'f'
  7467  1221  3461               	retlw	97	;'a'
  7468  1222  3463               	retlw	99	;'c'
  7469  1223  3474               	retlw	116	;'t'
  7470  1224  346F               	retlw	111	;'o'
  7471  1225  3472               	retlw	114	;'r'
  7472  1226  3479               	retlw	121	;'y'
  7473  1227  3420               	retlw	32	;' '
  7474  1228  3452               	retlw	82	;'R'
  7475  1229  3445               	retlw	69	;'E'
  7476  122A  3453               	retlw	83	;'S'
  7477  122B  3445               	retlw	69	;'E'
  7478  122C  3454               	retlw	84	;'T'
  7479  122D  340D               	retlw	13
  7480  122E  340A               	retlw	10
  7481  122F  3400               	retlw	0
  7482                           
  7483                           	psect	stringtext19
  7484  1230                     __pstringtext19:	
  7485  1230                     STR_28:	
  7486  1230  3443               	retlw	67	;'C'
  7487  1231  3434               	retlw	52	;'4'
  7488  1232  342D               	retlw	45	;'-'
  7489  1233  3432               	retlw	50	;'2'
  7490  1234  342D               	retlw	45	;'-'
  7491  1235  3435               	retlw	53	;'5'
  7492  1236  3434               	retlw	52	;'4'
  7493  1237  3433               	retlw	51	;'3'
  7494  1238  345F               	retlw	95	;'_'
  7495  1239  3457               	retlw	87	;'W'
  7496  123A  344C               	retlw	76	;'L'
  7497  123B  3441               	retlw	65	;'A'
  7498  123C  344E               	retlw	78	;'N'
  7499  123D  3400               	retlw	0
  7500                           
  7501                           	psect	stringtext20
  7502  123E                     __pstringtext20:	
  7503  123E                     STR_26:	
  7504  123E  3476               	retlw	118	;'v'
  7505  123F  3461               	retlw	97	;'a'
  7506  1240  346C               	retlw	108	;'l'
  7507  1241  3469               	retlw	105	;'i'
  7508  1242  3464               	retlw	100	;'d'
  7509  1243  3461               	retlw	97	;'a'
  7510  1244  3474               	retlw	116	;'t'
  7511  1245  3465               	retlw	101	;'e'
  7512  1246  3420               	retlw	32	;' '
  7513  1247  3425               	retlw	37	;'%'
  7514  1248  3430               	retlw	48	;'0'
  7515  1249  3433               	retlw	51	;'3'
  7516  124A  3464               	retlw	100	;'d'
  7517  124B  3400               	retlw	0
  7518                           
  7519                           	psect	stringtext21
  7520  124C                     __pstringtext21:	
  7521  124C                     STR_15:	
  7522  124C  344B               	retlw	75	;'K'
  7523  124D  346E               	retlw	110	;'n'
  7524  124E  346F               	retlw	111	;'o'
  7525  124F  3463               	retlw	99	;'c'
  7526  1250  346B               	retlw	107	;'k'
  7527  1251  3420               	retlw	32	;' '
  7528  1252  344B               	retlw	75	;'K'
  7529  1253  346E               	retlw	110	;'n'
  7530  1254  346F               	retlw	111	;'o'
  7531  1255  3463               	retlw	99	;'c'
  7532  1256  346B               	retlw	107	;'k'
  7533  1257  340D               	retlw	13
  7534  1258  340A               	retlw	10
  7535  1259  3400               	retlw	0
  7536                           
  7537                           	psect	stringtext22
  7538  125A                     __pstringtext22:	
  7539  125A                     STR_13:	
  7540  125A  346F               	retlw	111	;'o'
  7541  125B  3470               	retlw	112	;'p'
  7542  125C  3465               	retlw	101	;'e'
  7543  125D  346E               	retlw	110	;'n'
  7544  125E  3420               	retlw	32	;' '
  7545  125F  3425               	retlw	37	;'%'
  7546  1260  3473               	retlw	115	;'s'
  7547  1261  3420               	retlw	32	;' '
  7548  1262  3425               	retlw	37	;'%'
  7549  1263  3473               	retlw	115	;'s'
  7550  1264  340D               	retlw	13
  7551  1265  340A               	retlw	10
  7552  1266  3400               	retlw	0
  7553                           
  7554                           	psect	stringtext23
  7555  1267                     __pstringtext23:	
  7556  1267                     STR_22:	
  7557  1267  3431               	retlw	49	;'1'
  7558  1268  3439               	retlw	57	;'9'
  7559  1269  3432               	retlw	50	;'2'
  7560  126A  342E               	retlw	46	;'.'
  7561  126B  3431               	retlw	49	;'1'
  7562  126C  3436               	retlw	54	;'6'
  7563  126D  3438               	retlw	56	;'8'
  7564  126E  342E               	retlw	46	;'.'
  7565  126F  3431               	retlw	49	;'1'
  7566  1270  342E               	retlw	46	;'.'
  7567  1271  3437               	retlw	55	;'7'
  7568  1272  3400               	retlw	0
  7569                           
  7570                           	psect	stringtext24
  7571  1273                     __pstringtext24:	
  7572  1273                     STR_27:	
  7573  1273  346B               	retlw	107	;'k'
  7574  1274  346E               	retlw	110	;'n'
  7575  1275  346F               	retlw	111	;'o'
  7576  1276  3463               	retlw	99	;'c'
  7577  1277  346B               	retlw	107	;'k'
  7578  1278  3420               	retlw	32	;' '
  7579  1279  3425               	retlw	37	;'%'
  7580  127A  3430               	retlw	48	;'0'
  7581  127B  3433               	retlw	51	;'3'
  7582  127C  3464               	retlw	100	;'d'
  7583  127D  3400               	retlw	0
  7584                           
  7585                           	psect	stringtext25
  7586  1288                     __pstringtext25:	
  7587  1288                     STR_29:	
  7588  1288  3448               	retlw	72	;'H'
  7589  1289  3440               	retlw	64	;'@'
  7590  128A  3463               	retlw	99	;'c'
  7591  128B  346B               	retlw	107	;'k'
  7592  128C  3465               	retlw	101	;'e'
  7593  128D  3472               	retlw	114	;'r'
  7594  128E  3431               	retlw	49	;'1'
  7595  128F  3430               	retlw	48	;'0'
  7596  1290  3431               	retlw	49	;'1'
  7597  1291  3400               	retlw	0
  7598                           
  7599                           	psect	stringtext26
  7600  1292                     __pstringtext26:	
  7601  1292                     STR_25:	
  7602  1292  3470               	retlw	112	;'p'
  7603  1293  3461               	retlw	97	;'a'
  7604  1294  3469               	retlw	105	;'i'
  7605  1295  3472               	retlw	114	;'r'
  7606  1296  3420               	retlw	32	;' '
  7607  1297  3425               	retlw	37	;'%'
  7608  1298  3430               	retlw	48	;'0'
  7609  1299  3433               	retlw	51	;'3'
  7610  129A  3464               	retlw	100	;'d'
  7611  129B  3400               	retlw	0
  7612                           
  7613                           	psect	stringtext27
  7614  129C                     __pstringtext27:	
  7615  129C                     STR_17:	
  7616  129C  3444               	retlw	68	;'D'
  7617  129D  346F               	retlw	111	;'o'
  7618  129E  3463               	retlw	99	;'c'
  7619  129F  3474               	retlw	116	;'t'
  7620  12A0  346F               	retlw	111	;'o'
  7621  12A1  3472               	retlw	114	;'r'
  7622  12A2  340D               	retlw	13
  7623  12A3  340A               	retlw	10
  7624  12A4  3400               	retlw	0
  7625                           
  7626                           	psect	stringtext28
  7627  12A5                     __pstringtext28:	
  7628  12A5                     STR_3:	
  7629  12A5  3472               	retlw	114	;'r'
  7630  12A6  3465               	retlw	101	;'e'
  7631  12A7  3462               	retlw	98	;'b'
  7632  12A8  346F               	retlw	111	;'o'
  7633  12A9  346F               	retlw	111	;'o'
  7634  12AA  3474               	retlw	116	;'t'
  7635  12AB  340D               	retlw	13
  7636  12AC  340A               	retlw	10
  7637  12AD  3400               	retlw	0
  7638                           
  7639                           	psect	stringtext29
  7640  12B6                     __pstringtext29:	
  7641  12B6                     STR_14:	
  7642  12B6  3450               	retlw	80	;'P'
  7643  12B7  3472               	retlw	114	;'r'
  7644  12B8  346F               	retlw	111	;'o'
  7645  12B9  3463               	retlw	99	;'c'
  7646  12BA  3465               	retlw	101	;'e'
  7647  12BB  3465               	retlw	101	;'e'
  7648  12BC  3464               	retlw	100	;'d'
  7649  12BD  3400               	retlw	0
  7650                           
  7651                           	psect	stringtext30
  7652  12C5                     __pstringtext30:	
  7653  12C5                     STR_30:	
  7654  12C5  3428               	retlw	40	;'('
  7655  12C6  346E               	retlw	110	;'n'
  7656  12C7  3475               	retlw	117	;'u'
  7657  12C8  346C               	retlw	108	;'l'
  7658  12C9  346C               	retlw	108	;'l'
  7659  12CA  3429               	retlw	41	;')'
  7660  12CB  3400               	retlw	0
  7661                           
  7662                           	psect	stringtext31
  7663  12CC                     __pstringtext31:	
  7664  12CC                     STR_21:	
  7665  12CC  3453               	retlw	83	;'S'
  7666  12CD  3474               	retlw	116	;'t'
  7667  12CE  3461               	retlw	97	;'a'
  7668  12CF  3474               	retlw	116	;'t'
  7669  12D0  343A               	retlw	58	;':'
  7670  12D1  3420               	retlw	32	;' '
  7671  12D2  3400               	retlw	0
  7672                           
  7673                           	psect	stringtext32
  7674  12D3                     __pstringtext32:	
  7675  12D3                     STR_16:	
  7676  12D3  3474               	retlw	116	;'t'
  7677  12D4  3468               	retlw	104	;'h'
  7678  12D5  3465               	retlw	101	;'e'
  7679  12D6  3472               	retlw	114	;'r'
  7680  12D7  3465               	retlw	101	;'e'
  7681  12D8  343F               	retlw	63	;'?'
  7682  12D9  3400               	retlw	0
  7683                           
  7684                           	psect	stringtext33
  7685  12DA                     __pstringtext33:	
  7686  12DA                     STR_4:	
  7687  12DA  3473               	retlw	115	;'s'
  7688  12DB  3461               	retlw	97	;'a'
  7689  12DC  3476               	retlw	118	;'v'
  7690  12DD  3465               	retlw	101	;'e'
  7691  12DE  340D               	retlw	13
  7692  12DF  340A               	retlw	10
  7693  12E0  3400               	retlw	0
  7694                           
  7695                           	psect	stringtext34
  7696  12E1                     __pstringtext34:	
  7697  12E1                     STR_2:	
  7698  12E1  3465               	retlw	101	;'e'
  7699  12E2  3478               	retlw	120	;'x'
  7700  12E3  3469               	retlw	105	;'i'
  7701  12E4  3474               	retlw	116	;'t'
  7702  12E5  340D               	retlw	13
  7703  12E6  340A               	retlw	10
  7704  12E7  3400               	retlw	0
  7705                           
  7706                           	psect	stringtext35
  7707  12EE                     __pstringtext35:	
  7708  12EE                     STR_12:	
  7709  12EE  3449               	retlw	73	;'I'
  7710  12EF  3446               	retlw	70	;'F'
  7711  12F0  343D               	retlw	61	;'='
  7712  12F1  3455               	retlw	85	;'U'
  7713  12F2  3450               	retlw	80	;'P'
  7714  12F3  3400               	retlw	0
  7715                           
  7716                           	psect	stringtext36
  7717  12FE                     __pstringtext36:	
  7718  12FE                     STR_23:	
  7719  12FE  3431               	retlw	49	;'1'
  7720  12FF  3433               	retlw	51	;'3'
  7721  1300  3433               	retlw	51	;'3'
  7722  1301  3435               	retlw	53	;'5'
  7723  1302  3400               	retlw	0
  7724                           
  7725                           	psect	stringtext37
  7726  1303                     __pstringtext37:	
  7727  1303                     STR_18:	
  7728  1303  3477               	retlw	119	;'w'
  7729  1304  3468               	retlw	104	;'h'
  7730  1305  346F               	retlw	111	;'o'
  7731  1306  343F               	retlw	63	;'?'
  7732  1307  3400               	retlw	0
  7733                           
  7734                           	psect	stringtext38
  7735  1310                     __pstringtext38:	
  7736  1310                     STR_1:	
  7737  1310  3424               	retlw	36	;'$'
  7738  1311  3424               	retlw	36	;'$'
  7739  1312  3424               	retlw	36	;'$'
  7740  1313  3400               	retlw	0
  7741                           
  7742                           	psect	stringtext39
  7743  0000                     __pstringtext39:	
  7744  125A                     
  7745                           ; #config settings
  7746  0000                     
  7747                           	psect	cinit
  7748  0820                     start_initialization:	
  7749  0820                     __initialization:	
  7750                           
  7751                           ; Initialize objects allocated to BANK1
  7752  0820  3068               	movlw	low __pidataBANK1
  7753  0821  0084               	movwf	4
  7754  0822  3080               	movlw	(high __pidataBANK1)| (0+128)
  7755  0823  0085               	movwf	5
  7756  0824  30A0               	movlw	low __pdataBANK1
  7757  0825  0086               	movwf	6
  7758  0826  3000               	movlw	high __pdataBANK1
  7759  0827  0087               	movwf	7
  7760  0828  301E               	movlw	30
  7761  0829  3181  2116  3188   	fcall	init_ram
  7762                           
  7763                           ; Initialize objects allocated to BANK2
  7764  082C  30E7               	movlw	low __pidataBANK2
  7765  082D  0084               	movwf	4
  7766  082E  3080               	movlw	(high __pidataBANK2)| (0+128)
  7767  082F  0085               	movwf	5
  7768  0830  3020               	movlw	low __pdataBANK2
  7769  0831  0086               	movwf	6
  7770  0832  3001               	movlw	high __pdataBANK2
  7771  0833  0087               	movwf	7
  7772  0834  300D               	movlw	13
  7773  0835  3181  2116  3188   	fcall	init_ram
  7774  0838  30BE               	movlw	low __pbssBANK1
  7775                           
  7776                           ; Clear objects allocated to COMMON
  7777  0839  01FC               	clrf	__pbssCOMMON& (0+127)
  7778                           
  7779                           ; Clear objects allocated to BANK0
  7780  083A  01EE               	clrf	__pbssBANK0& (0+127)
  7781  083B  01EF               	clrf	(__pbssBANK0+1)& (0+127)
  7782                           
  7783                           ; Clear objects allocated to BANK1
  7784  083C  0084               	movwf	4
  7785  083D  3000               	movlw	high __pbssBANK1
  7786  083E  0085               	movwf	5
  7787  083F  3015               	movlw	21
  7788  0840  3181  211C  3188   	fcall	clear_ram0
  7789  0843                     end_of_initialization:	
  7790                           ;End of C runtime variable initialization code
  7791                           
  7792  0843                     __end_of__initialization:	
  7793  0843  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7794  0844  0020               	movlb	0
  7795  0845  296D               	ljmp	_main	;jump to C main() function
  7796  0846                     __ptext34:	
  7797 ;; *************** function _WiFly_EnterCMDMode *****************
  7798 ;; Defined at:
  7799 ;;		line 97 in file "mcc_generated_files/WiFly.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;		None
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;		None
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  1    wreg      void 
  7806 ;; Registers used:
  7807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7808 ;; Tracked objects:
  7809 ;;		On entry : 1F/1
  7810 ;;		On exit  : 1F/1
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;Total ram usage:        2 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; Hardware stack levels required when called:    7
  7820 ;; This function calls:
  7821 ;;		_Clear_RX_Buffer
  7822 ;;		_WiFly_CheckRecv
  7823 ;;		_WiFly_Send
  7824 ;; This function is called by:
  7825 ;;		_WiFly_CheckInCMD
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           
  7830                           ;psect for function _WiFly_EnterCMDMode
  7831  0846                     _WiFly_EnterCMDMode:	
  7832  0846                     l3550:	
  7833                           ;incstack = 0
  7834                           ; Regs used in _WiFly_EnterCMDMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7835                           
  7836                           
  7837                           ;WiFly.c: 98: Clear_RX_Buffer();
  7838  0846  22DD  3188         	fcall	_Clear_RX_Buffer
  7839                           
  7840                           ;WiFly.c: 99: _delay((unsigned long)((275)*(32000000/4000.0)));
  7841  0848  300C               	movlw	12
  7842  0849  00FA               	movwf	??_WiFly_EnterCMDMode+1
  7843  084A  302A               	movlw	42
  7844  084B  00F9               	movwf	??_WiFly_EnterCMDMode
  7845  084C  301A               	movlw	26
  7846  084D                     u3577:	
  7847  084D  0B89               	decfsz	9,f
  7848  084E  284D               	goto	u3577
  7849  084F  0BF9               	decfsz	??_WiFly_EnterCMDMode,f
  7850  0850  284D               	goto	u3577
  7851  0851  0BFA               	decfsz	??_WiFly_EnterCMDMode+1,f
  7852  0852  284D               	goto	u3577
  7853  0853  3200               	nop2
  7854                           
  7855                           ;WiFly.c: 100: WiFly_Send("$$$");
  7856  0854  3010               	movlw	low (STR_1| (0+32768))
  7857  0855  00F2               	movwf	WiFly_Send@command
  7858  0856  3093               	movlw	high (STR_1| (0+32768))
  7859  0857  00F3               	movwf	WiFly_Send@command+1
  7860  0858  2691  3188         	fcall	_WiFly_Send
  7861                           
  7862                           ;WiFly.c: 101: WiFly_CheckRecv(cmdStr);
  7863  085A  300C               	movlw	low (_cmdStr| (0+32768))
  7864  085B  00F6               	movwf	WiFly_CheckRecv@chkString
  7865  085C  3093               	movlw	high (_cmdStr| (0+32768))
  7866  085D  00F7               	movwf	WiFly_CheckRecv@chkString+1
  7867  085E  20DB  3188         	fcall	_WiFly_CheckRecv
  7868                           
  7869                           ;WiFly.c: 102: _delay((unsigned long)((275)*(32000000/4000.0)));
  7870  0860  300C               	movlw	12
  7871  0861  00FA               	movwf	??_WiFly_EnterCMDMode+1
  7872  0862  302A               	movlw	42
  7873  0863  00F9               	movwf	??_WiFly_EnterCMDMode
  7874  0864  301A               	movlw	26
  7875  0865                     u3587:	
  7876  0865  0B89               	decfsz	9,f
  7877  0866  2865               	goto	u3587
  7878  0867  0BF9               	decfsz	??_WiFly_EnterCMDMode,f
  7879  0868  2865               	goto	u3587
  7880  0869  0BFA               	decfsz	??_WiFly_EnterCMDMode+1,f
  7881  086A  2865               	goto	u3587
  7882  086B  3200               	nop2
  7883                           
  7884                           ;WiFly.c: 103: inCMD = 1;
  7885  086C  0021               	movlb	1	; select bank1
  7886  086D  01EA               	clrf	_inCMD^(0+128)
  7887  086E  0AEA               	incf	_inCMD^(0+128),f
  7888  086F  0008               	return
  7889  0870                     __end_of_WiFly_EnterCMDMode:	
  7890  0870                     __ptext5:	
  7891 ;; *************** function _WiFly_FactoryReset *****************
  7892 ;; Defined at:
  7893 ;;		line 155 in file "mcc_generated_files/WiFly.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;		None
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;		None
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  1    wreg      void 
  7900 ;; Registers used:
  7901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 1E/1
  7904 ;;		On exit  : 1F/1
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;Total ram usage:        2 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:   11
  7914 ;; This function calls:
  7915 ;;		_WiFly_CheckRecv
  7916 ;;		_WiFly_RebootCMD
  7917 ;;		_WiFly_SaveConfig
  7918 ;;		_WiFly_SendCMD
  7919 ;;		_WiFly_SendString
  7920 ;; This function is called by:
  7921 ;;		_WiFly_Example_InitializeAsClient
  7922 ;;		_main
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           
  7927                           ;psect for function _WiFly_FactoryReset
  7928  0870                     _WiFly_FactoryReset:	
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in _WiFly_FactoryReset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7932                           ;WiFly.c: 157: do { LATDbits.LATD2 = 0; } while(0);
  7933  0870  0020               	movlb	0	; select bank0
  7934  0871  1119               	bcf	25,2	;volatile
  7935                           
  7936                           ;WiFly.c: 158: inCMD = 0;
  7937  0872  0021               	movlb	1	; select bank1
  7938  0873  3003               	movlw	3
  7939  0874  01EA               	clrf	_inCMD^(0+128)
  7940                           
  7941                           ;WiFly.c: 159: _delay((unsigned long)((50)*(32000000/4000.0)));
  7942  0875  0020               	movlb	0	; select bank0
  7943  0876  00A7               	movwf	??_WiFly_FactoryReset+1
  7944  0877  3008               	movlw	8
  7945  0878  00A6               	movwf	??_WiFly_FactoryReset
  7946  0879  3077               	movlw	119
  7947  087A                     u3557:	
  7948  087A  0B89               	decfsz	9,f
  7949  087B  287A               	goto	u3557
  7950  087C  0BA6               	decfsz	??_WiFly_FactoryReset,f
  7951  087D  287A               	goto	u3557
  7952  087E  0BA7               	decfsz	??_WiFly_FactoryReset+1,f
  7953  087F  287A               	goto	u3557
  7954  0880  0020               	movlb	0	; select bank0
  7955  0881  1519               	bsf	25,2	;volatile
  7956                           
  7957                           ;WiFly.c: 161: WiFly_CheckRecv(hardRebootStr);
  7958  0882  27C6  3188         	fcall	PL30	;call to abstracted procedure
  7959  0884  20DB  3188         	fcall	_WiFly_CheckRecv
  7960                           
  7961                           ;WiFly.c: 163: WiFly_SendString("factory RESET\r\n");
  7962  0886  3020               	movlw	low (STR_5| (0+32768))
  7963  0887  00F5               	movwf	WiFly_SendString@sendString
  7964  0888  3092               	movlw	high (STR_5| (0+32768))
  7965  0889  00F6               	movwf	WiFly_SendString@sendString+1
  7966  088A  267E  3188         	fcall	_WiFly_SendString
  7967                           
  7968                           ;WiFly.c: 164: WiFly_RebootCMD();
  7969  088C  2096  3188         	fcall	_WiFly_RebootCMD
  7970                           
  7971                           ;WiFly.c: 165: WiFly_SendCMD("set uart mode 0x11\r\n");
  7972  088E  30B1               	movlw	low (STR_6| (0+32768))
  7973  088F  0020               	movlb	0	; select bank0
  7974  0890  00A4               	movwf	WiFly_SendCMD@cmd
  7975  0891  3091               	movlw	high (STR_6| (0+32768))
  7976  0892  00A5               	movwf	WiFly_SendCMD@cmd+1
  7977  0893  2685  3188         	fcall	_WiFly_SendCMD
  7978                           
  7979                           ;WiFly.c: 166: WiFly_SaveConfig();
  7980  0895  2EAB               	ljmp	l3868
  7981  0896                     __end_of_WiFly_FactoryReset:	
  7982  0896                     __ptext8:	
  7983 ;; *************** function _WiFly_RebootCMD *****************
  7984 ;; Defined at:
  7985 ;;		line 140 in file "mcc_generated_files/WiFly.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;		None
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;		None
  7990 ;; Return value:  Size  Location     Type
  7991 ;;                  1    wreg      void 
  7992 ;; Registers used:
  7993 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 1F/1
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;Total ram usage:        0 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; Hardware stack levels required when called:    9
  8006 ;; This function calls:
  8007 ;;		_WiFly_CheckInCMD
  8008 ;;		_WiFly_CheckRecv
  8009 ;;		_WiFly_SendString
  8010 ;; This function is called by:
  8011 ;;		_WiFly_SaveConfig
  8012 ;;		_WiFly_FactoryReset
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           
  8017                           ;psect for function _WiFly_RebootCMD
  8018  0896                     _WiFly_RebootCMD:	
  8019  0896                     l3852:	
  8020                           ;incstack = 0
  8021                           ; Regs used in _WiFly_RebootCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8022                           
  8023                           
  8024                           ;WiFly.c: 142: WiFly_CheckInCMD();
  8025  0896  23AD  3188         	fcall	_WiFly_CheckInCMD
  8026                           
  8027                           ;WiFly.c: 143: WiFly_SendString("reboot\r\n");
  8028  0898  30A5               	movlw	low (STR_3| (0+32768))
  8029  0899  00F5               	movwf	WiFly_SendString@sendString
  8030  089A  3092               	movlw	high (STR_3| (0+32768))
  8031  089B  00F6               	movwf	WiFly_SendString@sendString+1
  8032  089C  267E  3188         	fcall	_WiFly_SendString
  8033                           
  8034                           ;WiFly.c: 144: WiFly_CheckRecv(softRebootStr);
  8035  089E  30BE               	movlw	low (_softRebootStr| (0+32768))
  8036  089F  00F6               	movwf	WiFly_CheckRecv@chkString
  8037  08A0  3092               	movlw	high (_softRebootStr| (0+32768))
  8038  08A1  00F7               	movwf	WiFly_CheckRecv@chkString+1
  8039  08A2  20DB  3188         	fcall	_WiFly_CheckRecv
  8040                           
  8041                           ;WiFly.c: 145: WiFly_CheckRecv(hardRebootStr);
  8042  08A4  27C6  3188         	fcall	PL30	;call to abstracted procedure
  8043  08A6  20DB               	fcall	_WiFly_CheckRecv
  8044                           
  8045                           ;WiFly.c: 146: inCMD = 0;
  8046  08A7  0021               	movlb	1	; select bank1
  8047  08A8  01EA               	clrf	_inCMD^(0+128)
  8048  08A9  0008               	return
  8049  08AA                     __end_of_WiFly_RebootCMD:	
  8050  08AA                     __ptext3:	
  8051 ;; *************** function _WiFly_Example_InitializeAsClient *****************
  8052 ;; Defined at:
  8053 ;;		line 43 in file "mcc_generated_files/EXAMPLE_WiFly.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;  ssid            2   70[BANK0 ] PTR const unsigned char 
  8056 ;;		 -> STR_28(14), 
  8057 ;;  password        2   72[BANK0 ] PTR const unsigned char 
  8058 ;;		 -> STR_29(10), 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;		None
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1    wreg      void 
  8063 ;; Registers used:
  8064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 1F/0
  8067 ;;		On exit  : 1F/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8070 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8074 ;;Total ram usage:        4 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:   12
  8077 ;; This function calls:
  8078 ;;		_WiFly_CheckRecv
  8079 ;;		_WiFly_FactoryReset
  8080 ;;		_WiFly_SaveConfig
  8081 ;;		_WiFly_SendCMD
  8082 ;;		_WiFly_SendCMD_SingleArg
  8083 ;;		_WiFly_SendString
  8084 ;; This function is called by:
  8085 ;;		_connect_network
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           
  8090                           ;psect for function _WiFly_Example_InitializeAsClient
  8091  08AA                     _WiFly_Example_InitializeAsClient:	
  8092  08AA                     l601:	
  8093                           ;incstack = 0
  8094                           ; Regs used in _WiFly_Example_InitializeAsClient: [wreg-fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8095                           ;EXAMPLE_WiFly.c: 44: do { LATDbits.LATD3 = 1; } while(0);
  8096                           
  8097  08AA  1599               	bsf	25,3	;volatile
  8098                           
  8099                           ;EXAMPLE_WiFly.c: 45: WiFly_FactoryReset();
  8100  08AB  2070  3188         	fcall	_WiFly_FactoryReset
  8101                           
  8102                           ;EXAMPLE_WiFly.c: 47: WiFly_SendCMD("set ip dhcp 1\r\n");
  8103  08AD  3010               	movlw	low (STR_7| (0+32768))
  8104  08AE  0020               	movlb	0	; select bank0
  8105  08AF  00A4               	movwf	WiFly_SendCMD@cmd
  8106  08B0  3092               	movlw	high (STR_7| (0+32768))
  8107  08B1  00A5               	movwf	WiFly_SendCMD@cmd+1
  8108  08B2  2685  3188         	fcall	_WiFly_SendCMD
  8109                           
  8110                           ;EXAMPLE_WiFly.c: 48: WiFly_SendCMD_SingleArg("set wlan passphrase %s\r\n", password);
  8111  08B4  3083               	movlw	low (STR_8| (0+32768))
  8112  08B5  00BA               	movwf	WiFly_SendCMD_SingleArg@cmdFormat
  8113  08B6  3091               	movlw	high (STR_8| (0+32768))
  8114  08B7  00BB               	movwf	WiFly_SendCMD_SingleArg@cmdFormat+1
  8115  08B8  0869               	movf	WiFly_Example_InitializeAsClient@password+1,w
  8116  08B9  00BD               	movwf	WiFly_SendCMD_SingleArg@arg+1
  8117  08BA  0868               	movf	WiFly_Example_InitializeAsClient@password,w
  8118  08BB  00BC               	movwf	WiFly_SendCMD_SingleArg@arg
  8119  08BC  2111  3188         	fcall	_WiFly_SendCMD_SingleArg
  8120                           
  8121                           ;EXAMPLE_WiFly.c: 49: WiFly_SendCMD_SingleArg("set wlan ssid %s\r\n", ssid);
  8122  08BE  30DA               	movlw	low (STR_9| (0+32768))
  8123  08BF  00BA               	movwf	WiFly_SendCMD_SingleArg@cmdFormat
  8124  08C0  3091               	movlw	high (STR_9| (0+32768))
  8125  08C1  00BB               	movwf	WiFly_SendCMD_SingleArg@cmdFormat+1
  8126  08C2  0867               	movf	WiFly_Example_InitializeAsClient@ssid+1,w
  8127  08C3  00BD               	movwf	WiFly_SendCMD_SingleArg@arg+1
  8128  08C4  0866               	movf	WiFly_Example_InitializeAsClient@ssid,w
  8129  08C5  00BC               	movwf	WiFly_SendCMD_SingleArg@arg
  8130  08C6  2111  3188         	fcall	_WiFly_SendCMD_SingleArg
  8131                           
  8132                           ;EXAMPLE_WiFly.c: 50: WiFly_SendCMD("set wlan join 1\r\n");
  8133  08C8  30ED               	movlw	low (STR_10| (0+32768))
  8134  08C9  00A4               	movwf	WiFly_SendCMD@cmd
  8135  08CA  3091               	movlw	high (STR_10| (0+32768))
  8136  08CB  00A5               	movwf	WiFly_SendCMD@cmd+1
  8137  08CC  2685  3188         	fcall	_WiFly_SendCMD
  8138                           
  8139                           ;EXAMPLE_WiFly.c: 51: WiFly_SendString("set ip protocol 08\r\n");
  8140  08CE  309C               	movlw	low (STR_11| (0+32768))
  8141  08CF  00F5               	movwf	WiFly_SendString@sendString
  8142  08D0  3091               	movlw	high (STR_11| (0+32768))
  8143  08D1  00F6               	movwf	WiFly_SendString@sendString+1
  8144  08D2  267E  3188         	fcall	_WiFly_SendString
  8145                           
  8146                           ;EXAMPLE_WiFly.c: 52: WiFly_SaveConfig();
  8147  08D4  26AB  3188         	fcall	_WiFly_SaveConfig
  8148                           
  8149                           ;EXAMPLE_WiFly.c: 53: WiFly_CheckRecv("IF=UP");
  8150  08D6  30EE               	movlw	low (STR_12| (0+32768))
  8151  08D7  00F6               	movwf	WiFly_CheckRecv@chkString
  8152  08D8  3092               	movlw	high (STR_12| (0+32768))
  8153  08D9  00F7               	movwf	WiFly_CheckRecv@chkString+1
  8154  08DA  28DB               	ljmp	l3536
  8155  08DB                     __end_of_WiFly_Example_InitializeAsClient:	
  8156  08DB                     __ptext35:	
  8157 ;; *************** function _WiFly_CheckRecv *****************
  8158 ;; Defined at:
  8159 ;;		line 79 in file "mcc_generated_files/WiFly.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;  chkString       2    6[COMMON] PTR const unsigned char 
  8162 ;;		 -> openStr(5), STR_12(6), hardRebootStr(6), softRebootStr(7), 
  8163 ;;		 -> aokStr(4), endStr(5), cmdStr(4), 
  8164 ;; Auto vars:     Size  Location     Type
  8165 ;;  i               2    2[BANK0 ] unsigned int 
  8166 ;;  length          2    0[BANK0 ] unsigned int 
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  1    wreg      void 
  8169 ;; Registers used:
  8170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8171 ;; Tracked objects:
  8172 ;;		On entry : 0/1
  8173 ;;		On exit  : 1F/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8176 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;Total ram usage:        7 bytes
  8181 ;; Hardware stack levels used:    1
  8182 ;; Hardware stack levels required when called:    6
  8183 ;; This function calls:
  8184 ;;		_EUSART_Read
  8185 ;;		_EUSART_is_rx_ready
  8186 ;;		_strlen
  8187 ;; This function is called by:
  8188 ;;		_WiFly_EnterCMDMode
  8189 ;;		_WiFly_SendCMD_SingleArg
  8190 ;;		_WiFly_SendCMD
  8191 ;;		_WiFly_RebootCMD
  8192 ;;		_WiFly_FactoryReset
  8193 ;;		_WiFly_Example_InitializeAsClient
  8194 ;; This function uses a non-reentrant model
  8195 ;;
  8196                           
  8197                           
  8198                           ;psect for function _WiFly_CheckRecv
  8199  08DB                     _WiFly_CheckRecv:	
  8200  08DB                     l3536:	
  8201                           ;incstack = 0
  8202                           ; Regs used in _WiFly_CheckRecv: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8203                           
  8204                           
  8205                           ;WiFly.c: 80: size_t length = strlen(chkString);
  8206  08DB  0877               	movf	WiFly_CheckRecv@chkString+1,w
  8207  08DC  00F2               	movwf	strlen@s+1
  8208  08DD  0876               	movf	WiFly_CheckRecv@chkString,w
  8209  08DE  00F1               	movwf	strlen@s
  8210  08DF  2360  3188         	fcall	_strlen
  8211  08E1  0872               	movf	?_strlen+1,w
  8212  08E2  0020               	movlb	0	; select bank0
  8213  08E3  00A1               	movwf	WiFly_CheckRecv@length+1
  8214  08E4  0871               	movf	?_strlen,w
  8215  08E5  00A0               	movwf	WiFly_CheckRecv@length
  8216                           
  8217                           ;WiFly.c: 81: size_t i = 0;
  8218  08E6  01A2               	clrf	WiFly_CheckRecv@i
  8219  08E7  01A3               	clrf	WiFly_CheckRecv@i+1
  8220                           
  8221                           ;WiFly.c: 83: while (i < length) {
  8222  08E8  2907               	goto	l3548
  8223  08E9                     l3540:	
  8224                           
  8225                           ;WiFly.c: 85: if (uart[WiFly].Read() == chkString[i]) {
  8226  08E9  0876               	movf	WiFly_CheckRecv@chkString,w
  8227  08EA  0020               	movlb	0	; select bank0
  8228  08EB  0722               	addwf	WiFly_CheckRecv@i,w
  8229  08EC  0084               	movwf	4
  8230  08ED  0877               	movf	WiFly_CheckRecv@chkString+1,w
  8231  08EE  3D23               	addwfc	WiFly_CheckRecv@i+1,w
  8232  08EF  0085               	movwf	5
  8233  08F0  0800               	movf	0,w	;code access
  8234  08F1  00F8               	movwf	??_WiFly_CheckRecv
  8235  08F2  27B4               	fcall	PL22	;call to abstracted procedure
  8236  08F3  008A               	movwf	10
  8237  08F4  3F00               	moviw [0]fsr0
  8238  08F5  000A               	callw
  8239  08F6  3188               	pagesel	$
  8240  08F7  0678               	xorwf	??_WiFly_CheckRecv,w
  8241  08F8  1D03               	skipz
  8242  08F9  28FF               	goto	l3544
  8243                           
  8244                           ;WiFly.c: 86: i++;
  8245  08FA  0020               	movlb	0	; select bank0
  8246  08FB  0AA2               	incf	WiFly_CheckRecv@i,f
  8247  08FC  1903               	skipnz
  8248  08FD  0AA3               	incf	WiFly_CheckRecv@i+1,f
  8249                           
  8250                           ;WiFly.c: 87: } else {
  8251  08FE  2902               	goto	l3546
  8252  08FF                     l3544:	
  8253                           
  8254                           ;WiFly.c: 88: i = 0;
  8255  08FF  0020               	movlb	0	; select bank0
  8256  0900  01A2               	clrf	WiFly_CheckRecv@i
  8257  0901  01A3               	clrf	WiFly_CheckRecv@i+1
  8258  0902                     l3546:	
  8259  0902  22B6  3188         	fcall	_EUSART_is_rx_ready
  8260  0904  3A00               	xorlw	0
  8261  0905  1D03               	skipz
  8262  0906  28E9               	goto	l3540
  8263  0907                     l3548:	
  8264  0907  0020               	movlb	0	; select bank0
  8265  0908  0821               	movf	WiFly_CheckRecv@length+1,w
  8266  0909  0223               	subwf	WiFly_CheckRecv@i+1,w
  8267  090A  1D03               	skipz
  8268  090B  290E               	goto	u2735
  8269  090C  0820               	movf	WiFly_CheckRecv@length,w
  8270  090D  0222               	subwf	WiFly_CheckRecv@i,w
  8271  090E                     u2735:	
  8272  090E  1803               	btfsc	3,0
  8273  090F  0008               	return
  8274  0910  2902               	goto	l3546
  8275  0911                     __end_of_WiFly_CheckRecv:	
  8276  0911                     __ptext4:	
  8277 ;; *************** function _WiFly_SendCMD_SingleArg *****************
  8278 ;; Defined at:
  8279 ;;		line 115 in file "mcc_generated_files/WiFly.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;  cmdFormat       2   26[BANK0 ] PTR const unsigned char 
  8282 ;;		 -> STR_9(19), STR_8(25), 
  8283 ;;  arg             2   28[BANK0 ] PTR const unsigned char 
  8284 ;;		 -> STR_29(10), STR_28(14), 
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;  txBuffer       40   30[BANK0 ] unsigned char [40]
  8287 ;; Return value:  Size  Location     Type
  8288 ;;                  1    wreg      void 
  8289 ;; Registers used:
  8290 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 1F/0
  8293 ;;		On exit  : 1F/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8296 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Totals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;Total ram usage:       44 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    9
  8303 ;; This function calls:
  8304 ;;		_Clear_RX_Buffer
  8305 ;;		_WiFly_CheckInCMD
  8306 ;;		_WiFly_CheckRecv
  8307 ;;		_WiFly_Send
  8308 ;;		_sprintf
  8309 ;; This function is called by:
  8310 ;;		_WiFly_Example_InitializeAsClient
  8311 ;; This function uses a non-reentrant model
  8312 ;;
  8313                           
  8314                           
  8315                           ;psect for function _WiFly_SendCMD_SingleArg
  8316  0911                     _WiFly_SendCMD_SingleArg:	
  8317                           
  8318                           ;WiFly.c: 116: WiFly_CheckInCMD();
  8319                           
  8320                           ;incstack = 0
  8321                           ; Regs used in _WiFly_SendCMD_SingleArg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8322  0911  23AD  3188         	fcall	_WiFly_CheckInCMD
  8323                           
  8324                           ;WiFly.c: 117: Clear_RX_Buffer();
  8325  0913  22DD  3188         	fcall	_Clear_RX_Buffer
  8326                           
  8327                           ;WiFly.c: 118: char txBuffer[40];
  8328                           ;WiFly.c: 119: sprintf(txBuffer, cmdFormat, arg);
  8329  0915  0020               	movlb	0	; select bank0
  8330  0916  083B               	movf	WiFly_SendCMD_SingleArg@cmdFormat+1,w
  8331  0917  00A2               	movwf	sprintf@f+1
  8332  0918  083A               	movf	WiFly_SendCMD_SingleArg@cmdFormat,w
  8333  0919  00A1               	movwf	sprintf@f
  8334  091A  083D               	movf	WiFly_SendCMD_SingleArg@arg+1,w
  8335  091B  00A4               	movwf	(low ((?_sprintf| 0+2))+1)
  8336  091C  083C               	movf	WiFly_SendCMD_SingleArg@arg,w
  8337  091D  00A3               	movwf	low ((?_sprintf| 0+2))
  8338  091E  303E               	movlw	(low (WiFly_SendCMD_SingleArg@txBuffer| 0))& (0+255)
  8339  091F  242D  3188         	fcall	_sprintf
  8340                           
  8341                           ;WiFly.c: 120: WiFly_Send(txBuffer);
  8342  0921  303E               	movlw	low WiFly_SendCMD_SingleArg@txBuffer
  8343  0922  00F2               	movwf	WiFly_Send@command
  8344  0923  3000               	movlw	high WiFly_SendCMD_SingleArg@txBuffer
  8345  0924  00F3               	movwf	WiFly_Send@command+1
  8346  0925  2691  3188         	fcall	_WiFly_Send
  8347                           
  8348                           ;WiFly.c: 121: WiFly_CheckRecv(aokStr);
  8349  0927  27CB  3188         	fcall	PL32	;call to abstracted procedure
  8350  0929  28DB               	ljmp	l3536
  8351  092A                     __end_of_WiFly_SendCMD_SingleArg:	
  8352  092A                     __ptext23:	
  8353 ;; *************** function _Knock *****************
  8354 ;; Defined at:
  8355 ;;		line 242 in file "main.c"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;		None
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;  knockString    10    2[BANK1 ] unsigned char [10]
  8360 ;;  returnVal       1   12[BANK1 ] unsigned char 
  8361 ;; Return value:  Size  Location     Type
  8362 ;;                  1    wreg      unsigned char 
  8363 ;; Registers used:
  8364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8365 ;; Tracked objects:
  8366 ;;		On entry : 1F/0
  8367 ;;		On exit  : 1F/10
  8368 ;;		Unchanged: 0/0
  8369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;Total ram usage:       13 bytes
  8375 ;; Hardware stack levels used:    1
  8376 ;; Hardware stack levels required when called:   12
  8377 ;; This function calls:
  8378 ;;		_RELAY_RL1_Disengage
  8379 ;;		_RELAY_RL1_Engage
  8380 ;;		_TMR4_StopTimer
  8381 ;;		_get_response
  8382 ;;		_goto_mode
  8383 ;;		_send_message
  8384 ;;		_sprintf
  8385 ;; This function is called by:
  8386 ;;		_main
  8387 ;; This function uses a non-reentrant model
  8388 ;;
  8389                           
  8390                           
  8391                           ;psect for function _Knock
  8392  092A                     _Knock:	
  8393                           
  8394                           ;main.c: 243: RELAY_RL1_Engage();
  8395                           
  8396                           ;incstack = 0
  8397                           ; Regs used in _Knock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8398  092A  22B4  3188         	fcall	_RELAY_RL1_Engage
  8399                           
  8400                           ;main.c: 244: uint8_t returnVal;
  8401                           ;main.c: 245: TMR4_StopTimer();
  8402  092C  228A  3188         	fcall	_TMR4_StopTimer
  8403                           
  8404                           ;main.c: 246: char knockString[] = "knock 123";
  8405  092E  30A0               	movlw	low Knock@F15448
  8406  092F  0086               	movwf	6
  8407  0930  3000               	movlw	high Knock@F15448
  8408  0931  0087               	movwf	7
  8409  0932  30D5               	movlw	low Knock@knockString
  8410  0933  0084               	movwf	4
  8411  0934  3000               	movlw	high Knock@knockString
  8412  0935  0085               	movwf	5
  8413  0936  300A               	movlw	10
  8414  0937  0021               	movlb	1	; select bank1
  8415  0938  00D3               	movwf	??_Knock^(0+128)
  8416  0939                     u3480:	
  8417  0939  0016               	moviw fsr1++
  8418  093A  001A               	movwi fsr0++
  8419  093B  0BD3               	decfsz	??_Knock^(0+128),f
  8420  093C  2939               	goto	u3480
  8421                           
  8422                           ;main.c: 247: sprintf(knockString, "knock %03d", UID);
  8423  093D  3073               	movlw	low (STR_27| (0+32768))
  8424  093E  0020               	movlb	0	; select bank0
  8425  093F  00A1               	movwf	sprintf@f
  8426  0940  3092               	movlw	high (STR_27| (0+32768))
  8427  0941  27AE  3188         	fcall	PL20	;call to abstracted procedure
  8428  0943  30D5               	movlw	(low (Knock@knockString| 0))& (0+255)
  8429  0944  01A4               	clrf	?_sprintf+3
  8430  0945  242D  3188         	fcall	_sprintf
  8431  0947                     l4138:	
  8432                           
  8433                           ;main.c: 249: send_message(knockString);
  8434  0947  30D5               	movlw	(low (Knock@knockString| 0))& (0+255)
  8435  0948  226B  3188         	fcall	_send_message
  8436                           
  8437                           ;main.c: 250: returnVal = get_response();
  8438  094A  2246  3188         	fcall	_get_response
  8439  094C  0021               	movlb	1	; select bank1
  8440  094D  00DF               	movwf	Knock@returnVal^(0+128)
  8441                           
  8442                           ;main.c: 251: if (returnVal == SUCCESS) {
  8443  094E  085F               	movf	Knock@returnVal^(0+128),w
  8444  094F  1D03               	btfss	3,2
  8445  0950  2953               	goto	l4146
  8446                           
  8447                           ;main.c: 252: goto_mode(PAIRED);
  8448  0951  3001               	movlw	1
  8449  0952  2954               	goto	L2
  8450  0953                     l4146:	
  8451                           ;main.c: 253: } else {
  8452                           
  8453                           
  8454                           ;main.c: 254: goto_mode(UNPAIRED);
  8455  0953  3002               	movlw	2
  8456  0954                     L2:	
  8457  0954  21F3  3188         	fcall	_goto_mode
  8458                           
  8459                           ;main.c: 255: }
  8460                           ;main.c: 256: } while ((returnVal == TX_ERROR));
  8461  0956  3002               	movlw	2
  8462  0957  0021               	movlb	1	; select bank1
  8463  0958  065F               	xorwf	Knock@returnVal^(0+128),w
  8464  0959  1903               	btfsc	3,2
  8465  095A  2947               	goto	l4138
  8466                           
  8467                           ;main.c: 257: WDTCON0bits.SWDTEN = 0;
  8468  095B  0030               	movlb	16	; select bank16
  8469  095C  100C               	bcf	12,0	;volatile
  8470                           
  8471                           ;main.c: 258: _delay((unsigned long)((1000)*(32000000/4000.0)));
  8472  095D  3029               	movlw	41
  8473  095E  0021               	movlb	1	; select bank1
  8474  095F  00D4               	movwf	(??_Knock^(0+128)+1)
  8475  0960  3096               	movlw	150
  8476  0961  00D3               	movwf	??_Knock^(0+128)
  8477  0962  307F               	movlw	127
  8478  0963                     u3567:	
  8479  0963  0B89               	decfsz	9,f
  8480  0964  2963               	goto	u3567
  8481  0965  0BD3               	decfsz	??_Knock^(0+128),f
  8482  0966  2963               	goto	u3567
  8483  0967  0BD4               	decfsz	(??_Knock^(0+128)+1),f
  8484  0968  2963               	goto	u3567
  8485                           
  8486                           ;main.c: 259: RELAY_RL1_Disengage();
  8487  0969  2728               	fcall	_RELAY_RL1_Disengage
  8488                           
  8489                           ;main.c: 260: WDTCON0bits.SWDTEN = 1;
  8490  096A  0030               	movlb	16	; select bank16
  8491  096B  140C               	bsf	12,0	;volatile
  8492  096C  0008               	return
  8493  096D                     __end_of_Knock:	
  8494  096D                     __pmaintext:	
  8495 ;;
  8496 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  8497 ;;
  8498 ;; *************** function _main *****************
  8499 ;; Defined at:
  8500 ;;		line 278 in file "main.c"
  8501 ;; Parameters:    Size  Location     Type
  8502 ;;		None
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;		None
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  1    wreg      void 
  8507 ;; Registers used:
  8508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8509 ;; Tracked objects:
  8510 ;;		On entry : B1F/0
  8511 ;;		On exit  : 1F/1
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;Total ram usage:        0 bytes
  8519 ;; Hardware stack levels required when called:   14
  8520 ;; This function calls:
  8521 ;;		_Knock
  8522 ;;		_Pair
  8523 ;;		_SYSTEM_Initialize
  8524 ;;		_TMR2_SetInterruptHandler
  8525 ;;		_TMR2_StartTimer
  8526 ;;		_TMR4_SetInterruptHandler
  8527 ;;		_TMR4_StopTimer
  8528 ;;		_Validate
  8529 ;;		_WiFly_FactoryReset
  8530 ;;		_connect_network
  8531 ;;		_eeprom_read
  8532 ;; This function is called by:
  8533 ;;		Startup code after reset
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           
  8538                           ;psect for function _main
  8539  096D                     _main:	
  8540                           
  8541                           ;main.c: 279: WDTCON0bits.SWDTEN = 0;
  8542                           
  8543                           ;incstack = 0
  8544                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8545  096D  0030               	movlb	16	; select bank16
  8546  096E  100C               	bcf	12,0	;volatile
  8547                           
  8548                           ;main.c: 281: SYSTEM_Initialize();
  8549  096F  23DA  3188         	fcall	_SYSTEM_Initialize
  8550                           
  8551                           ;main.c: 283: TMR2_SetInterruptHandler(blink);
  8552  0971  30D0               	movlw	low _blink
  8553  0972  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  8554  0973  300F               	movlw	high _blink
  8555  0974  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  8556  0975  23CE  3188         	fcall	_TMR2_SetInterruptHandler
  8557                           
  8558                           ;main.c: 284: TMR4_SetInterruptHandler(setFlag);
  8559  0977  300C               	movlw	low _setFlag
  8560  0978  00F1               	movwf	TMR4_SetInterruptHandler@InterruptHandler
  8561  0979  3001               	movlw	high _setFlag
  8562  097A  00F2               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
  8563  097B  23D4  3188         	fcall	_TMR4_SetInterruptHandler
  8564                           
  8565                           ;main.c: 290: (INTCONbits.GIE = 1);
  8566  097D  178B               	bsf	11,7	;volatile
  8567                           
  8568                           ;main.c: 293: (INTCONbits.PEIE = 1);
  8569  097E  170B               	bsf	11,6	;volatile
  8570                           
  8571                           ;main.c: 295: T2PR = 10;
  8572  097F  300A               	movlw	10
  8573  0980  0025               	movlb	5	; select bank5
  8574  0981  008D               	movwf	13	;volatile
  8575                           
  8576                           ;main.c: 297: TMR2_StartTimer();
  8577  0982  22B3  3188         	fcall	_TMR2_StartTimer
  8578                           
  8579                           ;main.c: 298: TMR4_StopTimer();
  8580  0984  228A  3188         	fcall	_TMR4_StopTimer
  8581                           
  8582                           ;main.c: 300: UID = eeprom_read(1);
  8583  0986  3001               	movlw	1
  8584  0987  2719  3188         	fcall	_eeprom_read
  8585  0989  0021               	movlb	1	; select bank1
  8586  098A  00E9               	movwf	_UID^(0+128)
  8587                           
  8588                           ;main.c: 302: WiFly_FactoryReset();
  8589  098B  2070  3188         	fcall	_WiFly_FactoryReset
  8590                           
  8591                           ;main.c: 304: connect_network("C4-2-543_WLAN", "H@cker101");
  8592  098D  3030               	movlw	low (STR_28| (0+32768))
  8593  098E  0020               	movlb	0	; select bank0
  8594  098F  00EA               	movwf	connect_network@ssid
  8595  0990  3092               	movlw	high (STR_28| (0+32768))
  8596  0991  00EB               	movwf	connect_network@ssid+1
  8597  0992  3088               	movlw	low (STR_29| (0+32768))
  8598  0993  00EC               	movwf	connect_network@passwd
  8599  0994  3092               	movlw	high (STR_29| (0+32768))
  8600  0995  00ED               	movwf	connect_network@passwd+1
  8601  0996  2710  3188         	fcall	_connect_network
  8602                           
  8603                           ;main.c: 306: if (UID == 0xFF) {
  8604  0998  0021               	movlb	1	; select bank1
  8605  0999  0F69               	incfsz	_UID^(0+128),w
  8606  099A  29A0               	goto	l4180
  8607                           
  8608                           ;main.c: 307: mode = UNPAIRED;
  8609  099B  3002               	movlw	2
  8610  099C  00D0               	movwf	_mode^(0+128)
  8611                           
  8612                           ;main.c: 308: Pair();
  8613  099D  21C1  3188         	fcall	_Pair
  8614                           
  8615                           ;main.c: 309: } else {
  8616  099F  29A2               	goto	l4182
  8617  09A0                     l4180:	
  8618                           
  8619                           ;main.c: 310: Validate();
  8620  09A0  2216  3188         	fcall	_Validate
  8621  09A2                     l4182:	
  8622                           
  8623                           ;main.c: 311: }
  8624                           ;main.c: 313: WDTCON0bits.SWDTEN = 1;
  8625  09A2  0030               	movlb	16	; select bank16
  8626  09A3  140C               	bsf	12,0	;volatile
  8627                           
  8628                           ;main.c: 317: switch (mode) {
  8629  09A4  29B5               	goto	l828
  8630  09A5                     l830:	
  8631                           ;main.c: 318: case UNPAIRED:
  8632                           
  8633                           
  8634                           ;main.c: 319: if (PORTCbits.RC5 == 0) {
  8635  09A5  0020               	movlb	0	; select bank0
  8636  09A6  1A8E               	btfsc	14,5	;volatile
  8637  09A7  29B5               	goto	l828
  8638                           
  8639                           ;main.c: 320: Pair();
  8640  09A8  21C1  3188         	fcall	_Pair
  8641  09AA  29B5               	goto	l828
  8642  09AB                     l4186:	
  8643                           
  8644                           ;main.c: 324: if (pingTime) {
  8645  09AB  084F               	movf	_pingTime^(0+128),w
  8646  09AC  1903               	btfsc	3,2
  8647  09AD  29B0               	goto	l4190
  8648                           
  8649                           ;main.c: 325: Validate();
  8650  09AE  2216  3188         	fcall	_Validate
  8651  09B0                     l4190:	
  8652                           
  8653                           ;main.c: 326: }
  8654                           ;main.c: 327: if (PORTBbits.RB4 == 0) {
  8655  09B0  0020               	movlb	0	; select bank0
  8656  09B1  1A0D               	btfsc	13,4	;volatile
  8657  09B2  29B5               	goto	l828
  8658                           
  8659                           ;main.c: 328: Knock();
  8660  09B3  212A  3188         	fcall	_Knock
  8661  09B5                     l828:	
  8662                           ;main.c: 315: while (1) {
  8663                           
  8664  09B5  0064               	clrwdt	;# 
  8665  09B6  0021               	movlb	1	; select bank1
  8666  09B7  0850               	movf	_mode^(0+128),w
  8667                           
  8668                           ; Switch size 1, requested type "space"
  8669                           ; Number of cases is 2, Range of values is 1 to 2
  8670                           ; switch strategies available:
  8671                           ; Name         Instructions Cycles
  8672                           ; simple_byte            7     4 (average)
  8673                           ; direct_byte           13     9 (fixed)
  8674                           ; jumptable            263     9 (fixed)
  8675                           ;	Chosen strategy is simple_byte
  8676  09B8  3A01               	xorlw	1	; case 1
  8677  09B9  1903               	skipnz
  8678  09BA  29AB               	goto	l4186
  8679  09BB  3A03               	xorlw	3	; case 2
  8680  09BC  1903               	skipnz
  8681  09BD  29A5               	goto	l830
  8682  09BE  29B5               	goto	l828
  8683  09BF  3180  2834         	ljmp	start
  8684  09C1                     __end_of_main:	
  8685  09C1                     __ptext21:	
  8686 ;; *************** function _Pair *****************
  8687 ;; Defined at:
  8688 ;;		line 207 in file "main.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;		None
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  pairString      9    0[BANK1 ] unsigned char [9]
  8693 ;;  returnVal       1    9[BANK1 ] unsigned char 
  8694 ;; Return value:  Size  Location     Type
  8695 ;;                  1    wreg      unsigned char 
  8696 ;; Registers used:
  8697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8698 ;; Tracked objects:
  8699 ;;		On entry : 1E/1
  8700 ;;		On exit  : 1A/0
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Totals:         0       1      10       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;Total ram usage:       11 bytes
  8708 ;; Hardware stack levels used:    1
  8709 ;; Hardware stack levels required when called:   12
  8710 ;; This function calls:
  8711 ;;		_WiFly_ReadChar
  8712 ;;		_eeprom_write
  8713 ;;		_get_response
  8714 ;;		_goto_mode
  8715 ;;		_send_message
  8716 ;;		_sprintf
  8717 ;; This function is called by:
  8718 ;;		_main
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           
  8723                           ;psect for function _Pair
  8724  09C1                     _Pair:	
  8725                           
  8726                           ;main.c: 208: uint8_t returnVal;
  8727                           ;main.c: 209: char pairString[] = "pair 123";
  8728                           
  8729                           ;incstack = 0
  8730                           ; Regs used in _Pair: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8731  09C1  30AA               	movlw	low Pair@F15440
  8732  09C2  0086               	movwf	6
  8733  09C3  3000               	movlw	high Pair@F15440
  8734  09C4  0087               	movwf	7
  8735  09C5  30D3               	movlw	low Pair@pairString
  8736  09C6  0084               	movwf	4
  8737  09C7  3000               	movlw	high Pair@pairString
  8738  09C8  0085               	movwf	5
  8739  09C9  3009               	movlw	9
  8740  09CA  0020               	movlb	0	; select bank0
  8741  09CB  00ED               	movwf	??_Pair
  8742  09CC                     u3420:	
  8743  09CC  0016               	moviw fsr1++
  8744  09CD  001A               	movwi fsr0++
  8745  09CE  0BED               	decfsz	??_Pair,f
  8746  09CF  29CC               	goto	u3420
  8747                           
  8748                           ;main.c: 210: sprintf(pairString, "pair %03d", UID);
  8749  09D0  3092               	movlw	low (STR_25| (0+32768))
  8750  09D1  00A1               	movwf	sprintf@f
  8751  09D2  3092               	movlw	high (STR_25| (0+32768))
  8752  09D3  27AE  3188         	fcall	PL20	;call to abstracted procedure
  8753  09D5  30D3               	movlw	(low (Pair@pairString| 0))& (0+255)
  8754  09D6  01A4               	clrf	?_sprintf+3
  8755  09D7  242D  3188         	fcall	_sprintf
  8756                           
  8757                           ;main.c: 211: send_message(pairString);
  8758  09D9  30D3               	movlw	(low (Pair@pairString| 0))& (0+255)
  8759  09DA  226B  3188         	fcall	_send_message
  8760                           
  8761                           ;main.c: 212: goto_mode(PAIRING);
  8762  09DC  3003               	movlw	3
  8763  09DD  21F3  3188         	fcall	_goto_mode
  8764                           
  8765                           ;main.c: 213: returnVal = get_response();
  8766  09DF  2246  3188         	fcall	_get_response
  8767  09E1  0021               	movlb	1	; select bank1
  8768  09E2  00DC               	movwf	Pair@returnVal^(0+128)
  8769                           
  8770                           ;main.c: 214: if (returnVal == SUCCESS) {
  8771  09E3  085C               	movf	Pair@returnVal^(0+128),w
  8772  09E4  1D03               	btfss	3,2
  8773  09E5  29F1               	goto	l4104
  8774                           
  8775                           ;main.c: 215: UID = WiFly_ReadChar();
  8776  09E6  225E  3188         	fcall	_WiFly_ReadChar
  8777  09E8  0021               	movlb	1	; select bank1
  8778  09E9  00E9               	movwf	_UID^(0+128)
  8779                           
  8780                           ;main.c: 216: eeprom_write(1, UID);
  8781  09EA  0869               	movf	_UID^(0+128),w
  8782  09EB  00F1               	movwf	eeprom_write@value
  8783  09EC  3001               	movlw	1
  8784  09ED  23B2  3188         	fcall	_eeprom_write
  8785                           
  8786                           ;main.c: 217: goto_mode(PAIRED);
  8787  09EF  3001               	movlw	1
  8788  09F0  29F3               	ljmp	_goto_mode
  8789  09F1                     l4104:	
  8790                           ;main.c: 218: } else {
  8791                           
  8792                           
  8793                           ;main.c: 219: goto_mode(UNPAIRED);
  8794  09F1  3002               	movlw	2
  8795  09F2  29F3               	ljmp	_goto_mode
  8796  09F3                     __end_of_Pair:	
  8797  09F3                     __ptext42:	
  8798 ;; *************** function _goto_mode *****************
  8799 ;; Defined at:
  8800 ;;		line 97 in file "main.c"
  8801 ;; Parameters:    Size  Location     Type
  8802 ;;  target          1    wreg     unsigned char 
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;  target          1    2[COMMON] unsigned char 
  8805 ;; Return value:  Size  Location     Type
  8806 ;;                  1    wreg      void 
  8807 ;; Registers used:
  8808 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/1
  8811 ;;		On exit  : 1A/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;Total ram usage:        1 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; Hardware stack levels required when called:    7
  8821 ;; This function calls:
  8822 ;;		_ClearIndicators
  8823 ;;		_SetIndication
  8824 ;;		_TMR2_StartTimer
  8825 ;;		_TMR2_StopTimer
  8826 ;;		_TMR4_StartTimer
  8827 ;;		_TMR4_StopTimer
  8828 ;; This function is called by:
  8829 ;;		_get_response
  8830 ;;		_send_message
  8831 ;;		_Pair
  8832 ;;		_Validate
  8833 ;;		_Knock
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function _goto_mode
  8839  09F3                     _goto_mode:	
  8840                           
  8841                           ;incstack = 0
  8842                           ; Regs used in _goto_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8843                           ;goto_mode@target stored from wreg
  8844  09F3  00F2               	movwf	goto_mode@target
  8845                           
  8846                           ;main.c: 98: mode = target;
  8847  09F4  0021               	movlb	1	; select bank1
  8848  09F5  00D0               	movwf	_mode^(0+128)
  8849                           
  8850                           ; Switch size 1, requested type "space"
  8851                           ; Number of cases is 4, Range of values is 1 to 4
  8852                           ; switch strategies available:
  8853                           ; Name         Instructions Cycles
  8854                           ; simple_byte           13     7 (average)
  8855                           ; direct_byte           17     9 (fixed)
  8856                           ; jumptable            263     9 (fixed)
  8857                           ;	Chosen strategy is simple_byte
  8858                           
  8859                           ;main.c: 117: break;
  8860                           
  8861                           ;main.c: 99: switch (mode) {
  8862  09F6  3A01               	xorlw	1	; case 1
  8863  09F7  1903               	skipnz
  8864  09F8  2A03               	goto	l3974
  8865  09F9  3A03               	xorlw	3	; case 2
  8866  09FA  1903               	skipnz
  8867  09FB  2A0F               	goto	l3988
  8868  09FC  3A01               	xorlw	1	; case 3
  8869  09FD  1903               	skipnz
  8870  09FE  2A0D               	goto	l3984
  8871  09FF  3A07               	xorlw	7	; case 4
  8872  0A00  1903               	skipnz
  8873  0A01  2A09               	goto	l3980
  8874  0A02  2A14               	goto	l741
  8875  0A03                     l3974:	
  8876                           
  8877                           ;main.c: 101: TMR2_StopTimer();
  8878  0A03  2215  3188         	fcall	_TMR2_StopTimer
  8879                           
  8880                           ;main.c: 102: SetIndication(1);
  8881  0A05  3001               	movlw	1
  8882  0A06  22B9  3188         	fcall	_SetIndication
  8883                           
  8884                           ;main.c: 103: TMR4_StartTimer();
  8885  0A08  2F07               	ljmp	l3588
  8886  0A09                     l3980:	
  8887                           ;main.c: 104: break;
  8888                           
  8889                           
  8890                           ;main.c: 106: T2PR = 40;
  8891  0A09  3028               	movlw	40
  8892  0A0A                     L10:	
  8893  0A0A  0025               	movlb	5	; select bank5
  8894  0A0B  008D               	movwf	13	;volatile
  8895                           
  8896                           ;main.c: 107: TMR2_StartTimer();
  8897  0A0C  2F33               	ljmp	l3592
  8898  0A0D                     l3984:	
  8899                           ;main.c: 108: break;
  8900                           
  8901                           
  8902                           ;main.c: 110: T2PR = 10;
  8903  0A0D  300A               	movlw	10
  8904  0A0E  2A0A               	goto	L10
  8905  0A0F                     l3988:	
  8906                           
  8907                           ;main.c: 114: TMR2_StopTimer();
  8908  0A0F  2215  3188         	fcall	_TMR2_StopTimer
  8909                           
  8910                           ;main.c: 115: TMR4_StopTimer();
  8911  0A11  228A  3188         	fcall	_TMR4_StopTimer
  8912                           
  8913                           ;main.c: 116: ClearIndicators();
  8914  0A13  2F2B               	ljmp	l3870
  8915  0A14                     l741:	
  8916  0A14  0008               	return
  8917  0A15                     __end_of_goto_mode:	
  8918  0A15                     __ptext47:	
  8919 ;; *************** function _TMR2_StopTimer *****************
  8920 ;; Defined at:
  8921 ;;		line 127 in file "mcc_generated_files/tmr2.c"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;		None
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;		None
  8926 ;; Return value:  Size  Location     Type
  8927 ;;                  1    wreg      void 
  8928 ;; Registers used:
  8929 ;;		status,2, status,0, pclath, cstack
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/1
  8932 ;;		On exit  : 1F/5
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8939 ;;Total ram usage:        0 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; Hardware stack levels required when called:    6
  8942 ;; This function calls:
  8943 ;;		_TMR2_Stop
  8944 ;; This function is called by:
  8945 ;;		_goto_mode
  8946 ;; This function uses a non-reentrant model
  8947 ;;
  8948                           
  8949                           
  8950                           ;psect for function _TMR2_StopTimer
  8951  0A15                     _TMR2_StopTimer:	
  8952                           
  8953                           ;tmr2.c: 129: TMR2_Stop();
  8954                           
  8955                           ;incstack = 0
  8956                           ; Regs used in _TMR2_StopTimer: [status,2+status,0+pclath+cstack]
  8957  0A15  2F36               	ljmp	l3594
  8958  0A16                     __end_of_TMR2_StopTimer:	
  8959  0A16                     __ptext9:	
  8960 ;; *************** function _Validate *****************
  8961 ;; Defined at:
  8962 ;;		line 224 in file "main.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;		None
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;  valString      13    0[BANK1 ] unsigned char [13]
  8967 ;;  returnVal       1   13[BANK1 ] unsigned char 
  8968 ;; Return value:  Size  Location     Type
  8969 ;;                  1    wreg      unsigned char 
  8970 ;; Registers used:
  8971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8972 ;; Tracked objects:
  8973 ;;		On entry : 1F/1
  8974 ;;		On exit  : 1F/5
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Totals:         0       1      14       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;Total ram usage:       15 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; Hardware stack levels required when called:   12
  8984 ;; This function calls:
  8985 ;;		_TMR4_StartTimer
  8986 ;;		_get_response
  8987 ;;		_goto_mode
  8988 ;;		_send_message
  8989 ;;		_sprintf
  8990 ;; This function is called by:
  8991 ;;		_main
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           
  8996                           ;psect for function _Validate
  8997  0A16                     _Validate:	
  8998  0A16  3020               	movlw	low Validate@F15444
  8999                           
  9000                           ;main.c: 225: uint8_t returnVal;
  9001                           ;main.c: 226: pingTime = 0;
  9002                           
  9003                           ;incstack = 0
  9004                           ; Regs used in _Validate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9005  0A17  01CF               	clrf	_pingTime^(0+128)
  9006                           
  9007                           ;main.c: 227: char valString[] = "validate 123";
  9008  0A18  0086               	movwf	6
  9009  0A19  3001               	movlw	high Validate@F15444
  9010  0A1A  0087               	movwf	7
  9011  0A1B  30D3               	movlw	low Validate@valString
  9012  0A1C  0084               	movwf	4
  9013  0A1D  3000               	movlw	high Validate@valString
  9014  0A1E  0085               	movwf	5
  9015  0A1F  300D               	movlw	13
  9016  0A20  0020               	movlb	0	; select bank0
  9017  0A21  00ED               	movwf	??_Validate
  9018  0A22                     u3440:	
  9019  0A22  0016               	moviw fsr1++
  9020  0A23  001A               	movwi fsr0++
  9021  0A24  0BED               	decfsz	??_Validate,f
  9022  0A25  2A22               	goto	u3440
  9023                           
  9024                           ;main.c: 228: sprintf(valString, "validate %03d", UID);
  9025  0A26  303E               	movlw	low (STR_26| (0+32768))
  9026  0A27  00A1               	movwf	sprintf@f
  9027  0A28  3092               	movlw	high (STR_26| (0+32768))
  9028  0A29  27AE  3188         	fcall	PL20	;call to abstracted procedure
  9029  0A2B  30D3               	movlw	(low (Validate@valString| 0))& (0+255)
  9030  0A2C  01A4               	clrf	?_sprintf+3
  9031  0A2D  242D  3188         	fcall	_sprintf
  9032  0A2F                     l4114:	
  9033                           
  9034                           ;main.c: 230: send_message(valString);
  9035  0A2F  30D3               	movlw	(low (Validate@valString| 0))& (0+255)
  9036  0A30  226B  3188         	fcall	_send_message
  9037                           
  9038                           ;main.c: 231: returnVal = get_response();
  9039  0A32  2246  3188         	fcall	_get_response
  9040  0A34  0021               	movlb	1	; select bank1
  9041  0A35  00E0               	movwf	Validate@returnVal^(0+128)
  9042                           
  9043                           ;main.c: 232: if (returnVal == SUCCESS) {
  9044  0A36  0860               	movf	Validate@returnVal^(0+128),w
  9045  0A37  1D03               	btfss	3,2
  9046  0A38  2A3B               	goto	l4122
  9047                           
  9048                           ;main.c: 233: goto_mode(PAIRED);
  9049  0A39  3001               	movlw	1
  9050  0A3A  2A3E               	goto	L1
  9051  0A3B                     l4122:	
  9052                           ;main.c: 234: } else if (returnVal == FAILED) {
  9053                           
  9054  0A3B  0B60               	decfsz	Validate@returnVal^(0+128),w
  9055  0A3C  2A40               	goto	l4126
  9056                           
  9057                           ;main.c: 235: goto_mode(UNPAIRED);
  9058  0A3D  3002               	movlw	2
  9059  0A3E                     L1:	
  9060  0A3E  21F3  3188         	fcall	_goto_mode
  9061  0A40                     l4126:	
  9062                           
  9063                           ;main.c: 236: }
  9064                           ;main.c: 237: } while (returnVal == TX_ERROR);
  9065  0A40  3002               	movlw	2
  9066  0A41  0021               	movlb	1	; select bank1
  9067  0A42  0660               	xorwf	Validate@returnVal^(0+128),w
  9068  0A43  1903               	btfsc	3,2
  9069  0A44  2A2F               	goto	l4114
  9070                           
  9071                           ;main.c: 238: TMR4_StartTimer();
  9072  0A45  2F07               	ljmp	l3588
  9073  0A46                     __end_of_Validate:	
  9074  0A46                     __ptext41:	
  9075 ;; *************** function _get_response *****************
  9076 ;; Defined at:
  9077 ;;		line 182 in file "main.c"
  9078 ;; Parameters:    Size  Location     Type
  9079 ;;		None
  9080 ;; Auto vars:     Size  Location     Type
  9081 ;;  status          1    9[COMMON] unsigned char 
  9082 ;; Return value:  Size  Location     Type
  9083 ;;                  1    wreg      unsigned char 
  9084 ;; Registers used:
  9085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9086 ;; Tracked objects:
  9087 ;;		On entry : 0/0
  9088 ;;		On exit  : 10/0
  9089 ;;		Unchanged: 0/0
  9090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;Total ram usage:        1 bytes
  9096 ;; Hardware stack levels used:    1
  9097 ;; Hardware stack levels required when called:    8
  9098 ;; This function calls:
  9099 ;;		_WaitResponse
  9100 ;;		_WiFly_ReadChar
  9101 ;;		_goto_mode
  9102 ;; This function is called by:
  9103 ;;		_Pair
  9104 ;;		_Validate
  9105 ;;		_Knock
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           
  9110                           ;psect for function _get_response
  9111  0A46                     _get_response:	
  9112  0A46                     l775:	
  9113                           ;incstack = 0
  9114                           ; Regs used in _get_response: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9115                           ;main.c: 183: while (1) {
  9116                           
  9117                           
  9118                           ;main.c: 184: WaitResponse("Stat: ");
  9119  0A46  30CC               	movlw	low (STR_21| (0+32768))
  9120  0A47  00F6               	movwf	WaitResponse@chkString
  9121  0A48  3092               	movlw	high (STR_21| (0+32768))
  9122  0A49  00F7               	movwf	WaitResponse@chkString+1
  9123  0A4A  228B  3188         	fcall	_WaitResponse
  9124                           
  9125                           ;main.c: 185: uint8_t status = WiFly_ReadChar();
  9126  0A4C  225E  3188         	fcall	_WiFly_ReadChar
  9127  0A4E  00F9               	movwf	get_response@status
  9128                           
  9129                           ;main.c: 186: if (status == 'Y') {
  9130  0A4F  3A59               	xorlw	89
  9131  0A50  1D03               	btfss	3,2
  9132  0A51  2A55               	goto	l4056
  9133                           
  9134                           ;main.c: 187: goto_mode(PAIRED);
  9135  0A52  3001               	movlw	1
  9136  0A53  21F3               	fcall	_goto_mode
  9137                           
  9138                           ;main.c: 188: return SUCCESS;
  9139  0A54  3400               	retlw	0
  9140  0A55                     l4056:	
  9141  0A55  304E               	movlw	78
  9142  0A56  0679               	xorwf	get_response@status,w
  9143  0A57  1903               	btfsc	3,2
  9144                           
  9145                           ;main.c: 190: return FAILED;
  9146  0A58  3401               	retlw	1
  9147  0A59  3045               	movlw	69
  9148  0A5A  0679               	xorwf	get_response@status,w
  9149  0A5B  1903               	btfsc	3,2
  9150                           
  9151                           ;main.c: 192: return TX_ERROR;
  9152  0A5C  3402               	retlw	2
  9153  0A5D  2A46               	goto	l775
  9154  0A5E                     __end_of_get_response:	
  9155  0A5E                     __ptext55:	
  9156 ;; *************** function _WiFly_ReadChar *****************
  9157 ;; Defined at:
  9158 ;;		line 72 in file "mcc_generated_files/WiFly.c"
  9159 ;; Parameters:    Size  Location     Type
  9160 ;;		None
  9161 ;; Auto vars:     Size  Location     Type
  9162 ;;		None
  9163 ;; Return value:  Size  Location     Type
  9164 ;;                  1    wreg      unsigned char 
  9165 ;; Registers used:
  9166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9167 ;; Tracked objects:
  9168 ;;		On entry : 0/1
  9169 ;;		On exit  : 1F/E
  9170 ;;		Unchanged: 0/0
  9171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9176 ;;Total ram usage:        0 bytes
  9177 ;; Hardware stack levels used:    1
  9178 ;; Hardware stack levels required when called:    6
  9179 ;; This function calls:
  9180 ;;		_EUSART_Read
  9181 ;;		_EUSART_is_rx_ready
  9182 ;; This function is called by:
  9183 ;;		_CheckResponse
  9184 ;;		_WaitResponse
  9185 ;;		_get_response
  9186 ;;		_Pair
  9187 ;; This function uses a non-reentrant model
  9188 ;;
  9189                           
  9190                           
  9191                           ;psect for function _WiFly_ReadChar
  9192  0A5E                     _WiFly_ReadChar:	
  9193  0A5E                     l3598:	
  9194                           ;WiFly.c: 73: while (!EUSART_is_rx_ready()) {
  9195                           
  9196                           ;incstack = 0
  9197                           ; Regs used in _WiFly_ReadChar: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9198                           
  9199  0A5E  22B6  3188         	fcall	_EUSART_is_rx_ready
  9200  0A60  3A00               	xorlw	0
  9201  0A61  1D03               	btfss	3,2
  9202  0A62  2A65               	goto	l3600
  9203                           
  9204                           ;WiFly.c: 74: __nop();
  9205  0A63  0000               	nop
  9206  0A64  2A5E               	goto	l3598
  9207  0A65                     l3600:	
  9208                           
  9209                           ;WiFly.c: 75: }
  9210                           ;WiFly.c: 76: return uart[WiFly].Read();
  9211  0A65  27B4               	fcall	PL22	;call to abstracted procedure
  9212  0A66  008A               	movwf	10
  9213  0A67  3F00               	moviw [0]fsr0
  9214  0A68  000A               	callw
  9215  0A69  3188               	pagesel	$
  9216  0A6A  0008               	return
  9217  0A6B                     __end_of_WiFly_ReadChar:	
  9218  0A6B                     __ptext24:	
  9219 ;; *************** function _send_message *****************
  9220 ;; Defined at:
  9221 ;;		line 198 in file "main.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;  message         1    wreg     PTR const unsigned char 
  9224 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), 
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;  message         1   76[BANK0 ] PTR const unsigned char 
  9227 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), 
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  1    wreg      void 
  9230 ;; Registers used:
  9231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9232 ;; Tracked objects:
  9233 ;;		On entry : 1E/0
  9234 ;;		On exit  : 0/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;Total ram usage:        1 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:   11
  9244 ;; This function calls:
  9245 ;;		_Clear_RX_Buffer
  9246 ;;		_WaitResponse
  9247 ;;		_WiFly_SendString
  9248 ;;		_connect_socket
  9249 ;;		_goto_mode
  9250 ;; This function is called by:
  9251 ;;		_Pair
  9252 ;;		_Validate
  9253 ;;		_Knock
  9254 ;; This function uses a non-reentrant model
  9255 ;;
  9256                           
  9257                           
  9258                           ;psect for function _send_message
  9259  0A6B                     _send_message:	
  9260                           
  9261                           ;incstack = 0
  9262                           ; Regs used in _send_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9263                           ;send_message@message stored from wreg
  9264  0A6B  0020               	movlb	0	; select bank0
  9265  0A6C  00EC               	movwf	send_message@message
  9266                           
  9267                           ;main.c: 199: goto_mode(DISCONNECTED);
  9268  0A6D  3004               	movlw	4
  9269  0A6E  21F3  3188         	fcall	_goto_mode
  9270                           
  9271                           ;main.c: 200: connect_socket("192.168.1.7", "1335");
  9272  0A70  3067               	movlw	low (STR_22| (0+32768))
  9273  0A71  0020               	movlb	0	; select bank0
  9274  0A72  00E8               	movwf	connect_socket@addr
  9275  0A73  3092               	movlw	high (STR_22| (0+32768))
  9276  0A74  00E9               	movwf	connect_socket@addr+1
  9277  0A75  30FE               	movlw	low (STR_23| (0+32768))
  9278  0A76  00EA               	movwf	connect_socket@port
  9279  0A77  3092               	movlw	high (STR_23| (0+32768))
  9280  0A78  00EB               	movwf	connect_socket@port+1
  9281  0A79  2376  3188         	fcall	_connect_socket
  9282                           
  9283                           ;main.c: 201: Clear_RX_Buffer();
  9284  0A7B  22DD  3188         	fcall	_Clear_RX_Buffer
  9285                           
  9286                           ;main.c: 202: WaitResponse("Proceed");
  9287  0A7D  30B6               	movlw	low (STR_14| (0+32768))
  9288  0A7E  00F6               	movwf	WaitResponse@chkString
  9289  0A7F  3092               	movlw	high (STR_14| (0+32768))
  9290  0A80  00F7               	movwf	WaitResponse@chkString+1
  9291  0A81  228B  3188         	fcall	_WaitResponse
  9292  0A83  0064               	clrwdt	;# 
  9293                           
  9294                           ;main.c: 204: WiFly_SendString(message);
  9295  0A84  0020               	movlb	0	; select bank0
  9296  0A85  086C               	movf	send_message@message,w
  9297  0A86  00F5               	movwf	WiFly_SendString@sendString
  9298  0A87  3000               	movlw	0
  9299  0A88  01F6               	clrf	WiFly_SendString@sendString+1
  9300  0A89  2E7E               	ljmp	l3566
  9301  0A8A                     __end_of_send_message:	
  9302  0A8A                     __ptext43:	
  9303 ;; *************** function _TMR4_StopTimer *****************
  9304 ;; Defined at:
  9305 ;;		line 127 in file "mcc_generated_files/tmr4.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;		None
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;		None
  9310 ;; Return value:  Size  Location     Type
  9311 ;;                  1    wreg      void 
  9312 ;; Registers used:
  9313 ;;		status,2, status,0, pclath, cstack
  9314 ;; Tracked objects:
  9315 ;;		On entry : 1A/5
  9316 ;;		On exit  : 1F/5
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;Total ram usage:        0 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:    6
  9326 ;; This function calls:
  9327 ;;		_TMR4_Stop
  9328 ;; This function is called by:
  9329 ;;		_goto_mode
  9330 ;;		_Knock
  9331 ;;		_main
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335                           
  9336                           ;psect for function _TMR4_StopTimer
  9337  0A8A                     _TMR4_StopTimer:	
  9338                           
  9339                           ;tmr4.c: 129: TMR4_Stop();
  9340                           
  9341                           ;incstack = 0
  9342                           ; Regs used in _TMR4_StopTimer: [status,2+status,0+pclath+cstack]
  9343  0A8A  2F39               	ljmp	l3590
  9344  0A8B                     __end_of_TMR4_StopTimer:	
  9345  0A8B                     __ptext53:	
  9346 ;; *************** function _WaitResponse *****************
  9347 ;; Defined at:
  9348 ;;		line 168 in file "main.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;  chkString       2    6[COMMON] PTR const unsigned char 
  9351 ;;		 -> STR_24(8), STR_21(7), 
  9352 ;; Auto vars:     Size  Location     Type
  9353 ;;  i               2    2[BANK0 ] unsigned int 
  9354 ;;  length          2    0[BANK0 ] unsigned int 
  9355 ;; Return value:  Size  Location     Type
  9356 ;;                  1    wreg      void 
  9357 ;; Registers used:
  9358 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9359 ;; Tracked objects:
  9360 ;;		On entry : 0/1
  9361 ;;		On exit  : 1F/0
  9362 ;;		Unchanged: 0/0
  9363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9364 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;Total ram usage:        7 bytes
  9369 ;; Hardware stack levels used:    1
  9370 ;; Hardware stack levels required when called:    7
  9371 ;; This function calls:
  9372 ;;		_WiFly_ReadChar
  9373 ;;		_strlen
  9374 ;; This function is called by:
  9375 ;;		_get_response
  9376 ;;		_send_message
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           
  9381                           ;psect for function _WaitResponse
  9382  0A8B                     _WaitResponse:	
  9383                           
  9384                           ;main.c: 169: size_t length = strlen(chkString);
  9385                           
  9386                           ;incstack = 0
  9387                           ; Regs used in _WaitResponse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9388  0A8B  0877               	movf	WaitResponse@chkString+1,w
  9389  0A8C  00F2               	movwf	strlen@s+1
  9390  0A8D  0876               	movf	WaitResponse@chkString,w
  9391  0A8E  00F1               	movwf	strlen@s
  9392  0A8F  2360  3188         	fcall	_strlen
  9393  0A91  0872               	movf	?_strlen+1,w
  9394  0A92  0020               	movlb	0	; select bank0
  9395  0A93  00A1               	movwf	WaitResponse@length+1
  9396  0A94  0871               	movf	?_strlen,w
  9397  0A95  00A0               	movwf	WaitResponse@length
  9398  0A96                     l4000:	
  9399                           
  9400                           ;main.c: 170: size_t i = 0;
  9401  0A96  0020               	movlb	0	; select bank0
  9402  0A97  01A2               	clrf	WaitResponse@i
  9403  0A98  01A3               	clrf	WaitResponse@i+1
  9404  0A99                     l4008:	
  9405                           ;main.c: 175: } else {
  9406                           
  9407                           ;main.c: 172: while (i < length) {
  9408                           
  9409  0A99  0821               	movf	WaitResponse@length+1,w
  9410  0A9A  0223               	subwf	WaitResponse@i+1,w
  9411  0A9B  1D03               	skipz
  9412  0A9C  2A9F               	goto	u3385
  9413  0A9D  0820               	movf	WaitResponse@length,w
  9414  0A9E  0222               	subwf	WaitResponse@i,w
  9415  0A9F                     u3385:	
  9416  0A9F  1803               	btfsc	3,0
  9417  0AA0  0008               	return
  9418                           
  9419                           ;main.c: 173: if (WiFly_ReadChar() == chkString[i]) {
  9420  0AA1  0876               	movf	WaitResponse@chkString,w
  9421  0AA2  0722               	addwf	WaitResponse@i,w
  9422  0AA3  0084               	movwf	4
  9423  0AA4  0877               	movf	WaitResponse@chkString+1,w
  9424  0AA5  3D23               	addwfc	WaitResponse@i+1,w
  9425  0AA6  0085               	movwf	5
  9426  0AA7  0800               	movf	0,w	;code access
  9427  0AA8  00F8               	movwf	??_WaitResponse
  9428  0AA9  225E  3188         	fcall	_WiFly_ReadChar
  9429  0AAB  0678               	xorwf	??_WaitResponse,w
  9430  0AAC  1D03               	skipz
  9431  0AAD  2A96               	goto	l4000
  9432                           
  9433                           ;main.c: 174: i++;
  9434  0AAE  0020               	movlb	0	; select bank0
  9435  0AAF  0AA2               	incf	WaitResponse@i,f
  9436  0AB0  1903               	skipnz
  9437  0AB1  0AA3               	incf	WaitResponse@i+1,f
  9438  0AB2  2A99               	goto	l4008
  9439  0AB3                     __end_of_WaitResponse:	
  9440  0AB3                     __ptext49:	
  9441 ;; *************** function _TMR2_StartTimer *****************
  9442 ;; Defined at:
  9443 ;;		line 116 in file "mcc_generated_files/tmr2.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;		None
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;		None
  9448 ;; Return value:  Size  Location     Type
  9449 ;;                  1    wreg      void 
  9450 ;; Registers used:
  9451 ;;		status,2, status,0, pclath, cstack
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/5
  9454 ;;		On exit  : 1F/5
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;Total ram usage:        0 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:    6
  9464 ;; This function calls:
  9465 ;;		_TMR2_Start
  9466 ;; This function is called by:
  9467 ;;		_goto_mode
  9468 ;;		_main
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           
  9473                           ;psect for function _TMR2_StartTimer
  9474  0AB3                     _TMR2_StartTimer:	
  9475                           
  9476                           ;tmr2.c: 118: TMR2_Start();
  9477                           
  9478                           ;incstack = 0
  9479                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  9480  0AB3  2F33               	ljmp	l3592
  9481  0AB4                     __end_of_TMR2_StartTimer:	
  9482  0AB4                     __ptext58:	
  9483 ;; *************** function _RELAY_RL1_Engage *****************
  9484 ;; Defined at:
  9485 ;;		line 26 in file "mcc_generated_files/Relay_app.c"
  9486 ;; Parameters:    Size  Location     Type
  9487 ;;		None
  9488 ;; Auto vars:     Size  Location     Type
  9489 ;;		None
  9490 ;; Return value:  Size  Location     Type
  9491 ;;                  1    wreg      void 
  9492 ;; Registers used:
  9493 ;;		None
  9494 ;; Tracked objects:
  9495 ;;		On entry : 1F/0
  9496 ;;		On exit  : 1F/0
  9497 ;;		Unchanged: 0/0
  9498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;Total ram usage:        0 bytes
  9504 ;; Hardware stack levels used:    1
  9505 ;; Hardware stack levels required when called:    5
  9506 ;; This function calls:
  9507 ;;		Nothing
  9508 ;; This function is called by:
  9509 ;;		_Knock
  9510 ;; This function uses a non-reentrant model
  9511 ;;
  9512                           
  9513                           
  9514                           ;psect for function _RELAY_RL1_Engage
  9515  0AB4                     _RELAY_RL1_Engage:	
  9516                           
  9517                           ;incstack = 0
  9518                           ; Regs used in _RELAY_RL1_Engage: []
  9519                           ;Relay_app.c: 27: do { LATCbits.LATC2 = 1; } while(0);
  9520  0AB4  1518               	bsf	24,2	;volatile
  9521  0AB5  0008               	return
  9522  0AB6                     __end_of_RELAY_RL1_Engage:	
  9523  0AB6                     __ptext56:	
  9524 ;; *************** function _EUSART_is_rx_ready *****************
  9525 ;; Defined at:
  9526 ;;		line 120 in file "mcc_generated_files/eusart.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;		None
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;		None
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  1    wreg      unsigned char 
  9533 ;; Registers used:
  9534 ;;		wreg
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 1F/1
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;Total ram usage:        0 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    5
  9547 ;; This function calls:
  9548 ;;		Nothing
  9549 ;; This function is called by:
  9550 ;;		_Clear_RX_Buffer
  9551 ;;		_WiFly_ReadChar
  9552 ;;		_WiFly_CheckRecv
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           
  9557                           ;psect for function _EUSART_is_rx_ready
  9558  0AB6                     _EUSART_is_rx_ready:	
  9559                           
  9560                           ;eusart.c: 122: return eusartRxCount;
  9561                           
  9562                           ;incstack = 0
  9563                           ; Regs used in _EUSART_is_rx_ready: [wreg]
  9564  0AB6  0021               	movlb	1	; select bank1
  9565  0AB7  0851               	movf	_eusartRxCount^(0+128),w	;volatile
  9566  0AB8  0008               	return
  9567  0AB9                     __end_of_EUSART_is_rx_ready:	
  9568  0AB9                     __ptext51:	
  9569 ;; *************** function _SetIndication *****************
  9570 ;; Defined at:
  9571 ;;		line 80 in file "main.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  set             1    wreg     unsigned char 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  set             1    1[COMMON] unsigned char 
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  1    wreg      void 
  9578 ;; Registers used:
  9579 ;;		wreg, status,0
  9580 ;; Tracked objects:
  9581 ;;		On entry : 1F/5
  9582 ;;		On exit  : 1E/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;Total ram usage:        1 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; Hardware stack levels required when called:    5
  9592 ;; This function calls:
  9593 ;;		Nothing
  9594 ;; This function is called by:
  9595 ;;		_goto_mode
  9596 ;; This function uses a non-reentrant model
  9597 ;;
  9598                           
  9599                           
  9600                           ;psect for function _SetIndication
  9601  0AB9                     _SetIndication:	
  9602                           
  9603                           ;incstack = 0
  9604                           ; Regs used in _SetIndication: [wreg+status,0]
  9605                           ;SetIndication@set stored from wreg
  9606  0AB9  00F1               	movwf	SetIndication@set
  9607                           
  9608                           ;main.c: 81: indStatus = set;
  9609  0ABA  0871               	movf	SetIndication@set,w
  9610  0ABB  0021               	movlb	1	; select bank1
  9611  0ABC  00CE               	movwf	_indStatus^(0+128)
  9612                           
  9613                           ;main.c: 83: if (UID & 1) {
  9614  0ABD  1C69               	btfss	_UID^(0+128),0
  9615  0ABE  2AC5               	goto	l3886
  9616                           
  9617                           ;main.c: 84: LATAbits.LATA4 = set;
  9618  0ABF  0C71               	rrf	SetIndication@set,w
  9619  0AC0  0020               	movlb	0	; select bank0
  9620  0AC1  1C03               	skipc
  9621  0AC2  1216               	bcf	22,4	;volatile
  9622  0AC3  1803               	skipnc
  9623  0AC4  1616               	bsf	22,4	;volatile
  9624  0AC5                     l3886:	
  9625                           
  9626                           ;main.c: 85: }
  9627                           ;main.c: 86: if (UID & 1 << 1) {
  9628  0AC5  0021               	movlb	1	; select bank1
  9629  0AC6  1CE9               	btfss	_UID^(0+128),1
  9630  0AC7  2ACE               	goto	l3890
  9631                           
  9632                           ;main.c: 87: LATAbits.LATA5 = set;
  9633  0AC8  0C71               	rrf	SetIndication@set,w
  9634  0AC9  0020               	movlb	0	; select bank0
  9635  0ACA  1C03               	skipc
  9636  0ACB  1296               	bcf	22,5	;volatile
  9637  0ACC  1803               	skipnc
  9638  0ACD  1696               	bsf	22,5	;volatile
  9639  0ACE                     l3890:	
  9640                           
  9641                           ;main.c: 88: }
  9642                           ;main.c: 89: if (UID & 1 << 2) {
  9643  0ACE  0021               	movlb	1	; select bank1
  9644  0ACF  1D69               	btfss	_UID^(0+128),2
  9645  0AD0  2AD7               	goto	l3894
  9646                           
  9647                           ;main.c: 90: LATAbits.LATA6 = set;
  9648  0AD1  0C71               	rrf	SetIndication@set,w
  9649  0AD2  0020               	movlb	0	; select bank0
  9650  0AD3  1C03               	skipc
  9651  0AD4  1316               	bcf	22,6	;volatile
  9652  0AD5  1803               	skipnc
  9653  0AD6  1716               	bsf	22,6	;volatile
  9654  0AD7                     l3894:	
  9655                           
  9656                           ;main.c: 91: }
  9657                           ;main.c: 92: if (UID & 1 << 3) {
  9658  0AD7  0021               	movlb	1	; select bank1
  9659  0AD8  1DE9               	btfss	_UID^(0+128),3
  9660  0AD9  0008               	return
  9661                           
  9662                           ;main.c: 93: LATAbits.LATA7 = set;
  9663  0ADA  0C71               	rrf	SetIndication@set,w
  9664  0ADB  2FFA               	ljmp	PL24	;call to abstracted procedure
  9665  0ADC                     __end_of_SetIndication:	
  9666  0ADC                     __ptext45:	
  9667 ;; *************** function _TMR4_StartTimer *****************
  9668 ;; Defined at:
  9669 ;;		line 116 in file "mcc_generated_files/tmr4.c"
  9670 ;; Parameters:    Size  Location     Type
  9671 ;;		None
  9672 ;; Auto vars:     Size  Location     Type
  9673 ;;		None
  9674 ;; Return value:  Size  Location     Type
  9675 ;;                  1    wreg      void 
  9676 ;; Registers used:
  9677 ;;		status,2, status,0, pclath, cstack
  9678 ;; Tracked objects:
  9679 ;;		On entry : 1E/1
  9680 ;;		On exit  : 1F/5
  9681 ;;		Unchanged: 0/0
  9682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;Total ram usage:        0 bytes
  9688 ;; Hardware stack levels used:    1
  9689 ;; Hardware stack levels required when called:    6
  9690 ;; This function calls:
  9691 ;;		_TMR4_Start
  9692 ;; This function is called by:
  9693 ;;		_goto_mode
  9694 ;;		_Validate
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           
  9699                           ;psect for function _TMR4_StartTimer
  9700  0ADC                     _TMR4_StartTimer:	
  9701                           
  9702                           ;tmr4.c: 118: TMR4_Start();
  9703                           
  9704                           ;incstack = 0
  9705                           ; Regs used in _TMR4_StartTimer: [status,2+status,0+pclath+cstack]
  9706  0ADC  2F07               	ljmp	l3588
  9707  0ADD                     __end_of_TMR4_StartTimer:	
  9708  0ADD                     __ptext40:	
  9709 ;; *************** function _Clear_RX_Buffer *****************
  9710 ;; Defined at:
  9711 ;;		line 55 in file "mcc_generated_files/WiFly.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;		None
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;		None
  9716 ;; Return value:  Size  Location     Type
  9717 ;;                  1    wreg      void 
  9718 ;; Registers used:
  9719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/1
  9722 ;;		On exit  : 1F/1
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;Total ram usage:        0 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    6
  9732 ;; This function calls:
  9733 ;;		_EUSART_Read
  9734 ;;		_EUSART_is_rx_ready
  9735 ;; This function is called by:
  9736 ;;		_WiFly_SendString
  9737 ;;		_WiFly_EnterCMDMode
  9738 ;;		_WiFly_SendCMD_SingleArg
  9739 ;;		_WiFly_SendCMD_DoubleArg
  9740 ;;		_send_message
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           
  9745                           ;psect for function _Clear_RX_Buffer
  9746  0ADD                     _Clear_RX_Buffer:	
  9747  0ADD                     l3534:	
  9748                           ;WiFly.c: 56: while (EUSART_is_rx_ready()) {
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _Clear_RX_Buffer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9752                           
  9753  0ADD  22B6  3188         	fcall	_EUSART_is_rx_ready
  9754  0ADF  3A00               	xorlw	0
  9755  0AE0  1903               	btfsc	3,2
  9756  0AE1  0008               	return
  9757                           
  9758                           ;WiFly.c: 57: uart[WiFly].Read();
  9759  0AE2  27B4               	fcall	PL22	;call to abstracted procedure
  9760  0AE3  008A               	movwf	10
  9761  0AE4  3F00               	moviw [0]fsr0
  9762  0AE5  000A               	callw
  9763  0AE6  3188               	pagesel	$
  9764  0AE7  2ADD               	goto	l3534
  9765  0AE8                     __end_of_Clear_RX_Buffer:	
  9766  0AE8                     __ptext36:	
  9767 ;; *************** function _CheckResponse *****************
  9768 ;; Defined at:
  9769 ;;		line 121 in file "main.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;  chkString1      2    6[COMMON] PTR const unsigned char 
  9772 ;;		 -> openStr(5), 
  9773 ;;  chkString2      1    8[COMMON] PTR const unsigned char 
  9774 ;;		 -> failedStr(7), 
  9775 ;;  chkString3      1    9[COMMON] PTR const unsigned char 
  9776 ;;		 -> errStr(4), 
  9777 ;; Auto vars:     Size  Location     Type
  9778 ;;  input           1    8[BANK0 ] unsigned char 
  9779 ;;  i2              2   11[BANK0 ] unsigned int 
  9780 ;;  i1              2    9[BANK0 ] unsigned int 
  9781 ;;  i3              2    6[BANK0 ] unsigned int 
  9782 ;;  length2         2    4[BANK0 ] unsigned int 
  9783 ;;  length1         2    2[BANK0 ] unsigned int 
  9784 ;;  length3         2    0[BANK0 ] unsigned int 
  9785 ;; Return value:  Size  Location     Type
  9786 ;;                  1    wreg      unsigned char 
  9787 ;; Registers used:
  9788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9789 ;; Tracked objects:
  9790 ;;		On entry : 0/0
  9791 ;;		On exit  : 1F/0
  9792 ;;		Unchanged: 0/0
  9793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9794 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9797 ;;      Totals:         5      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;Total ram usage:       18 bytes
  9799 ;; Hardware stack levels used:    1
  9800 ;; Hardware stack levels required when called:    7
  9801 ;; This function calls:
  9802 ;;		_WiFly_ReadChar
  9803 ;;		_strlen
  9804 ;; This function is called by:
  9805 ;;		_connect_socket
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           
  9810                           ;psect for function _CheckResponse
  9811  0AE8                     _CheckResponse:	
  9812                           
  9813                           ;main.c: 122: size_t length1 = strlen(chkString1);
  9814                           
  9815                           ;incstack = 0
  9816                           ; Regs used in _CheckResponse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9817  0AE8  0877               	movf	CheckResponse@chkString1+1,w
  9818  0AE9  00F2               	movwf	strlen@s+1
  9819  0AEA  0876               	movf	CheckResponse@chkString1,w
  9820  0AEB  00F1               	movwf	strlen@s
  9821  0AEC  2360  3188         	fcall	_strlen
  9822  0AEE  0872               	movf	?_strlen+1,w
  9823  0AEF  0020               	movlb	0	; select bank0
  9824  0AF0  00A3               	movwf	CheckResponse@length1+1
  9825  0AF1  0871               	movf	?_strlen,w
  9826  0AF2  00A2               	movwf	CheckResponse@length1
  9827                           
  9828                           ;main.c: 123: size_t i1 = 0;
  9829  0AF3  01A9               	clrf	CheckResponse@i1
  9830  0AF4  01AA               	clrf	CheckResponse@i1+1
  9831                           
  9832                           ;main.c: 124: size_t length2 = strlen(chkString2);
  9833  0AF5  0878               	movf	CheckResponse@chkString2,w
  9834  0AF6  00F1               	movwf	strlen@s
  9835  0AF7  01F2               	clrf	strlen@s+1
  9836  0AF8  2360  3188         	fcall	_strlen
  9837  0AFA  0872               	movf	?_strlen+1,w
  9838  0AFB  0020               	movlb	0	; select bank0
  9839  0AFC  00A5               	movwf	CheckResponse@length2+1
  9840  0AFD  0871               	movf	?_strlen,w
  9841  0AFE  00A4               	movwf	CheckResponse@length2
  9842                           
  9843                           ;main.c: 125: size_t i2 = 0;
  9844  0AFF  01AB               	clrf	CheckResponse@i2
  9845  0B00  01AC               	clrf	CheckResponse@i2+1
  9846                           
  9847                           ;main.c: 126: size_t length3 = strlen(chkString3);
  9848  0B01  0879               	movf	CheckResponse@chkString3,w
  9849  0B02  00F1               	movwf	strlen@s
  9850  0B03  01F2               	clrf	strlen@s+1
  9851  0B04  2360  3188         	fcall	_strlen
  9852  0B06  0872               	movf	?_strlen+1,w
  9853  0B07  0020               	movlb	0	; select bank0
  9854  0B08  00A1               	movwf	CheckResponse@length3+1
  9855  0B09  0871               	movf	?_strlen,w
  9856  0B0A  00A0               	movwf	CheckResponse@length3
  9857  0B0B                     l3906:	
  9858                           
  9859                           ;main.c: 127: size_t i3 = 0;
  9860  0B0B  01A6               	clrf	CheckResponse@i3
  9861  0B0C  01A7               	clrf	CheckResponse@i3+1
  9862                           
  9863                           ;main.c: 129: while (i1 < length1 && i2 < length2 && i3 < length3) {
  9864  0B0D  2B37               	goto	l3928
  9865  0B0E                     l3908:	
  9866                           
  9867                           ;main.c: 130: char input = WiFly_ReadChar();
  9868  0B0E  225E  3188         	fcall	_WiFly_ReadChar
  9869  0B10  0020               	movlb	0	; select bank0
  9870  0B11  00A8               	movwf	CheckResponse@input
  9871                           
  9872                           ;main.c: 131: if (input == chkString1[i1]) {
  9873  0B12  0876               	movf	CheckResponse@chkString1,w
  9874  0B13  0729               	addwf	CheckResponse@i1,w
  9875  0B14  0084               	movwf	4
  9876  0B15  0877               	movf	CheckResponse@chkString1+1,w
  9877  0B16  3D2A               	addwfc	CheckResponse@i1+1,w
  9878  0B17  0085               	movwf	5
  9879  0B18  0800               	movf	0,w	;code access
  9880  0B19  0628               	xorwf	CheckResponse@input,w
  9881  0B1A  1D03               	skipz
  9882  0B1B  2B20               	goto	l3914
  9883                           
  9884                           ;main.c: 132: i1++;
  9885  0B1C  0AA9               	incf	CheckResponse@i1,f
  9886  0B1D  1903               	skipnz
  9887  0B1E  0AAA               	incf	CheckResponse@i1+1,f
  9888                           
  9889                           ;main.c: 133: } else {
  9890  0B1F  2B22               	goto	l3916
  9891  0B20                     l3914:	
  9892                           
  9893                           ;main.c: 134: i1 = 0;
  9894  0B20  01A9               	clrf	CheckResponse@i1
  9895  0B21  01AA               	clrf	CheckResponse@i1+1
  9896  0B22                     l3916:	
  9897                           
  9898                           ;main.c: 135: }
  9899                           ;main.c: 137: if (input == chkString2[i2]) {
  9900  0B22  082B               	movf	CheckResponse@i2,w
  9901  0B23  0778               	addwf	CheckResponse@chkString2,w
  9902  0B24  27C0  3188         	fcall	PL28	;call to abstracted procedure
  9903  0B26  1D03               	skipz
  9904  0B27  2B2C               	goto	l3920
  9905                           
  9906                           ;main.c: 138: i2++;
  9907  0B28  0AAB               	incf	CheckResponse@i2,f
  9908  0B29  1903               	skipnz
  9909  0B2A  0AAC               	incf	CheckResponse@i2+1,f
  9910                           
  9911                           ;main.c: 139: } else {
  9912  0B2B  2B2E               	goto	l3922
  9913  0B2C                     l3920:	
  9914                           
  9915                           ;main.c: 140: i2 = 0;
  9916  0B2C  01AB               	clrf	CheckResponse@i2
  9917  0B2D  01AC               	clrf	CheckResponse@i2+1
  9918  0B2E                     l3922:	
  9919                           
  9920                           ;main.c: 141: }
  9921                           ;main.c: 143: if (input == chkString3[i3]) {
  9922  0B2E  0826               	movf	CheckResponse@i3,w
  9923  0B2F  0779               	addwf	CheckResponse@chkString3,w
  9924  0B30  27C0  3188         	fcall	PL28	;call to abstracted procedure
  9925  0B32  1D03               	skipz
  9926  0B33  2B0B               	goto	l3906
  9927                           
  9928                           ;main.c: 144: i3++;
  9929  0B34  0AA6               	incf	CheckResponse@i3,f
  9930  0B35  1903               	skipnz
  9931  0B36  0AA7               	incf	CheckResponse@i3+1,f
  9932  0B37                     l3928:	
  9933                           ;main.c: 145: } else {
  9934                           
  9935  0B37  0823               	movf	CheckResponse@length1+1,w
  9936  0B38  022A               	subwf	CheckResponse@i1+1,w
  9937  0B39  1D03               	skipz
  9938  0B3A  2B3D               	goto	u3315
  9939  0B3B  0822               	movf	CheckResponse@length1,w
  9940  0B3C  0229               	subwf	CheckResponse@i1,w
  9941  0B3D                     u3315:	
  9942  0B3D  1803               	skipnc
  9943  0B3E  2B4F               	goto	l3934
  9944  0B3F  0825               	movf	CheckResponse@length2+1,w
  9945  0B40  022C               	subwf	CheckResponse@i2+1,w
  9946  0B41  1D03               	skipz
  9947  0B42  2B45               	goto	u3325
  9948  0B43  0824               	movf	CheckResponse@length2,w
  9949  0B44  022B               	subwf	CheckResponse@i2,w
  9950  0B45                     u3325:	
  9951  0B45  1803               	skipnc
  9952  0B46  2B4F               	goto	l3934
  9953  0B47  0821               	movf	CheckResponse@length3+1,w
  9954  0B48  0227               	subwf	CheckResponse@i3+1,w
  9955  0B49  1D03               	skipz
  9956  0B4A  2B4D               	goto	u3335
  9957  0B4B  0820               	movf	CheckResponse@length3,w
  9958  0B4C  0226               	subwf	CheckResponse@i3,w
  9959  0B4D                     u3335:	
  9960  0B4D  1C03               	skipc
  9961  0B4E  2B0E               	goto	l3908
  9962  0B4F                     l3934:	
  9963                           
  9964                           ;main.c: 147: }
  9965                           ;main.c: 148: }
  9966                           ;main.c: 150: if (i1 == length1) {
  9967  0B4F  0823               	movf	CheckResponse@length1+1,w
  9968  0B50  062A               	xorwf	CheckResponse@i1+1,w
  9969  0B51  1D03               	skipz
  9970  0B52  2B55               	goto	u3345
  9971  0B53  0822               	movf	CheckResponse@length1,w
  9972  0B54  0629               	xorwf	CheckResponse@i1,w
  9973  0B55                     u3345:	
  9974  0B55  1903               	btfsc	3,2
  9975                           
  9976                           ;main.c: 151: return 1;
  9977  0B56  3401               	retlw	1
  9978  0B57  0825               	movf	CheckResponse@length2+1,w
  9979  0B58  062C               	xorwf	CheckResponse@i2+1,w
  9980  0B59  1D03               	skipz
  9981  0B5A  2B5D               	goto	u3355
  9982  0B5B  0824               	movf	CheckResponse@length2,w
  9983  0B5C  062B               	xorwf	CheckResponse@i2,w
  9984  0B5D                     u3355:	
  9985  0B5D  1903               	btfsc	3,2
  9986                           
  9987                           ;main.c: 153: return 2;
  9988  0B5E  3402               	retlw	2
  9989                           
  9990                           ;main.c: 155: return 3;
  9991  0B5F  3403               	retlw	3
  9992  0B60                     __end_of_CheckResponse:	
  9993  0B60                     __ptext54:	
  9994 ;; *************** function _strlen *****************
  9995 ;; Defined at:
  9996 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\strlen.c"
  9997 ;; Parameters:    Size  Location     Type
  9998 ;;  s               2    1[COMMON] PTR const unsigned char 
  9999 ;;		 -> STR_24(8), STR_21(7), errStr(4), failedStr(7), 
 10000 ;;		 -> STR_18(5), STR_16(7), STR_14(8), openStr(5), 
 10001 ;;		 -> STR_12(6), hardRebootStr(6), softRebootStr(7), aokStr(4), 
 10002 ;;		 -> endStr(5), cmdStr(4), 
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;  cp              2    4[COMMON] PTR const unsigned char 
 10005 ;;		 -> STR_24(8), STR_21(7), errStr(4), failedStr(7), 
 10006 ;;		 -> STR_18(5), STR_16(7), STR_14(8), openStr(5), 
 10007 ;;		 -> STR_12(6), hardRebootStr(6), softRebootStr(7), aokStr(4), 
 10008 ;;		 -> endStr(5), cmdStr(4), 
 10009 ;; Return value:  Size  Location     Type
 10010 ;;                  2    1[COMMON] unsigned int 
 10011 ;; Registers used:
 10012 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/1
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;Total ram usage:        5 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    5
 10025 ;; This function calls:
 10026 ;;		Nothing
 10027 ;; This function is called by:
 10028 ;;		_WiFly_CheckRecv
 10029 ;;		_CheckResponse
 10030 ;;		_WaitResponse
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           
 10035                           ;psect for function _strlen
 10036  0B60                     _strlen:	
 10037                           
 10038                           ;incstack = 0
 10039                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 10040  0B60  0872               	movf	strlen@s+1,w
 10041  0B61  00F5               	movwf	strlen@cp+1
 10042  0B62  0871               	movf	strlen@s,w
 10043  0B63  00F4               	movwf	strlen@cp
 10044  0B64                     l3524:	
 10045  0B64  0874               	movf	strlen@cp,w
 10046  0B65  0084               	movwf	4
 10047  0B66  0875               	movf	strlen@cp+1,w
 10048  0B67  0085               	movwf	5
 10049  0B68  0012               	moviw fsr0++
 10050  0B69  1903               	btfsc	3,2
 10051  0B6A  2B6F               	goto	l3526
 10052  0B6B  0AF4               	incf	strlen@cp,f
 10053  0B6C  1903               	skipnz
 10054  0B6D  0AF5               	incf	strlen@cp+1,f
 10055  0B6E  2B64               	goto	l3524
 10056  0B6F                     l3526:	
 10057  0B6F  0871               	movf	strlen@s,w
 10058  0B70  0274               	subwf	strlen@cp,w
 10059  0B71  00F1               	movwf	?_strlen
 10060  0B72  0872               	movf	strlen@s+1,w
 10061  0B73  3B75               	subwfb	strlen@cp+1,w
 10062  0B74  00F2               	movwf	?_strlen+1
 10063  0B75  0008               	return
 10064  0B76                     __end_of_strlen:	
 10065  0B76                     __ptext25:	
 10066 ;; *************** function _connect_socket *****************
 10067 ;; Defined at:
 10068 ;;		line 160 in file "main.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;  addr            2   72[BANK0 ] PTR const unsigned char 
 10071 ;;		 -> STR_22(12), 
 10072 ;;  port            2   74[BANK0 ] PTR const unsigned char 
 10073 ;;		 -> STR_23(5), 
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;		None
 10076 ;; Return value:  Size  Location     Type
 10077 ;;                  1    wreg      void 
 10078 ;; Registers used:
 10079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10080 ;; Tracked objects:
 10081 ;;		On entry : 1F/0
 10082 ;;		On exit  : 1F/1
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        4 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:   10
 10092 ;; This function calls:
 10093 ;;		_CheckResponse
 10094 ;;		_WiFly_SendCMD_DoubleArg
 10095 ;; This function is called by:
 10096 ;;		_send_message
 10097 ;; This function uses a non-reentrant model
 10098 ;;
 10099                           
 10100                           
 10101                           ;psect for function _connect_socket
 10102  0B76                     _connect_socket:	
 10103  0B76                     l762:	
 10104                           ;incstack = 0
 10105                           ; Regs used in _connect_socket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10106                           ;main.c: 161: do {
 10107                           
 10108                           
 10109                           ;main.c: 162: WiFly_SendCMD_DoubleArg("open %s %s\r\n", addr, port);
 10110  0B76  305A               	movlw	low (STR_13| (0+32768))
 10111  0B77  00BA               	movwf	WiFly_SendCMD_DoubleArg@cmdFormat
 10112  0B78  3092               	movlw	high (STR_13| (0+32768))
 10113  0B79  00BB               	movwf	WiFly_SendCMD_DoubleArg@cmdFormat+1
 10114  0B7A  0869               	movf	connect_socket@addr+1,w
 10115  0B7B  00BD               	movwf	WiFly_SendCMD_DoubleArg@arg1+1
 10116  0B7C  0868               	movf	connect_socket@addr,w
 10117  0B7D  00BC               	movwf	WiFly_SendCMD_DoubleArg@arg1
 10118  0B7E  086B               	movf	connect_socket@port+1,w
 10119  0B7F  00BF               	movwf	WiFly_SendCMD_DoubleArg@arg2+1
 10120  0B80  086A               	movf	connect_socket@port,w
 10121  0B81  00BE               	movwf	WiFly_SendCMD_DoubleArg@arg2
 10122  0B82  2394  3188         	fcall	_WiFly_SendCMD_DoubleArg
 10123                           
 10124                           ;main.c: 163: } while (CheckResponse(openStr, failedStr, errStr) != 1);
 10125  0B84  30F4               	movlw	low (_openStr| (0+32768))
 10126  0B85  00F6               	movwf	CheckResponse@chkString1
 10127  0B86  3092               	movlw	high (_openStr| (0+32768))
 10128  0B87  00F7               	movwf	CheckResponse@chkString1+1
 10129  0B88  30B3               	movlw	(low (_failedStr| 0))& (0+255)
 10130  0B89  00F8               	movwf	CheckResponse@chkString2
 10131  0B8A  30BA               	movlw	(low (_errStr| 0))& (0+255)
 10132  0B8B  00F9               	movwf	CheckResponse@chkString3
 10133  0B8C  22E8  3188         	fcall	_CheckResponse
 10134  0B8E  3A01               	xorlw	1
 10135  0B8F  1D03               	skipz
 10136  0B90  2B76               	goto	l762
 10137                           
 10138                           ;main.c: 165: inCMD = 0;
 10139  0B91  0021               	movlb	1	; select bank1
 10140  0B92  01EA               	clrf	_inCMD^(0+128)
 10141  0B93  0008               	return
 10142  0B94                     __end_of_connect_socket:	
 10143  0B94                     __ptext26:	
 10144 ;; *************** function _WiFly_SendCMD_DoubleArg *****************
 10145 ;; Defined at:
 10146 ;;		line 124 in file "mcc_generated_files/WiFly.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;  cmdFormat       2   26[BANK0 ] PTR const unsigned char 
 10149 ;;		 -> STR_20(13), STR_13(13), 
 10150 ;;  arg1            2   28[BANK0 ] PTR const unsigned char 
 10151 ;;		 -> STR_22(12), 
 10152 ;;  arg2            2   30[BANK0 ] PTR const unsigned char 
 10153 ;;		 -> STR_23(5), 
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;  txBuffer       40   32[BANK0 ] unsigned char [40]
 10156 ;; Return value:  Size  Location     Type
 10157 ;;                  1    wreg      void 
 10158 ;; Registers used:
 10159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10160 ;; Tracked objects:
 10161 ;;		On entry : 1F/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10165 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;Total ram usage:       46 bytes
 10170 ;; Hardware stack levels used:    1
 10171 ;; Hardware stack levels required when called:    9
 10172 ;; This function calls:
 10173 ;;		_Clear_RX_Buffer
 10174 ;;		_WiFly_CheckInCMD
 10175 ;;		_WiFly_Send
 10176 ;;		_sprintf
 10177 ;; This function is called by:
 10178 ;;		_connect_socket
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           
 10183                           ;psect for function _WiFly_SendCMD_DoubleArg
 10184  0B94                     _WiFly_SendCMD_DoubleArg:	
 10185                           
 10186                           ;WiFly.c: 126: WiFly_CheckInCMD();
 10187                           
 10188                           ;incstack = 0
 10189                           ; Regs used in _WiFly_SendCMD_DoubleArg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10190  0B94  23AD  3188         	fcall	_WiFly_CheckInCMD
 10191                           
 10192                           ;WiFly.c: 127: Clear_RX_Buffer();
 10193  0B96  22DD  3188         	fcall	_Clear_RX_Buffer
 10194                           
 10195                           ;WiFly.c: 128: char txBuffer[40];
 10196                           ;WiFly.c: 129: sprintf(txBuffer, cmdFormat, arg1, arg2);
 10197  0B98  0020               	movlb	0	; select bank0
 10198  0B99  083B               	movf	WiFly_SendCMD_DoubleArg@cmdFormat+1,w
 10199  0B9A  00A2               	movwf	sprintf@f+1
 10200  0B9B  083A               	movf	WiFly_SendCMD_DoubleArg@cmdFormat,w
 10201  0B9C  00A1               	movwf	sprintf@f
 10202  0B9D  083D               	movf	WiFly_SendCMD_DoubleArg@arg1+1,w
 10203  0B9E  00A4               	movwf	(low ((?_sprintf| 0+2))+1)
 10204  0B9F  083C               	movf	WiFly_SendCMD_DoubleArg@arg1,w
 10205  0BA0  00A3               	movwf	low ((?_sprintf| 0+2))
 10206  0BA1  083F               	movf	WiFly_SendCMD_DoubleArg@arg2+1,w
 10207  0BA2  00A6               	movwf	(low ((?_sprintf| 0+4))+1)
 10208  0BA3  083E               	movf	WiFly_SendCMD_DoubleArg@arg2,w
 10209  0BA4  00A5               	movwf	low ((?_sprintf| 0+4))
 10210  0BA5  3040               	movlw	(low (WiFly_SendCMD_DoubleArg@txBuffer| 0))& (0+255)
 10211  0BA6  242D  3188         	fcall	_sprintf
 10212                           
 10213                           ;WiFly.c: 130: WiFly_Send(txBuffer);
 10214  0BA8  3040               	movlw	low WiFly_SendCMD_DoubleArg@txBuffer
 10215  0BA9  00F2               	movwf	WiFly_Send@command
 10216  0BAA  3000               	movlw	high WiFly_SendCMD_DoubleArg@txBuffer
 10217  0BAB  00F3               	movwf	WiFly_Send@command+1
 10218  0BAC  2E91               	ljmp	l2540
 10219  0BAD                     __end_of_WiFly_SendCMD_DoubleArg:	
 10220  0BAD                     __ptext33:	
 10221 ;; *************** function _WiFly_CheckInCMD *****************
 10222 ;; Defined at:
 10223 ;;		line 61 in file "mcc_generated_files/WiFly.c"
 10224 ;; Parameters:    Size  Location     Type
 10225 ;;		None
 10226 ;; Auto vars:     Size  Location     Type
 10227 ;;		None
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  1    wreg      void 
 10230 ;; Registers used:
 10231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 1F/1
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;Total ram usage:        0 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    8
 10244 ;; This function calls:
 10245 ;;		_WiFly_EnterCMDMode
 10246 ;; This function is called by:
 10247 ;;		_WiFly_SendCMD_SingleArg
 10248 ;;		_WiFly_SendCMD_DoubleArg
 10249 ;;		_WiFly_SendCMD
 10250 ;;		_WiFly_RebootCMD
 10251 ;; This function uses a non-reentrant model
 10252 ;;
 10253                           
 10254                           
 10255                           ;psect for function _WiFly_CheckInCMD
 10256  0BAD                     _WiFly_CheckInCMD:	
 10257                           
 10258                           ;WiFly.c: 62: if (!inCMD) {
 10259                           
 10260                           ;incstack = 0
 10261                           ; Regs used in _WiFly_CheckInCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10262  0BAD  0021               	movlb	1	; select bank1
 10263  0BAE  086A               	movf	_inCMD^(0+128),w
 10264  0BAF  1D03               	btfss	3,2
 10265  0BB0  0008               	return
 10266                           
 10267                           ;WiFly.c: 63: WiFly_EnterCMDMode();
 10268  0BB1  2846               	ljmp	l3550
 10269  0BB2                     __end_of_WiFly_CheckInCMD:	
 10270  0BB2                     __ptext22:	
 10271 ;; *************** function _eeprom_write *****************
 10272 ;; Defined at:
 10273 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic\eewrite.c"
 10274 ;; Parameters:    Size  Location     Type
 10275 ;;  addr            1    wreg     unsigned char 
 10276 ;;  value           1    1[COMMON] unsigned char 
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;  addr            1    2[COMMON] unsigned char 
 10279 ;; Return value:  Size  Location     Type
 10280 ;;                  1    wreg      void 
 10281 ;; Registers used:
 10282 ;;		wreg, status,2
 10283 ;; Tracked objects:
 10284 ;;		On entry : 1F/1
 10285 ;;		On exit  : 1F/10
 10286 ;;		Unchanged: 0/0
 10287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10288 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;Total ram usage:        2 bytes
 10293 ;; Hardware stack levels used:    1
 10294 ;; Hardware stack levels required when called:    5
 10295 ;; This function calls:
 10296 ;;		Nothing
 10297 ;; This function is called by:
 10298 ;;		_Pair
 10299 ;; This function uses a non-reentrant model
 10300 ;;
 10301                           
 10302                           
 10303                           ;psect for function _eeprom_write
 10304  0BB2                     _eeprom_write:	
 10305                           
 10306                           ;incstack = 0
 10307                           ; Regs used in _eeprom_write: [wreg+status,2]
 10308                           ;eeprom_write@addr stored from wreg
 10309  0BB2  00F2               	movwf	eeprom_write@addr
 10310  0BB3                     l978:	
 10311  0BB3  0030               	movlb	16	; select bank16
 10312  0BB4  189E               	btfsc	30,1	;volsfr
 10313  0BB5  2BB3               	goto	l978
 10314  0BB6  171E               	bsf	30,6	;volsfr
 10315  0BB7  0872               	movf	eeprom_write@addr,w
 10316  0BB8  009A               	movwf	26	;volatile
 10317  0BB9  3070               	movlw	112
 10318  0BBA  009B               	movwf	27	;volatile
 10319  0BBB  019D               	clrf	29	;volatile
 10320  0BBC  0871               	movf	eeprom_write@value,w
 10321  0BBD  009C               	movwf	28	;volatile
 10322  0BBE  1003               	bcf	3,0	;volatile
 10323  0BBF  1B8B               	btfsc	11,7	;volatile
 10324  0BC0  1403               	bsf	3,0	;volatile
 10325  0BC1  138B               	bcf	11,7	;volatile
 10326  0BC2  151E               	bsf	30,2	;volsfr
 10327  0BC3  3055               	movlw	85
 10328  0BC4  009F               	movwf	31	;volsfr
 10329  0BC5  30AA               	movlw	170
 10330  0BC6  009F               	movwf	31	;volsfr
 10331  0BC7  149E               	bsf	30,1	;volsfr
 10332  0BC8                     l982:	
 10333  0BC8  189E               	btfsc	30,1	;volsfr
 10334  0BC9  2BC8               	goto	l982
 10335  0BCA  111E               	bcf	30,2	;volsfr
 10336  0BCB  1803               	btfsc	3,0	;volatile
 10337  0BCC  178B               	bsf	11,7	;volatile
 10338  0BCD  0008               	return
 10339  0BCE                     __end_of_eeprom_write:	
 10340  0BCE                     __ptext15:	
 10341 ;; *************** function _TMR2_SetInterruptHandler *****************
 10342 ;; Defined at:
 10343 ;;		line 180 in file "mcc_generated_files/tmr2.c"
 10344 ;; Parameters:    Size  Location     Type
 10345 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
 10346 ;;		 -> blink(1), TMR2_DefaultInterruptHandler(1), 
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;		None
 10349 ;; Return value:  Size  Location     Type
 10350 ;;                  1    wreg      void 
 10351 ;; Registers used:
 10352 ;;		wreg
 10353 ;; Tracked objects:
 10354 ;;		On entry : 1F/E
 10355 ;;		On exit  : 1F/1
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10358 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;Total ram usage:        2 bytes
 10363 ;; Hardware stack levels used:    1
 10364 ;; Hardware stack levels required when called:    5
 10365 ;; This function calls:
 10366 ;;		Nothing
 10367 ;; This function is called by:
 10368 ;;		_TMR2_Initialize
 10369 ;;		_main
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           
 10374                           ;psect for function _TMR2_SetInterruptHandler
 10375  0BCE                     _TMR2_SetInterruptHandler:	
 10376                           
 10377                           ;tmr2.c: 181: TMR2_InterruptHandler = InterruptHandler;
 10378                           
 10379                           ;incstack = 0
 10380                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 10381  0BCE  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 10382  0BCF  0021               	movlb	1	; select bank1
 10383  0BD0  00E2               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
 10384  0BD1  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 10385  0BD2  00E1               	movwf	_TMR2_InterruptHandler^(0+128)
 10386  0BD3  0008               	return
 10387  0BD4                     __end_of_TMR2_SetInterruptHandler:	
 10388  0BD4                     __ptext13:	
 10389 ;; *************** function _TMR4_SetInterruptHandler *****************
 10390 ;; Defined at:
 10391 ;;		line 180 in file "mcc_generated_files/tmr4.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
 10394 ;;		 -> setFlag(1), TMR4_DefaultInterruptHandler(1), 
 10395 ;; Auto vars:     Size  Location     Type
 10396 ;;		None
 10397 ;; Return value:  Size  Location     Type
 10398 ;;                  1    wreg      void 
 10399 ;; Registers used:
 10400 ;;		wreg
 10401 ;; Tracked objects:
 10402 ;;		On entry : 10/1
 10403 ;;		On exit  : 1F/1
 10404 ;;		Unchanged: 0/0
 10405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10406 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10410 ;;Total ram usage:        2 bytes
 10411 ;; Hardware stack levels used:    1
 10412 ;; Hardware stack levels required when called:    5
 10413 ;; This function calls:
 10414 ;;		Nothing
 10415 ;; This function is called by:
 10416 ;;		_TMR4_Initialize
 10417 ;;		_main
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           
 10422                           ;psect for function _TMR4_SetInterruptHandler
 10423  0BD4                     _TMR4_SetInterruptHandler:	
 10424                           
 10425                           ;tmr4.c: 181: TMR4_InterruptHandler = InterruptHandler;
 10426                           
 10427                           ;incstack = 0
 10428                           ; Regs used in _TMR4_SetInterruptHandler: [wreg]
 10429  0BD4  0872               	movf	TMR4_SetInterruptHandler@InterruptHandler+1,w
 10430  0BD5  0021               	movlb	1	; select bank1
 10431  0BD6  00E8               	movwf	(_TMR4_InterruptHandler+1)^(0+128)
 10432  0BD7  0871               	movf	TMR4_SetInterruptHandler@InterruptHandler,w
 10433  0BD8  00E7               	movwf	_TMR4_InterruptHandler^(0+128)
 10434  0BD9  0008               	return
 10435  0BDA                     __end_of_TMR4_SetInterruptHandler:	
 10436  0BDA                     __ptext10:	
 10437 ;; *************** function _SYSTEM_Initialize *****************
 10438 ;; Defined at:
 10439 ;;		line 87 in file "mcc_generated_files/mcc.c"
 10440 ;; Parameters:    Size  Location     Type
 10441 ;;		None
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;		None
 10444 ;; Return value:  Size  Location     Type
 10445 ;;                  1    wreg      void 
 10446 ;; Registers used:
 10447 ;;		wreg, status,2, status,0, pclath, cstack
 10448 ;; Tracked objects:
 10449 ;;		On entry : B1F/10
 10450 ;;		On exit  : 1F/E
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;Total ram usage:        0 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; Hardware stack levels required when called:    7
 10460 ;; This function calls:
 10461 ;;		_EUSART_Initialize
 10462 ;;		_OSCILLATOR_Initialize
 10463 ;;		_PIN_MANAGER_Initialize
 10464 ;;		_TMR2_Initialize
 10465 ;;		_TMR4_Initialize
 10466 ;;		_WWDT_Initialize
 10467 ;; This function is called by:
 10468 ;;		_main
 10469 ;; This function uses a non-reentrant model
 10470 ;;
 10471                           
 10472                           
 10473                           ;psect for function _SYSTEM_Initialize
 10474  0BDA                     _SYSTEM_Initialize:	
 10475                           
 10476                           ;mcc.c: 90: PIN_MANAGER_Initialize();
 10477                           
 10478                           ;incstack = 0
 10479                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10480  0BDA  23EE  3188         	fcall	_PIN_MANAGER_Initialize
 10481                           
 10482                           ;mcc.c: 91: OSCILLATOR_Initialize();
 10483  0BDC  23E5  3188         	fcall	_OSCILLATOR_Initialize
 10484                           
 10485                           ;mcc.c: 92: WWDT_Initialize();
 10486  0BDE  270A  3188         	fcall	_WWDT_Initialize
 10487                           
 10488                           ;mcc.c: 93: TMR4_Initialize();
 10489  0BE0  26F3  3188         	fcall	_TMR4_Initialize
 10490                           
 10491                           ;mcc.c: 94: TMR2_Initialize();
 10492  0BE2  273C               	fcall	_TMR2_Initialize
 10493                           
 10494                           ;mcc.c: 95: EUSART_Initialize();
 10495  0BE3  3180  2836         	ljmp	l3136
 10496  0BE5                     __end_of_SYSTEM_Initialize:	
 10497  0BE5                     __ptext17:	
 10498 ;; *************** function _OSCILLATOR_Initialize *****************
 10499 ;; Defined at:
 10500 ;;		line 98 in file "mcc_generated_files/mcc.c"
 10501 ;; Parameters:    Size  Location     Type
 10502 ;;		None
 10503 ;; Auto vars:     Size  Location     Type
 10504 ;;		None
 10505 ;; Return value:  Size  Location     Type
 10506 ;;                  1    wreg      void 
 10507 ;; Registers used:
 10508 ;;		wreg, status,2
 10509 ;; Tracked objects:
 10510 ;;		On entry : 0/10
 10511 ;;		On exit  : 1F/11
 10512 ;;		Unchanged: 0/0
 10513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;Total ram usage:        0 bytes
 10519 ;; Hardware stack levels used:    1
 10520 ;; Hardware stack levels required when called:    5
 10521 ;; This function calls:
 10522 ;;		Nothing
 10523 ;; This function is called by:
 10524 ;;		_SYSTEM_Initialize
 10525 ;; This function uses a non-reentrant model
 10526 ;;
 10527                           
 10528                           
 10529                           ;psect for function _OSCILLATOR_Initialize
 10530  0BE5                     _OSCILLATOR_Initialize:	
 10531                           
 10532                           ;mcc.c: 101: OSCCON1 = 0x60;
 10533                           
 10534                           ;incstack = 0
 10535                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10536  0BE5  3060               	movlw	96
 10537  0BE6  0031               	movlb	17	; select bank17
 10538  0BE7  008D               	movwf	13	;volatile
 10539                           
 10540                           ;mcc.c: 103: OSCCON3 = 0x00;
 10541  0BE8  018F               	clrf	15	;volatile
 10542                           
 10543                           ;mcc.c: 105: OSCEN = 0x00;
 10544  0BE9  0191               	clrf	17	;volatile
 10545                           
 10546                           ;mcc.c: 107: OSCFRQ = 0x06;
 10547  0BEA  3006               	movlw	6
 10548  0BEB  0093               	movwf	19	;volatile
 10549                           
 10550                           ;mcc.c: 109: OSCTUNE = 0x00;
 10551  0BEC  0192               	clrf	18	;volatile
 10552  0BED  0008               	return
 10553  0BEE                     __end_of_OSCILLATOR_Initialize:	
 10554  0BEE                     __ptext16:	
 10555 ;; *************** function _PIN_MANAGER_Initialize *****************
 10556 ;; Defined at:
 10557 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;  state           1    1[COMMON] unsigned char 
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  1    wreg      void 
 10564 ;; Registers used:
 10565 ;;		wreg, status,2, status,0
 10566 ;; Tracked objects:
 10567 ;;		On entry : B1F/10
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;Total ram usage:        1 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    5
 10578 ;; This function calls:
 10579 ;;		Nothing
 10580 ;; This function is called by:
 10581 ;;		_SYSTEM_Initialize
 10582 ;; This function uses a non-reentrant model
 10583 ;;
 10584                           
 10585                           
 10586                           ;psect for function _PIN_MANAGER_Initialize
 10587  0BEE                     _PIN_MANAGER_Initialize:	
 10588                           
 10589                           ;pin_manager.c: 57: LATE = 0x00;
 10590                           
 10591                           ;incstack = 0
 10592                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 10593  0BEE  0020               	movlb	0	; select bank0
 10594  0BEF  019A               	clrf	26	;volatile
 10595                           
 10596                           ;pin_manager.c: 58: LATD = 0x00;
 10597  0BF0  0199               	clrf	25	;volatile
 10598                           
 10599                           ;pin_manager.c: 59: LATA = 0x00;
 10600  0BF1  0196               	clrf	22	;volatile
 10601                           
 10602                           ;pin_manager.c: 60: LATB = 0x00;
 10603  0BF2  0197               	clrf	23	;volatile
 10604                           
 10605                           ;pin_manager.c: 61: LATC = 0x00;
 10606  0BF3  0198               	clrf	24	;volatile
 10607                           
 10608                           ;pin_manager.c: 66: TRISE = 0x07;
 10609  0BF4  3007               	movlw	7
 10610  0BF5  0095               	movwf	21	;volatile
 10611                           
 10612                           ;pin_manager.c: 67: TRISA = 0x0F;
 10613  0BF6  300F               	movlw	15
 10614  0BF7  0091               	movwf	17	;volatile
 10615                           
 10616                           ;pin_manager.c: 68: TRISB = 0xFF;
 10617  0BF8  30FF               	movlw	255
 10618  0BF9  0092               	movwf	18	;volatile
 10619                           
 10620                           ;pin_manager.c: 69: TRISC = 0xF9;
 10621  0BFA  30F9               	movlw	249
 10622  0BFB  0093               	movwf	19	;volatile
 10623                           
 10624                           ;pin_manager.c: 70: TRISD = 0xF3;
 10625  0BFC  30F3               	movlw	243
 10626  0BFD  0094               	movwf	20	;volatile
 10627                           
 10628                           ;pin_manager.c: 75: ANSELC = 0xDA;
 10629  0BFE  30DA               	movlw	218
 10630  0BFF  003E               	movlb	30	; select bank30
 10631  0C00  00CE               	movwf	78	;volatile
 10632                           
 10633                           ;pin_manager.c: 76: ANSELB = 0xEF;
 10634  0C01  30EF               	movlw	239
 10635  0C02  00C3               	movwf	67	;volatile
 10636                           
 10637                           ;pin_manager.c: 77: ANSELD = 0xF3;
 10638  0C03  30F3               	movlw	243
 10639  0C04  00D9               	movwf	89	;volatile
 10640                           
 10641                           ;pin_manager.c: 78: ANSELE = 0x07;
 10642  0C05  3007               	movlw	7
 10643  0C06  00E4               	movwf	100	;volatile
 10644                           
 10645                           ;pin_manager.c: 79: ANSELA = 0xFF;
 10646  0C07  30FF               	movlw	255
 10647  0C08  00B8               	movwf	56	;volatile
 10648                           
 10649                           ;pin_manager.c: 84: WPUD = 0x00;
 10650  0C09  01DA               	clrf	90	;volatile
 10651                           
 10652                           ;pin_manager.c: 85: WPUE = 0x00;
 10653  0C0A  01E5               	clrf	101	;volatile
 10654                           
 10655                           ;pin_manager.c: 86: WPUB = 0x10;
 10656  0C0B  3010               	movlw	16
 10657  0C0C  00C4               	movwf	68	;volatile
 10658                           
 10659                           ;pin_manager.c: 87: WPUA = 0x00;
 10660  0C0D  01B9               	clrf	57	;volatile
 10661                           
 10662                           ;pin_manager.c: 88: WPUC = 0x20;
 10663  0C0E  3020               	movlw	32
 10664  0C0F  00CF               	movwf	79	;volatile
 10665                           
 10666                           ;pin_manager.c: 93: ODCONE = 0x00;
 10667  0C10  01E6               	clrf	102	;volatile
 10668                           
 10669                           ;pin_manager.c: 94: ODCONA = 0x00;
 10670  0C11  01BA               	clrf	58	;volatile
 10671                           
 10672                           ;pin_manager.c: 95: ODCONB = 0x00;
 10673  0C12  01C5               	clrf	69	;volatile
 10674                           
 10675                           ;pin_manager.c: 96: ODCONC = 0x00;
 10676  0C13  01D0               	clrf	80	;volatile
 10677                           
 10678                           ;pin_manager.c: 97: ODCOND = 0x00;
 10679  0C14  01DB               	clrf	91	;volatile
 10680                           
 10681                           ;pin_manager.c: 104: bool state = (unsigned char)GIE;
 10682  0C15  3000               	movlw	0
 10683  0C16  1B8B               	btfsc	11,7	;volatile
 10684  0C17  3001               	movlw	1
 10685  0C18  00F1               	movwf	PIN_MANAGER_Initialize@state
 10686                           
 10687                           ;pin_manager.c: 105: GIE = 0;
 10688  0C19  138B               	bcf	11,7	;volatile
 10689                           
 10690                           ;pin_manager.c: 106: PPSLOCK = 0x55;
 10691                           
 10692                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
 10693  0C1A  27BA  3188         	fcall	PL26	;call to abstracted procedure
 10694                           
 10695                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x00;
 10696  0C1C  100F               	bcf	15,0	;volatile
 10697                           
 10698                           ;pin_manager.c: 110: RXPPSbits.RXPPS = 0x10;
 10699  0C1D  084B               	movf	75,w	;volatile
 10700  0C1E  39E0               	andlw	-32
 10701  0C1F  3810               	iorlw	16
 10702  0C20  00CB               	movwf	75	;volatile
 10703                           
 10704                           ;pin_manager.c: 111: RC1PPS = 0x10;
 10705  0C21  3010               	movlw	16
 10706  0C22  003E               	movlb	30	; select bank30
 10707  0C23  00A1               	movwf	33	;volatile
 10708                           
 10709                           ;pin_manager.c: 113: PPSLOCK = 0x55;
 10710                           
 10711                           ;pin_manager.c: 114: PPSLOCK = 0xAA;
 10712  0C24  27BA  3188         	fcall	PL26	;call to abstracted procedure
 10713                           
 10714                           ;pin_manager.c: 115: PPSLOCKbits.PPSLOCKED = 0x01;
 10715  0C26  140F               	bsf	15,0	;volatile
 10716                           
 10717                           ;pin_manager.c: 117: GIE = state;
 10718  0C27  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 10719  0C28  2C2B               	goto	u2240
 10720  0C29  178B               	bsf	11,7	;volatile
 10721  0C2A  0008               	return
 10722  0C2B                     u2240:	
 10723  0C2B  138B               	bcf	11,7	;volatile
 10724  0C2C  0008               	return
 10725  0C2D                     __end_of_PIN_MANAGER_Initialize:	
 10726  0C2D                     __ptext27:	
 10727 ;; *************** function _sprintf *****************
 10728 ;; Defined at:
 10729 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
 10730 ;; Parameters:    Size  Location     Type
 10731 ;;  sp              1    wreg     PTR unsigned char 
 10732 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), WiFly_SendCMD_DoubleArg@txBuffer(40), 
 10733 ;;		 -> WiFly_SendCMD_SingleArg@txBuffer(40), 
 10734 ;;  f               2    1[BANK0 ] PTR const unsigned char 
 10735 ;;		 -> STR_27(11), STR_26(14), STR_25(10), STR_20(13), 
 10736 ;;		 -> STR_13(13), STR_9(19), STR_8(25), 
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;  sp              1   22[BANK0 ] PTR unsigned char 
 10739 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), WiFly_SendCMD_DoubleArg@txBuffer(40), 
 10740 ;;		 -> WiFly_SendCMD_SingleArg@txBuffer(40), 
 10741 ;;  idx             1   11[BANK0 ] unsigned char 
 10742 ;;  tmpval          4    0        struct .
 10743 ;;  width           2   23[BANK0 ] int 
 10744 ;;  flag            2   20[BANK0 ] unsigned short 
 10745 ;;  val             2   17[BANK0 ] unsigned int 
 10746 ;;  len             2   15[BANK0 ] unsigned int 
 10747 ;;  cp              2   12[BANK0 ] PTR const unsigned char 
 10748 ;;		 -> STR_30(7), sprintf@c(1), STR_29(10), STR_28(14), 
 10749 ;;		 -> STR_23(5), STR_22(12), 
 10750 ;;  c               1   25[BANK0 ] char 
 10751 ;;  prec            1   19[BANK0 ] char 
 10752 ;;  ap              1   14[BANK0 ] PTR void [1]
 10753 ;;		 -> ?_sprintf(2), 
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  2    1[BANK0 ] int 
 10756 ;; Registers used:
 10757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10758 ;; Tracked objects:
 10759 ;;		On entry : 1F/0
 10760 ;;		On exit  : 1F/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10763 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;Total ram usage:       25 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    6
 10770 ;; This function calls:
 10771 ;;		___bmul
 10772 ;;		___lwdiv
 10773 ;;		___lwmod
 10774 ;;		___wmul
 10775 ;;		_isdigit
 10776 ;; This function is called by:
 10777 ;;		_WiFly_SendCMD_SingleArg
 10778 ;;		_WiFly_SendCMD_DoubleArg
 10779 ;;		_Pair
 10780 ;;		_Validate
 10781 ;;		_Knock
 10782 ;; This function uses a non-reentrant model
 10783 ;;
 10784                           
 10785                           
 10786                           ;psect for function _sprintf
 10787  0C2D                     _sprintf:	
 10788                           
 10789                           ;incstack = 0
 10790                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10791                           ;sprintf@sp stored from wreg
 10792  0C2D  00B6               	movwf	sprintf@sp
 10793                           
 10794                           ;doprnt.c: 494: va_list ap;
 10795                           ;doprnt.c: 499: signed char c;
 10796                           ;doprnt.c: 501: int width;
 10797                           ;doprnt.c: 506: signed char prec;
 10798                           ;doprnt.c: 508: unsigned short flag;
 10799                           ;doprnt.c: 523: union {
 10800                           ;doprnt.c: 524: unsigned long vd;
 10801                           ;doprnt.c: 525: double integ;
 10802                           ;doprnt.c: 526: } tmpval;
 10803                           ;doprnt.c: 528: unsigned int val;
 10804                           ;doprnt.c: 529: unsigned len;
 10805                           ;doprnt.c: 530: const char * cp;
 10806                           ;doprnt.c: 533: *ap = __va_start();
 10807  0C2E  3023               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 10808  0C2F  00AE               	movwf	sprintf@ap
 10809  0C30                     l3846:	
 10810                           ;doprnt.c: 536: while(c = *f++) {
 10811                           
 10812  0C30  0020               	movlb	0	; select bank0
 10813  0C31  275E  3188         	fcall	PL4	;call to abstracted procedure
 10814  0C33  0839               	movf	sprintf@c,w
 10815  0C34  1903               	btfsc	3,2
 10816  0C35  2E46               	goto	l3848
 10817                           
 10818                           ;doprnt.c: 538: if(c != '%')
 10819  0C36  3025               	movlw	37
 10820  0C37  0639               	xorwf	sprintf@c,w
 10821  0C38  1903               	btfsc	3,2
 10822  0C39  2C41               	goto	l3612
 10823                           
 10824                           ;doprnt.c: 540: {
 10825                           ;doprnt.c: 541: ((*sp++ = (c)));
 10826  0C3A  0836               	movf	sprintf@sp,w
 10827  0C3B  0086               	movwf	6
 10828  0C3C  0187               	clrf	7
 10829  0C3D  0839               	movf	sprintf@c,w
 10830  0C3E  0081               	movwf	1
 10831  0C3F  0AB6               	incf	sprintf@sp,f
 10832                           
 10833                           ;doprnt.c: 542: continue;
 10834  0C40  2C30               	goto	l3846
 10835  0C41                     l3612:	
 10836                           
 10837                           ;doprnt.c: 543: }
 10838                           ;doprnt.c: 546: width = 0;
 10839  0C41  01B7               	clrf	sprintf@width
 10840  0C42  01B8               	clrf	sprintf@width+1
 10841                           
 10842                           ;doprnt.c: 548: flag = 0;
 10843  0C43  01B4               	clrf	sprintf@flag
 10844  0C44  01B5               	clrf	sprintf@flag+1
 10845  0C45  2C4C               	goto	l3620
 10846  0C46                     l856:	
 10847                           ;doprnt.c: 553: case '-':
 10848                           
 10849                           
 10850                           ;doprnt.c: 554: flag |= 0x08;
 10851  0C46  15B4               	bsf	sprintf@flag,3
 10852                           
 10853                           ;doprnt.c: 556: continue;
 10854  0C47  2C49               	goto	l3614
 10855  0C48                     l858:	
 10856                           ;doprnt.c: 579: case '0':
 10857                           
 10858                           
 10859                           ;doprnt.c: 580: flag |= 0x04;
 10860  0C48  1534               	bsf	sprintf@flag,2
 10861  0C49                     l3614:	
 10862                           
 10863                           ;doprnt.c: 555: f++;
 10864  0C49  0AA1               	incf	sprintf@f,f
 10865  0C4A  1903               	skipnz
 10866  0C4B  0AA2               	incf	sprintf@f+1,f
 10867  0C4C                     l3620:	
 10868  0C4C  278F  3188         	fcall	PL12	;call to abstracted procedure
 10869                           
 10870                           ; Switch size 1, requested type "space"
 10871                           ; Number of cases is 2, Range of values is 45 to 48
 10872                           ; switch strategies available:
 10873                           ; Name         Instructions Cycles
 10874                           ; simple_byte            7     4 (average)
 10875                           ; direct_byte           17     9 (fixed)
 10876                           ; jumptable            263     9 (fixed)
 10877                           ;	Chosen strategy is simple_byte
 10878  0C4E  3A2D               	xorlw	45	; case 45
 10879  0C4F  1903               	skipnz
 10880  0C50  2C46               	goto	l856
 10881  0C51  3A1D               	xorlw	29	; case 48
 10882  0C52  1903               	skipnz
 10883  0C53  2C48               	goto	l858
 10884  0C54  2C55               	goto	l860
 10885  0C55                     l860:	
 10886                           
 10887                           ;doprnt.c: 593: if(flag & 0x08)
 10888  0C55  1DB4               	btfss	sprintf@flag,3
 10889  0C56  2C58               	goto	l3624
 10890                           
 10891                           ;doprnt.c: 594: flag &= ~0x04;
 10892  0C57  1134               	bcf	sprintf@flag,2
 10893  0C58                     l3624:	
 10894                           
 10895                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10896  0C58  278F  3188         	fcall	PL12	;call to abstracted procedure
 10897  0C5A  264B  3188         	fcall	_isdigit
 10898  0C5C  1C03               	btfss	3,0
 10899  0C5D  2C82               	goto	l3636
 10900                           
 10901                           ;doprnt.c: 598: width = 0;
 10902  0C5E  01B7               	clrf	sprintf@width
 10903  0C5F  01B8               	clrf	sprintf@width+1
 10904  0C60                     l3628:	
 10905                           
 10906                           ;doprnt.c: 600: width *= 10;
 10907  0C60  300A               	movlw	10
 10908  0C61  00F1               	movwf	___wmul@multiplier
 10909  0C62  01F2               	clrf	___wmul@multiplier+1
 10910  0C63  0838               	movf	sprintf@width+1,w
 10911  0C64  00F4               	movwf	___wmul@multiplicand+1
 10912  0C65  0837               	movf	sprintf@width,w
 10913  0C66  00F3               	movwf	___wmul@multiplicand
 10914  0C67  26DE  3188         	fcall	___wmul
 10915  0C69  0872               	movf	?___wmul+1,w
 10916  0C6A  00B8               	movwf	sprintf@width+1
 10917  0C6B  0871               	movf	?___wmul,w
 10918  0C6C  00B7               	movwf	sprintf@width
 10919                           
 10920                           ;doprnt.c: 601: width += *f++ - '0';
 10921  0C6D  278F  3188         	fcall	PL12	;call to abstracted procedure
 10922  0C6F  3ED0               	addlw	208
 10923  0C70  00A7               	movwf	??_sprintf
 10924  0C71  30FF               	movlw	255
 10925  0C72  1803               	skipnc
 10926  0C73  3000               	movlw	0
 10927  0C74  00A8               	movwf	??_sprintf+1
 10928  0C75  0827               	movf	??_sprintf,w
 10929  0C76  07B7               	addwf	sprintf@width,f
 10930  0C77  0828               	movf	??_sprintf+1,w
 10931  0C78  3DB8               	addwfc	sprintf@width+1,f
 10932  0C79  0AA1               	incf	sprintf@f,f
 10933  0C7A  1903               	skipnz
 10934  0C7B  0AA2               	incf	sprintf@f+1,f
 10935                           
 10936                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10937  0C7C  278F  3188         	fcall	PL12	;call to abstracted procedure
 10938  0C7E  264B  3188         	fcall	_isdigit
 10939  0C80  1803               	btfsc	3,0
 10940  0C81  2C60               	goto	l3628
 10941  0C82                     l3636:	
 10942                           
 10943                           ;doprnt.c: 608: }
 10944                           ;doprnt.c: 611: if(*f == '.') {
 10945  0C82  0821               	movf	sprintf@f,w
 10946  0C83  0084               	movwf	4
 10947  0C84  0822               	movf	sprintf@f+1,w
 10948  0C85  0085               	movwf	5
 10949  0C86  0012               	moviw fsr0++
 10950  0C87  3A2E               	xorlw	46
 10951  0C88  1D03               	btfss	3,2
 10952  0C89  2CA4               	goto	l3650
 10953                           
 10954                           ;doprnt.c: 612: flag |= 0x4000;
 10955  0C8A  1735               	bsf	sprintf@flag+1,6
 10956                           
 10957                           ;doprnt.c: 613: f++;
 10958  0C8B  0AA1               	incf	sprintf@f,f
 10959  0C8C  1903               	skipnz
 10960  0C8D  0AA2               	incf	sprintf@f+1,f
 10961                           
 10962                           ;doprnt.c: 620: {
 10963                           ;doprnt.c: 621: prec = 0;
 10964  0C8E  01B3               	clrf	sprintf@prec
 10965  0C8F                     l3648:	
 10966                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 10967                           
 10968  0C8F  278F  3188         	fcall	PL12	;call to abstracted procedure
 10969  0C91  264B  3188         	fcall	_isdigit
 10970  0C93  1C03               	btfss	3,0
 10971  0C94  2D27               	goto	l3710
 10972                           
 10973                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 10974  0C95  278F  3188         	fcall	PL12	;call to abstracted procedure
 10975  0C97  00A7               	movwf	??_sprintf
 10976  0C98  300A               	movlw	10
 10977  0C99  00F1               	movwf	___bmul@multiplicand
 10978  0C9A  0833               	movf	sprintf@prec,w
 10979  0C9B  26B2  3188         	fcall	___bmul
 10980  0C9D  0727               	addwf	??_sprintf,w
 10981  0C9E  3ED0               	addlw	-48
 10982  0C9F  00B3               	movwf	sprintf@prec
 10983  0CA0  0AA1               	incf	sprintf@f,f
 10984  0CA1  1903               	skipnz
 10985  0CA2  0AA2               	incf	sprintf@f+1,f
 10986  0CA3  2C8F               	goto	l3648
 10987  0CA4                     l3650:	
 10988                           
 10989                           ;doprnt.c: 626: prec = 0;
 10990  0CA4  01B3               	clrf	sprintf@prec
 10991  0CA5  2D27               	goto	l3710
 10992  0CA6                     l877:	
 10993                           
 10994                           ;doprnt.c: 718: case 'x':
 10995                           ;doprnt.c: 721: flag |= 0x80;
 10996  0CA6  17B4               	bsf	sprintf@flag,7
 10997                           
 10998                           ;doprnt.c: 723: break;
 10999  0CA7  2D3C               	goto	l875
 11000  0CA8                     l3652:	
 11001                           
 11002                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11003  0CA8  082E               	movf	sprintf@ap,w
 11004  0CA9  0086               	movwf	6
 11005  0CAA  0187               	clrf	7
 11006  0CAB  3F40               	moviw [0]fsr1
 11007  0CAC  00AC               	movwf	sprintf@cp
 11008  0CAD  3F41               	moviw [1]fsr1
 11009  0CAE  00AD               	movwf	sprintf@cp+1
 11010  0CAF  0AAE               	incf	sprintf@ap,f
 11011  0CB0  0AAE               	incf	sprintf@ap,f
 11012                           
 11013                           ;doprnt.c: 740: if(!cp)
 11014  0CB1  042C               	iorwf	sprintf@cp,w
 11015  0CB2  1D03               	btfss	3,2
 11016  0CB3  2CB8               	goto	l3660
 11017                           
 11018                           ;doprnt.c: 741: cp = "(null)";
 11019  0CB4  30C5               	movlw	low (STR_30| (0+32768))
 11020  0CB5  00AC               	movwf	sprintf@cp
 11021  0CB6  3092               	movlw	high (STR_30| (0+32768))
 11022  0CB7  00AD               	movwf	sprintf@cp+1
 11023  0CB8                     l3660:	
 11024                           
 11025                           ;doprnt.c: 745: len = 0;
 11026  0CB8  01AF               	clrf	sprintf@len
 11027  0CB9  01B0               	clrf	sprintf@len+1
 11028  0CBA                     l3664:	
 11029                           ;doprnt.c: 746: while(cp[len])
 11030                           
 11031  0CBA  082C               	movf	sprintf@cp,w
 11032  0CBB  072F               	addwf	sprintf@len,w
 11033  0CBC  0084               	movwf	4
 11034  0CBD  082D               	movf	sprintf@cp+1,w
 11035  0CBE  3D30               	addwfc	sprintf@len+1,w
 11036  0CBF  0085               	movwf	5
 11037  0CC0  0012               	moviw fsr0++
 11038  0CC1  1903               	btfsc	3,2
 11039  0CC2  2CC7               	goto	l3666
 11040                           
 11041                           ;doprnt.c: 747: len++;
 11042  0CC3  0AAF               	incf	sprintf@len,f
 11043  0CC4  1903               	skipnz
 11044  0CC5  0AB0               	incf	sprintf@len+1,f
 11045  0CC6  2CBA               	goto	l3664
 11046  0CC7                     l3666:	
 11047                           
 11048                           ;doprnt.c: 753: if(prec && prec < len)
 11049  0CC7  0833               	movf	sprintf@prec,w
 11050  0CC8  1903               	btfsc	3,2
 11051  0CC9  2CDC               	goto	l3672
 11052  0CCA  0833               	movf	sprintf@prec,w
 11053  0CCB  00A7               	movwf	??_sprintf
 11054  0CCC  01A8               	clrf	??_sprintf+1
 11055  0CCD  1BA7               	btfsc	??_sprintf,7
 11056  0CCE  03A8               	decf	??_sprintf+1,f
 11057  0CCF  0830               	movf	sprintf@len+1,w
 11058  0CD0  0228               	subwf	??_sprintf+1,w
 11059  0CD1  1D03               	skipz
 11060  0CD2  2CD5               	goto	u2895
 11061  0CD3  082F               	movf	sprintf@len,w
 11062  0CD4  0227               	subwf	??_sprintf,w
 11063  0CD5                     u2895:	
 11064  0CD5  1803               	skipnc
 11065  0CD6  2CDC               	goto	l3672
 11066                           
 11067                           ;doprnt.c: 754: len = prec;
 11068  0CD7  0833               	movf	sprintf@prec,w
 11069  0CD8  00AF               	movwf	sprintf@len
 11070  0CD9  01B0               	clrf	sprintf@len+1
 11071  0CDA  1BAF               	btfsc	sprintf@len,7
 11072  0CDB  03B0               	decf	sprintf@len+1,f
 11073  0CDC                     l3672:	
 11074                           
 11075                           ;doprnt.c: 757: if(width > len)
 11076  0CDC  0838               	movf	sprintf@width+1,w
 11077  0CDD  0230               	subwf	sprintf@len+1,w
 11078  0CDE  1D03               	skipz
 11079  0CDF  2CE2               	goto	u2905
 11080  0CE0  0837               	movf	sprintf@width,w
 11081  0CE1  022F               	subwf	sprintf@len,w
 11082  0CE2                     u2905:	
 11083  0CE2  1803               	skipnc
 11084  0CE3  2CE9               	goto	l3676
 11085                           
 11086                           ;doprnt.c: 758: width -= len;
 11087  0CE4  082F               	movf	sprintf@len,w
 11088  0CE5  02B7               	subwf	sprintf@width,f
 11089  0CE6  0830               	movf	sprintf@len+1,w
 11090  0CE7  3BB8               	subwfb	sprintf@width+1,f
 11091  0CE8  2CEB               	goto	l3678
 11092  0CE9                     l3676:	
 11093                           
 11094                           ;doprnt.c: 759: else
 11095                           ;doprnt.c: 760: width = 0;
 11096  0CE9  01B7               	clrf	sprintf@width
 11097  0CEA  01B8               	clrf	sprintf@width+1
 11098  0CEB                     l3678:	
 11099                           
 11100                           ;doprnt.c: 762: if(!(flag & 0x08))
 11101  0CEB  1DB4               	btfss	sprintf@flag,3
 11102  0CEC  2CF0               	goto	l3686
 11103  0CED  2D07               	goto	l3694
 11104  0CEE                     l3682:	
 11105                           
 11106                           ;doprnt.c: 765: ((*sp++ = (' ')));
 11107  0CEE  279F  3188         	fcall	PL16	;call to abstracted procedure
 11108  0CF0                     l3686:	
 11109  0CF0  30FF               	movlw	-1
 11110  0CF1  07B7               	addwf	sprintf@width,f
 11111  0CF2  1C03               	skipc
 11112  0CF3  03B8               	decf	sprintf@width+1,f
 11113  0CF4  0F37               	incfsz	sprintf@width,w
 11114  0CF5  2CEE               	goto	l3682
 11115  0CF6  0A38               	incf	sprintf@width+1,w
 11116  0CF7  1903               	btfsc	3,2
 11117  0CF8  2D07               	goto	l3694
 11118  0CF9  2CEE               	goto	l3682
 11119  0CFA                     l3688:	
 11120                           
 11121                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 11122  0CFA  0836               	movf	sprintf@sp,w
 11123  0CFB  0086               	movwf	6
 11124  0CFC  0187               	clrf	7
 11125  0CFD  082C               	movf	sprintf@cp,w
 11126  0CFE  0084               	movwf	4
 11127  0CFF  082D               	movf	sprintf@cp+1,w
 11128  0D00  0085               	movwf	5
 11129  0D01  0800               	movf	0,w	;code access
 11130  0D02  0081               	movwf	1
 11131  0D03  0AAC               	incf	sprintf@cp,f
 11132  0D04  1903               	skipnz
 11133  0D05  0AAD               	incf	sprintf@cp+1,f
 11134  0D06  0AB6               	incf	sprintf@sp,f
 11135  0D07                     l3694:	
 11136  0D07  3001               	movlw	1
 11137  0D08  02AF               	subwf	sprintf@len,f
 11138  0D09  3000               	movlw	0
 11139  0D0A  3BB0               	subwfb	sprintf@len+1,f
 11140  0D0B  0F2F               	incfsz	sprintf@len,w
 11141  0D0C  2CFA               	goto	l3688
 11142  0D0D  0A30               	incf	sprintf@len+1,w
 11143  0D0E  1D03               	btfss	3,2
 11144  0D0F  2CFA               	goto	l3688
 11145                           
 11146                           ;doprnt.c: 770: if(flag & 0x08)
 11147  0D10  19B4               	btfsc	sprintf@flag,3
 11148  0D11  2D15               	goto	l3702
 11149  0D12  2C30               	goto	l3846
 11150  0D13                     l3698:	
 11151                           
 11152                           ;doprnt.c: 772: ((*sp++ = (' ')));
 11153  0D13  279F  3188         	fcall	PL16	;call to abstracted procedure
 11154  0D15                     l3702:	
 11155  0D15  30FF               	movlw	-1
 11156  0D16  07B7               	addwf	sprintf@width,f
 11157  0D17  1C03               	skipc
 11158  0D18  03B8               	decf	sprintf@width+1,f
 11159  0D19  0F37               	incfsz	sprintf@width,w
 11160  0D1A  2D13               	goto	l3698
 11161  0D1B  0A38               	incf	sprintf@width+1,w
 11162  0D1C  1903               	btfsc	3,2
 11163  0D1D  2C30               	goto	l3846
 11164  0D1E  2D13               	goto	l3698
 11165  0D1F                     l3704:	
 11166                           
 11167                           ;doprnt.c: 805: cp = (char *)&c;
 11168  0D1F  3039               	movlw	low sprintf@c
 11169  0D20  00AC               	movwf	sprintf@cp
 11170  0D21  3000               	movlw	high sprintf@c
 11171  0D22  00AD               	movwf	sprintf@cp+1
 11172                           
 11173                           ;doprnt.c: 806: len = 1;
 11174  0D23  01AF               	clrf	sprintf@len
 11175  0D24  0AAF               	incf	sprintf@len,f
 11176  0D25  01B0               	clrf	sprintf@len+1
 11177                           
 11178                           ;doprnt.c: 807: goto dostring;
 11179  0D26  2CC7               	goto	l3666
 11180  0D27                     l3710:	
 11181  0D27  275E  3188         	fcall	PL4	;call to abstracted procedure
 11182                           
 11183                           ; Switch size 1, requested type "space"
 11184                           ; Number of cases is 6, Range of values is 0 to 120
 11185                           ; switch strategies available:
 11186                           ; Name         Instructions Cycles
 11187                           ; simple_byte           19    10 (average)
 11188                           ; direct_byte          248     6 (fixed)
 11189                           ; jumptable            260     6 (fixed)
 11190                           ;	Chosen strategy is simple_byte
 11191  0D29  3A00               	xorlw	0	; case 0
 11192  0D2A  1903               	skipnz
 11193  0D2B  2E46               	goto	l3848
 11194  0D2C  3A64               	xorlw	100	; case 100
 11195  0D2D  1903               	skipnz
 11196  0D2E  2D3C               	goto	l875
 11197  0D2F  3A0D               	xorlw	13	; case 105
 11198  0D30  1903               	skipnz
 11199  0D31  2D3C               	goto	l875
 11200  0D32  3A19               	xorlw	25	; case 112
 11201  0D33  1903               	skipnz
 11202  0D34  2CA6               	goto	l877
 11203  0D35  3A03               	xorlw	3	; case 115
 11204  0D36  1903               	skipnz
 11205  0D37  2CA8               	goto	l3652
 11206  0D38  3A0B               	xorlw	11	; case 120
 11207  0D39  1903               	skipnz
 11208  0D3A  2CA6               	goto	l877
 11209  0D3B  2D1F               	goto	l3704
 11210  0D3C                     l875:	
 11211                           
 11212                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11213  0D3C  1BB4               	btfsc	sprintf@flag,7
 11214  0D3D  2D4A               	goto	l3722
 11215                           
 11216                           ;doprnt.c: 1253: {
 11217                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11218  0D3E  2795  3188         	fcall	PL14	;call to abstracted procedure
 11219                           
 11220                           ;doprnt.c: 1261: if((int)val < 0) {
 11221  0D40  1FB2               	btfss	sprintf@val+1,7
 11222  0D41  2D4C               	goto	l3726
 11223                           
 11224                           ;doprnt.c: 1262: flag |= 0x03;
 11225  0D42  3003               	movlw	3
 11226  0D43  04B4               	iorwf	sprintf@flag,f
 11227                           
 11228                           ;doprnt.c: 1263: val = -val;
 11229  0D44  09B1               	comf	sprintf@val,f
 11230  0D45  09B2               	comf	sprintf@val+1,f
 11231  0D46  0AB1               	incf	sprintf@val,f
 11232  0D47  1903               	skipnz
 11233  0D48  0AB2               	incf	sprintf@val+1,f
 11234  0D49  2D4C               	goto	l3726
 11235  0D4A                     l3722:	
 11236                           
 11237                           ;doprnt.c: 1268: else
 11238                           ;doprnt.c: 1273: {
 11239                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11240  0D4A  2795  3188         	fcall	PL14	;call to abstracted procedure
 11241  0D4C                     l3726:	
 11242                           
 11243                           ;doprnt.c: 1287: }
 11244                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 11245  0D4C  0833               	movf	sprintf@prec,w
 11246  0D4D  1D03               	btfss	3,2
 11247  0D4E  2D7D               	goto	l3758
 11248  0D4F  0831               	movf	sprintf@val,w
 11249  0D50  0432               	iorwf	sprintf@val+1,w
 11250  0D51  1D03               	btfss	3,2
 11251  0D52  2D7D               	goto	l3758
 11252                           
 11253                           ;doprnt.c: 1291: prec++;
 11254  0D53  0AB3               	incf	sprintf@prec,f
 11255  0D54  2D7D               	goto	l3758
 11256  0D55                     l904:	
 11257                           ;doprnt.c: 1299: case 0x00:
 11258                           
 11259                           
 11260                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11261  0D55  01B9               	clrf	sprintf@c
 11262  0D56                     L3:	
 11263  0D56  3005               	movlw	5
 11264  0D57  0AB9               	incf	sprintf@c,f
 11265  0D58  0639               	xorwf	sprintf@c,w
 11266  0D59  1903               	btfsc	3,2
 11267  0D5A  2D85               	goto	l3760
 11268                           
 11269                           ;doprnt.c: 1306: if(val < dpowers[c])
 11270  0D5B  0839               	movf	sprintf@c,w
 11271  0D5C  2777  3188         	fcall	PL8	;call to abstracted procedure
 11272  0D5E  00A9               	movwf	??_sprintf+2
 11273  0D5F  3F01               	moviw [1]fsr0
 11274  0D60  00AA               	movwf	??_sprintf+3
 11275  0D61  0232               	subwf	sprintf@val+1,w
 11276  0D62  1D03               	skipz
 11277  0D63  2D66               	goto	u3015
 11278  0D64  0829               	movf	??_sprintf+2,w
 11279  0D65  0231               	subwf	sprintf@val,w
 11280  0D66                     u3015:	
 11281  0D66  1C03               	btfss	3,0
 11282  0D67  2D85               	goto	l3760
 11283  0D68  2D56               	goto	L3
 11284  0D69                     l909:	
 11285                           ;doprnt.c: 1314: case 0x80:
 11286                           
 11287                           
 11288                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11289  0D69  01B9               	clrf	sprintf@c
 11290  0D6A                     L4:	
 11291  0D6A  3004               	movlw	4
 11292  0D6B  0AB9               	incf	sprintf@c,f
 11293  0D6C  0639               	xorwf	sprintf@c,w
 11294  0D6D  1903               	btfsc	3,2
 11295  0D6E  2D85               	goto	l3760
 11296                           
 11297                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11298  0D6F  0839               	movf	sprintf@c,w
 11299  0D70  2783  3188         	fcall	PL10	;call to abstracted procedure
 11300  0D72  00A9               	movwf	??_sprintf+2
 11301  0D73  3F01               	moviw [1]fsr0
 11302  0D74  00AA               	movwf	??_sprintf+3
 11303  0D75  0232               	subwf	sprintf@val+1,w
 11304  0D76  1D03               	skipz
 11305  0D77  2D7A               	goto	u3035
 11306  0D78  0829               	movf	??_sprintf+2,w
 11307  0D79  0231               	subwf	sprintf@val,w
 11308  0D7A                     u3035:	
 11309  0D7A  1C03               	btfss	3,0
 11310  0D7B  2D85               	goto	l3760
 11311  0D7C  2D6A               	goto	L4
 11312  0D7D                     l3758:	
 11313  0D7D  0834               	movf	sprintf@flag,w
 11314  0D7E  3980               	andlw	128
 11315                           
 11316                           ; Switch size 1, requested type "space"
 11317                           ; Number of cases is 2, Range of values is 0 to 128
 11318                           ; switch strategies available:
 11319                           ; Name         Instructions Cycles
 11320                           ; simple_byte            7     4 (average)
 11321                           ; jumptable            260     6 (fixed)
 11322                           ;	Chosen strategy is simple_byte
 11323  0D7F  1903               	skipnz
 11324  0D80  2D55               	goto	l904
 11325  0D81  3A80               	xorlw	128	; case 128
 11326  0D82  1903               	skipnz
 11327  0D83  2D69               	goto	l909
 11328  0D84  2D85               	goto	l3760
 11329  0D85                     l3760:	
 11330                           
 11331                           ;doprnt.c: 1339: if(c < prec)
 11332  0D85  0839               	movf	sprintf@c,w
 11333  0D86  3A80               	xorlw	128
 11334  0D87  00A7               	movwf	??_sprintf
 11335  0D88  0833               	movf	sprintf@prec,w
 11336  0D89  3A80               	xorlw	128
 11337  0D8A  02A7               	subwf	??_sprintf,f
 11338                           
 11339                           ;doprnt.c: 1340: c = prec;
 11340  0D8B  0833               	movf	sprintf@prec,w
 11341  0D8C  1803               	skipnc
 11342  0D8D  2D90               	goto	L7
 11343  0D8E  00B9               	movwf	sprintf@c
 11344  0D8F  2D99               	goto	l3768
 11345  0D90                     L7:	
 11346                           ;doprnt.c: 1341: else if(prec < c)
 11347                           
 11348  0D90  3A80               	xorlw	128
 11349  0D91  00A7               	movwf	??_sprintf
 11350  0D92  0839               	movf	sprintf@c,w
 11351  0D93  3A80               	xorlw	128
 11352  0D94  02A7               	subwf	??_sprintf,f
 11353  0D95  1803               	skipnc
 11354  0D96  2D99               	goto	l3768
 11355                           
 11356                           ;doprnt.c: 1342: prec = c;
 11357  0D97  0839               	movf	sprintf@c,w
 11358  0D98  00B3               	movwf	sprintf@prec
 11359  0D99                     l3768:	
 11360                           
 11361                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11362  0D99  0837               	movf	sprintf@width,w
 11363  0D9A  0438               	iorwf	sprintf@width+1,w
 11364  0D9B  1903               	btfsc	3,2
 11365  0D9C  2DA5               	goto	l3774
 11366  0D9D  0834               	movf	sprintf@flag,w
 11367  0D9E  3903               	andlw	3
 11368  0D9F  1903               	btfsc	3,2
 11369  0DA0  2DA5               	goto	l3774
 11370                           
 11371                           ;doprnt.c: 1346: width--;
 11372  0DA1  30FF               	movlw	-1
 11373  0DA2  07B7               	addwf	sprintf@width,f
 11374  0DA3  1C03               	skipc
 11375  0DA4  03B8               	decf	sprintf@width+1,f
 11376  0DA5                     l3774:	
 11377                           
 11378                           ;doprnt.c: 1348: if(flag & 0x4000) {
 11379  0DA5  1F35               	btfss	sprintf@flag+1,6
 11380  0DA6  2DB4               	goto	l3782
 11381                           
 11382                           ;doprnt.c: 1349: if(width > prec)
 11383  0DA7  0833               	movf	sprintf@prec,w
 11384  0DA8  274F  3188         	fcall	PL2	;call to abstracted procedure
 11385  0DAA  1803               	skipnc
 11386  0DAB  2DB1               	goto	l3780
 11387                           
 11388                           ;doprnt.c: 1350: width -= prec;
 11389  0DAC  0020               	movlb	0	; select bank0
 11390  0DAD  0833               	movf	sprintf@prec,w
 11391  0DAE  27A6  3188         	fcall	PL18	;call to abstracted procedure
 11392  0DB0  2DB4               	goto	l3782
 11393  0DB1                     l3780:	
 11394                           
 11395                           ;doprnt.c: 1351: else
 11396                           ;doprnt.c: 1352: width = 0;
 11397  0DB1  0020               	movlb	0	; select bank0
 11398  0DB2  01B7               	clrf	sprintf@width
 11399  0DB3  01B8               	clrf	sprintf@width+1
 11400  0DB4                     l3782:	
 11401                           
 11402                           ;doprnt.c: 1353: }
 11403                           ;doprnt.c: 1381: if(width > c)
 11404  0DB4  0839               	movf	sprintf@c,w
 11405  0DB5  274F  3188         	fcall	PL2	;call to abstracted procedure
 11406  0DB7  1803               	skipnc
 11407  0DB8  2DBE               	goto	l3786
 11408                           
 11409                           ;doprnt.c: 1382: width -= c;
 11410  0DB9  0020               	movlb	0	; select bank0
 11411  0DBA  0839               	movf	sprintf@c,w
 11412  0DBB  27A6  3188         	fcall	PL18	;call to abstracted procedure
 11413  0DBD  2DC1               	goto	l3788
 11414  0DBE                     l3786:	
 11415                           
 11416                           ;doprnt.c: 1383: else
 11417                           ;doprnt.c: 1384: width = 0;
 11418  0DBE  0020               	movlb	0	; select bank0
 11419  0DBF  01B7               	clrf	sprintf@width
 11420  0DC0  01B8               	clrf	sprintf@width+1
 11421  0DC1                     l3788:	
 11422                           
 11423                           ;doprnt.c: 1387: if(flag & 0x04) {
 11424  0DC1  1D34               	btfss	sprintf@flag,2
 11425  0DC2  2DDC               	goto	l3804
 11426                           
 11427                           ;doprnt.c: 1392: if(flag & 0x03)
 11428  0DC3  0834               	movf	sprintf@flag,w
 11429  0DC4  3903               	andlw	3
 11430  0DC5  1903               	btfsc	3,2
 11431  0DC6  2DCD               	goto	l3796
 11432                           
 11433                           ;doprnt.c: 1393: ((*sp++ = ('-')));
 11434  0DC7  0836               	movf	sprintf@sp,w
 11435  0DC8  0086               	movwf	6
 11436  0DC9  302D               	movlw	45
 11437  0DCA  0187               	clrf	7
 11438  0DCB  0081               	movwf	1
 11439  0DCC  0AB6               	incf	sprintf@sp,f
 11440  0DCD                     l3796:	
 11441                           
 11442                           ;doprnt.c: 1415: if(width)
 11443  0DCD  0837               	movf	sprintf@width,w
 11444  0DCE  0438               	iorwf	sprintf@width+1,w
 11445  0DCF  1903               	btfsc	3,2
 11446  0DD0  2E2F               	goto	l3836
 11447                           
 11448                           ;doprnt.c: 1417: ((*sp++ = ('0')));
 11449  0DD1  0836               	movf	sprintf@sp,w
 11450  0DD2  0086               	movwf	6
 11451  0DD3  3030               	movlw	48
 11452  0DD4  0187               	clrf	7
 11453  0DD5  0081               	movwf	1
 11454  0DD6  30FF               	movlw	-1
 11455  0DD7  0AB6               	incf	sprintf@sp,f
 11456                           
 11457                           ;doprnt.c: 1418: while(--width);
 11458  0DD8  07B7               	addwf	sprintf@width,f
 11459  0DD9  1C03               	skipc
 11460  0DDA  03B8               	decf	sprintf@width+1,f
 11461  0DDB  2DCD               	goto	l3796
 11462  0DDC                     l3804:	
 11463                           
 11464                           ;doprnt.c: 1422: {
 11465                           ;doprnt.c: 1424: if(width
 11466                           ;doprnt.c: 1426: && !(flag & 0x08)
 11467                           ;doprnt.c: 1428: )
 11468  0DDC  0837               	movf	sprintf@width,w
 11469  0DDD  0438               	iorwf	sprintf@width+1,w
 11470  0DDE  1D03               	btfss	3,2
 11471  0DDF  19B4               	btfsc	sprintf@flag,3
 11472  0DE0  2DE6               	goto	l3814
 11473  0DE1                     l3808:	
 11474                           
 11475                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 11476  0DE1  0836               	movf	sprintf@sp,w
 11477                           
 11478                           ;doprnt.c: 1431: while(--width);
 11479  0DE2  276B  3188         	fcall	PL6	;call to abstracted procedure
 11480  0DE4  1D03               	btfss	3,2
 11481  0DE5  2DE1               	goto	l3808
 11482  0DE6                     l3814:	
 11483                           
 11484                           ;doprnt.c: 1438: if(flag & 0x03)
 11485  0DE6  0834               	movf	sprintf@flag,w
 11486  0DE7  3903               	andlw	3
 11487  0DE8  1903               	btfsc	3,2
 11488  0DE9  2E2F               	goto	l3836
 11489                           
 11490                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 11491  0DEA  0836               	movf	sprintf@sp,w
 11492  0DEB  0086               	movwf	6
 11493  0DEC  302D               	movlw	45
 11494  0DED  0187               	clrf	7
 11495  0DEE  2E2D               	goto	L6
 11496  0DEF                     l3820:	
 11497                           
 11498                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11499  0DEF  300A               	movlw	10
 11500  0DF0  00F8               	movwf	___lwmod@divisor
 11501  0DF1  01F9               	clrf	___lwmod@divisor+1
 11502  0DF2  0833               	movf	sprintf@prec,w
 11503  0DF3  2777  3188         	fcall	PL8	;call to abstracted procedure
 11504  0DF5  00F1               	movwf	___lwdiv@divisor
 11505  0DF6  3F01               	moviw [1]fsr0
 11506  0DF7  00F2               	movwf	___lwdiv@divisor+1
 11507  0DF8  0832               	movf	sprintf@val+1,w
 11508  0DF9  00F4               	movwf	___lwdiv@dividend+1
 11509  0DFA  0831               	movf	sprintf@val,w
 11510  0DFB  00F3               	movwf	___lwdiv@dividend
 11511  0DFC  2659  3188         	fcall	___lwdiv
 11512  0DFE  0872               	movf	?___lwdiv+1,w
 11513  0DFF  00FB               	movwf	___lwmod@dividend+1
 11514  0E00  0871               	movf	?___lwdiv,w
 11515  0E01  00FA               	movwf	___lwmod@dividend
 11516  0E02  26BE  3188         	fcall	___lwmod
 11517  0E04  0878               	movf	?___lwmod,w
 11518  0E05  3E30               	addlw	48
 11519  0E06  2E1F               	goto	L5
 11520  0E07                     l3822:	
 11521                           ;doprnt.c: 1491: break;
 11522                           
 11523                           
 11524                           ;doprnt.c: 1499: {
 11525                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11526  0E07  0832               	movf	sprintf@val+1,w
 11527  0E08  00F4               	movwf	___lwdiv@dividend+1
 11528  0E09  0831               	movf	sprintf@val,w
 11529  0E0A  00F3               	movwf	___lwdiv@dividend
 11530  0E0B  0833               	movf	sprintf@prec,w
 11531  0E0C  2783  3188         	fcall	PL10	;call to abstracted procedure
 11532  0E0E  00F1               	movwf	___lwdiv@divisor
 11533  0E0F  3F01               	moviw [1]fsr0
 11534  0E10  00F2               	movwf	___lwdiv@divisor+1
 11535  0E11  2659  3188         	fcall	___lwdiv
 11536  0E13  0871               	movf	?___lwdiv,w
 11537  0E14  00AB               	movwf	sprintf@idx
 11538  0E15  300F               	movlw	15
 11539  0E16  05AB               	andwf	sprintf@idx,f
 11540                           
 11541                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11542  0E17  082B               	movf	sprintf@idx,w
 11543  0E18  3EFF               	addlw	low (STR_31| (0+32768))
 11544  0E19  0084               	movwf	4
 11545  0E1A  3091               	movlw	high (STR_31| (0+32768))
 11546  0E1B  1803               	skipnc
 11547  0E1C  3E01               	addlw	1
 11548  0E1D  0085               	movwf	5
 11549  0E1E  0800               	movf	0,w	;code access
 11550  0E1F                     L5:	
 11551  0E1F  00B9               	movwf	sprintf@c
 11552                           
 11553                           ;doprnt.c: 1508: }
 11554                           ;doprnt.c: 1510: break;
 11555  0E20  2E29               	goto	l3832
 11556  0E21                     l3830:	
 11557  0E21  0834               	movf	sprintf@flag,w
 11558  0E22  3980               	andlw	128
 11559                           
 11560                           ; Switch size 1, requested type "space"
 11561                           ; Number of cases is 2, Range of values is 0 to 128
 11562                           ; switch strategies available:
 11563                           ; Name         Instructions Cycles
 11564                           ; simple_byte            7     4 (average)
 11565                           ; jumptable            260     6 (fixed)
 11566                           ;	Chosen strategy is simple_byte
 11567  0E23  1903               	skipnz
 11568  0E24  2DEF               	goto	l3820
 11569  0E25  3A80               	xorlw	128	; case 128
 11570  0E26  1903               	skipnz
 11571  0E27  2E07               	goto	l3822
 11572  0E28  2E29               	goto	l3832
 11573  0E29                     l3832:	
 11574                           
 11575                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11576  0E29  0836               	movf	sprintf@sp,w
 11577  0E2A  0086               	movwf	6
 11578  0E2B  0187               	clrf	7
 11579  0E2C  0839               	movf	sprintf@c,w
 11580  0E2D                     L6:	
 11581  0E2D  0081               	movwf	1
 11582  0E2E  0AB6               	incf	sprintf@sp,f
 11583  0E2F                     l3836:	
 11584  0E2F  03B3               	decf	sprintf@prec,f
 11585  0E30  0F33               	incfsz	sprintf@prec,w
 11586  0E31  2E21               	goto	l3830
 11587                           
 11588                           ;doprnt.c: 1525: }
 11589                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 11590  0E32  1DB4               	btfss	sprintf@flag,3
 11591  0E33  2C30               	goto	l3846
 11592  0E34  0838               	movf	sprintf@width+1,w
 11593  0E35  3A80               	xorlw	128
 11594  0E36  00A7               	movwf	??_sprintf
 11595  0E37  3080               	movlw	128
 11596  0E38  0227               	subwf	??_sprintf,w
 11597  0E39  1D03               	skipz
 11598  0E3A  2E3D               	goto	u3215
 11599  0E3B  3001               	movlw	1
 11600  0E3C  0237               	subwf	sprintf@width,w
 11601  0E3D                     u3215:	
 11602  0E3D  1C03               	skipc
 11603  0E3E  2C30               	goto	l3846
 11604  0E3F                     l3840:	
 11605                           
 11606                           ;doprnt.c: 1530: ((*sp++ = (' ')));
 11607  0E3F  0020               	movlb	0	; select bank0
 11608  0E40  0836               	movf	sprintf@sp,w
 11609                           
 11610                           ;doprnt.c: 1531: while(--width);
 11611  0E41  276B  3188         	fcall	PL6	;call to abstracted procedure
 11612  0E43  1903               	btfsc	3,2
 11613  0E44  2C30               	goto	l3846
 11614  0E45  2E3F               	goto	l3840
 11615  0E46                     l3848:	
 11616                           
 11617                           ;doprnt.c: 1538: *sp = 0;
 11618  0E46  0836               	movf	sprintf@sp,w
 11619  0E47  0086               	movwf	6
 11620  0E48  0187               	clrf	7
 11621  0E49  0181               	clrf	1
 11622  0E4A  0008               	return
 11623  0E4B                     __end_of_sprintf:	
 11624  0E4B                     __ptext28:	
 11625 ;; *************** function _isdigit *****************
 11626 ;; Defined at:
 11627 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  c               1    wreg     unsigned char 
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;  c               1    2[COMMON] unsigned char 
 11632 ;; Return value:  Size  Location     Type
 11633 ;;		None               void
 11634 ;; Registers used:
 11635 ;;		wreg, status,2, status,0
 11636 ;; Tracked objects:
 11637 ;;		On entry : 1F/0
 11638 ;;		On exit  : 1F/0
 11639 ;;		Unchanged: 1F/0
 11640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;Total ram usage:        2 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:    5
 11648 ;; This function calls:
 11649 ;;		Nothing
 11650 ;; This function is called by:
 11651 ;;		_sprintf
 11652 ;; This function uses a non-reentrant model
 11653 ;;
 11654                           
 11655                           
 11656                           ;psect for function _isdigit
 11657  0E4B                     _isdigit:	
 11658                           
 11659                           ;incstack = 0
 11660                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11661                           ;isdigit@c stored from wreg
 11662  0E4B  00F2               	movwf	isdigit@c
 11663  0E4C  303A               	movlw	58
 11664  0E4D  01F1               	clrf	_isdigit$1889
 11665  0E4E  0272               	subwf	isdigit@c,w
 11666  0E4F  1803               	skipnc
 11667  0E50  2E57               	goto	l2588
 11668  0E51  3030               	movlw	48
 11669  0E52  0272               	subwf	isdigit@c,w
 11670  0E53  1C03               	skipc
 11671  0E54  2E57               	goto	l2588
 11672  0E55  01F1               	clrf	_isdigit$1889
 11673  0E56  0AF1               	incf	_isdigit$1889,f
 11674  0E57                     l2588:	
 11675  0E57  0C71               	rrf	_isdigit$1889,w
 11676  0E58  0008               	return
 11677  0E59                     __end_of_isdigit:	
 11678  0E59                     __ptext31:	
 11679 ;; *************** function ___lwdiv *****************
 11680 ;; Defined at:
 11681 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;  divisor         2    1[COMMON] unsigned int 
 11684 ;;  dividend        2    3[COMMON] unsigned int 
 11685 ;; Auto vars:     Size  Location     Type
 11686 ;;  quotient        2    5[COMMON] unsigned int 
 11687 ;;  counter         1    7[COMMON] unsigned char 
 11688 ;; Return value:  Size  Location     Type
 11689 ;;                  2    1[COMMON] unsigned int 
 11690 ;; Registers used:
 11691 ;;		wreg, status,2, status,0
 11692 ;; Tracked objects:
 11693 ;;		On entry : 1F/0
 11694 ;;		On exit  : 1F/0
 11695 ;;		Unchanged: 1F/0
 11696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11697 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;Total ram usage:        7 bytes
 11702 ;; Hardware stack levels used:    1
 11703 ;; Hardware stack levels required when called:    5
 11704 ;; This function calls:
 11705 ;;		Nothing
 11706 ;; This function is called by:
 11707 ;;		_sprintf
 11708 ;; This function uses a non-reentrant model
 11709 ;;
 11710                           
 11711                           
 11712                           ;psect for function ___lwdiv
 11713  0E59                     ___lwdiv:	
 11714                           
 11715                           ;incstack = 0
 11716                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11717  0E59  01F5               	clrf	___lwdiv@quotient
 11718  0E5A  01F6               	clrf	___lwdiv@quotient+1
 11719  0E5B  0871               	movf	___lwdiv@divisor,w
 11720  0E5C  0472               	iorwf	___lwdiv@divisor+1,w
 11721  0E5D  1903               	btfsc	3,2
 11722  0E5E  2E79               	goto	l2644
 11723  0E5F  01F7               	clrf	___lwdiv@counter
 11724  0E60                     L9:	
 11725  0E60  0AF7               	incf	___lwdiv@counter,f
 11726  0E61  1BF2               	btfsc	___lwdiv@divisor+1,7
 11727  0E62  2E66               	goto	l2632
 11728  0E63  35F1               	lslf	___lwdiv@divisor,f
 11729  0E64  0DF2               	rlf	___lwdiv@divisor+1,f
 11730  0E65  2E60               	goto	L9
 11731  0E66                     l2632:	
 11732  0E66  35F5               	lslf	___lwdiv@quotient,f
 11733  0E67  0DF6               	rlf	___lwdiv@quotient+1,f
 11734  0E68  0872               	movf	___lwdiv@divisor+1,w
 11735  0E69  0274               	subwf	___lwdiv@dividend+1,w
 11736  0E6A  1D03               	skipz
 11737  0E6B  2E6E               	goto	u1545
 11738  0E6C  0871               	movf	___lwdiv@divisor,w
 11739  0E6D  0273               	subwf	___lwdiv@dividend,w
 11740  0E6E                     u1545:	
 11741  0E6E  1C03               	skipc
 11742  0E6F  2E75               	goto	l2640
 11743  0E70  0871               	movf	___lwdiv@divisor,w
 11744  0E71  02F3               	subwf	___lwdiv@dividend,f
 11745  0E72  0872               	movf	___lwdiv@divisor+1,w
 11746  0E73  3BF4               	subwfb	___lwdiv@dividend+1,f
 11747  0E74  1475               	bsf	___lwdiv@quotient,0
 11748  0E75                     l2640:	
 11749  0E75  36F2               	lsrf	___lwdiv@divisor+1,f
 11750  0E76  0CF1               	rrf	___lwdiv@divisor,f
 11751  0E77  0BF7               	decfsz	___lwdiv@counter,f
 11752  0E78  2E66               	goto	l2632
 11753  0E79                     l2644:	
 11754  0E79  0876               	movf	___lwdiv@quotient+1,w
 11755  0E7A  00F2               	movwf	?___lwdiv+1
 11756  0E7B  0875               	movf	___lwdiv@quotient,w
 11757  0E7C  00F1               	movwf	?___lwdiv
 11758  0E7D  0008               	return
 11759  0E7E                     __end_of___lwdiv:	
 11760  0E7E                     __ptext37:	
 11761 ;; *************** function _WiFly_SendString *****************
 11762 ;; Defined at:
 11763 ;;		line 67 in file "mcc_generated_files/WiFly.c"
 11764 ;; Parameters:    Size  Location     Type
 11765 ;;  sendString      2    5[COMMON] PTR const unsigned char 
 11766 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), STR_19(387), 
 11767 ;;		 -> STR_17(9), STR_15(14), STR_11(21), STR_10(18), 
 11768 ;;		 -> STR_7(16), STR_6(21), STR_5(16), STR_4(7), 
 11769 ;;		 -> STR_3(9), STR_2(7), 
 11770 ;; Auto vars:     Size  Location     Type
 11771 ;;		None
 11772 ;; Return value:  Size  Location     Type
 11773 ;;                  1    wreg      void 
 11774 ;; Registers used:
 11775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11776 ;; Tracked objects:
 11777 ;;		On entry : 0/0
 11778 ;;		On exit  : 0/0
 11779 ;;		Unchanged: 0/0
 11780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11781 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;Total ram usage:        2 bytes
 11786 ;; Hardware stack levels used:    1
 11787 ;; Hardware stack levels required when called:    7
 11788 ;; This function calls:
 11789 ;;		_Clear_RX_Buffer
 11790 ;;		_WiFly_Send
 11791 ;; This function is called by:
 11792 ;;		_WiFly_SendCMD
 11793 ;;		_WiFly_RebootCMD
 11794 ;;		_WiFly_SaveConfig
 11795 ;;		_WiFly_FactoryReset
 11796 ;;		_WiFly_Example_InitializeAsClient
 11797 ;;		_send_message
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800                           
 11801                           
 11802                           ;psect for function _WiFly_SendString
 11803  0E7E                     _WiFly_SendString:	
 11804  0E7E                     l3566:	
 11805                           ;incstack = 0
 11806                           ; Regs used in _WiFly_SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11807                           
 11808                           
 11809                           ;WiFly.c: 68: Clear_RX_Buffer();
 11810  0E7E  22DD  3188         	fcall	_Clear_RX_Buffer
 11811                           
 11812                           ;WiFly.c: 69: WiFly_Send(sendString);
 11813  0E80  0876               	movf	WiFly_SendString@sendString+1,w
 11814  0E81  00F3               	movwf	WiFly_Send@command+1
 11815  0E82  0875               	movf	WiFly_SendString@sendString,w
 11816  0E83  00F2               	movwf	WiFly_Send@command
 11817  0E84  2E91               	ljmp	l2540
 11818  0E85                     __end_of_WiFly_SendString:	
 11819  0E85                     __ptext6:	
 11820 ;; *************** function _WiFly_SendCMD *****************
 11821 ;; Defined at:
 11822 ;;		line 133 in file "mcc_generated_files/WiFly.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;  cmd             2    4[BANK0 ] PTR const unsigned char 
 11825 ;;		 -> STR_10(18), STR_7(16), STR_6(21), 
 11826 ;; Auto vars:     Size  Location     Type
 11827 ;;		None
 11828 ;; Return value:  Size  Location     Type
 11829 ;;                  1    wreg      void 
 11830 ;; Registers used:
 11831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11832 ;; Tracked objects:
 11833 ;;		On entry : 1F/0
 11834 ;;		On exit  : 1F/0
 11835 ;;		Unchanged: 0/0
 11836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11837 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;Total ram usage:        2 bytes
 11842 ;; Hardware stack levels used:    1
 11843 ;; Hardware stack levels required when called:    9
 11844 ;; This function calls:
 11845 ;;		_WiFly_CheckInCMD
 11846 ;;		_WiFly_CheckRecv
 11847 ;;		_WiFly_SendString
 11848 ;; This function is called by:
 11849 ;;		_WiFly_FactoryReset
 11850 ;;		_WiFly_Example_InitializeAsClient
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854                           
 11855                           ;psect for function _WiFly_SendCMD
 11856  0E85                     _WiFly_SendCMD:	
 11857                           
 11858                           ;WiFly.c: 135: WiFly_CheckInCMD();
 11859                           
 11860                           ;incstack = 0
 11861                           ; Regs used in _WiFly_SendCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11862  0E85  23AD  3188         	fcall	_WiFly_CheckInCMD
 11863                           
 11864                           ;WiFly.c: 136: WiFly_SendString(cmd);
 11865  0E87  0020               	movlb	0	; select bank0
 11866  0E88  0825               	movf	WiFly_SendCMD@cmd+1,w
 11867  0E89  00F6               	movwf	WiFly_SendString@sendString+1
 11868  0E8A  0824               	movf	WiFly_SendCMD@cmd,w
 11869  0E8B  00F5               	movwf	WiFly_SendString@sendString
 11870  0E8C  267E  3188         	fcall	_WiFly_SendString
 11871                           
 11872                           ;WiFly.c: 137: WiFly_CheckRecv(aokStr);
 11873  0E8E  27CB  3188         	fcall	PL32	;call to abstracted procedure
 11874  0E90  28DB               	ljmp	l3536
 11875  0E91                     __end_of_WiFly_SendCMD:	
 11876  0E91                     __ptext38:	
 11877 ;; *************** function _WiFly_Send *****************
 11878 ;; Defined at:
 11879 ;;		line 50 in file "mcc_generated_files/WiFly.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;  command         2    2[COMMON] PTR unsigned char 
 11882 ;;		 -> Knock@knockString(10), Validate@valString(13), Pair@pairString(9), STR_19(387), 
 11883 ;;		 -> STR_17(9), STR_15(14), STR_11(21), STR_10(18), 
 11884 ;;		 -> STR_7(16), STR_6(21), STR_5(16), STR_4(7), 
 11885 ;;		 -> STR_3(9), WiFly_SendCMD_DoubleArg@txBuffer(40), WiFly_SendCMD_SingleArg@txBuffer(40), STR_2(7), 
 11886 ;;		 -> STR_1(4), 
 11887 ;; Auto vars:     Size  Location     Type
 11888 ;;		None
 11889 ;; Return value:  Size  Location     Type
 11890 ;;                  1    wreg      void 
 11891 ;; Registers used:
 11892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11893 ;; Tracked objects:
 11894 ;;		On entry : 0/0
 11895 ;;		On exit  : 0/0
 11896 ;;		Unchanged: 0/0
 11897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11898 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;Total ram usage:        3 bytes
 11903 ;; Hardware stack levels used:    1
 11904 ;; Hardware stack levels required when called:    6
 11905 ;; This function calls:
 11906 ;;		_EUSART_Write
 11907 ;; This function is called by:
 11908 ;;		_WiFly_SendString
 11909 ;;		_WiFly_EnterCMDMode
 11910 ;;		_WiFly_SendCMD_SingleArg
 11911 ;;		_WiFly_SendCMD_DoubleArg
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           
 11916                           ;psect for function _WiFly_Send
 11917  0E91                     _WiFly_Send:	
 11918  0E91                     l2540:	
 11919                           ;WiFly.c: 51: while (*command != '\0')
 11920                           
 11921                           ;incstack = 0
 11922                           ; Regs used in _WiFly_Send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11923                           
 11924  0E91  0872               	movf	WiFly_Send@command,w
 11925  0E92  0084               	movwf	4
 11926  0E93  0873               	movf	WiFly_Send@command+1,w
 11927  0E94  0085               	movwf	5
 11928  0E95  0012               	moviw fsr0++
 11929  0E96  1903               	btfsc	3,2
 11930  0E97  0008               	return
 11931                           
 11932                           ;WiFly.c: 52: uart[WiFly].Write(*command++);
 11933  0E98  0872               	movf	WiFly_Send@command,w
 11934  0E99  0084               	movwf	4
 11935  0E9A  0873               	movf	WiFly_Send@command+1,w
 11936  0E9B  0085               	movwf	5
 11937  0E9C  0800               	movf	0,w	;code access
 11938  0E9D  00F1               	movwf	EUSART_Write@txData
 11939  0E9E  30D8               	movlw	low ((_uart+18)| (0+32768))
 11940  0E9F  0084               	movwf	4
 11941  0EA0  3091               	movlw	high ((_uart+18)| (0+32768))
 11942  0EA1  0085               	movwf	5
 11943  0EA2  3F01               	moviw [1]fsr0
 11944  0EA3  008A               	movwf	10
 11945  0EA4  3F00               	moviw [0]fsr0
 11946  0EA5  000A               	callw
 11947  0EA6  3188               	pagesel	$
 11948  0EA7  0AF2               	incf	WiFly_Send@command,f
 11949  0EA8  1903               	skipnz
 11950  0EA9  0AF3               	incf	WiFly_Send@command+1,f
 11951  0EAA  2E91               	goto	l2540
 11952  0EAB                     __end_of_WiFly_Send:	
 11953  0EAB                     __ptext7:	
 11954 ;; *************** function _WiFly_SaveConfig *****************
 11955 ;; Defined at:
 11956 ;;		line 149 in file "mcc_generated_files/WiFly.c"
 11957 ;; Parameters:    Size  Location     Type
 11958 ;;		None
 11959 ;; Auto vars:     Size  Location     Type
 11960 ;;		None
 11961 ;; Return value:  Size  Location     Type
 11962 ;;                  1    wreg      void 
 11963 ;; Registers used:
 11964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11965 ;; Tracked objects:
 11966 ;;		On entry : 0/0
 11967 ;;		On exit  : 1F/1
 11968 ;;		Unchanged: 0/0
 11969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;Total ram usage:        0 bytes
 11975 ;; Hardware stack levels used:    1
 11976 ;; Hardware stack levels required when called:   10
 11977 ;; This function calls:
 11978 ;;		_WiFly_RebootCMD
 11979 ;;		_WiFly_SendString
 11980 ;; This function is called by:
 11981 ;;		_WiFly_FactoryReset
 11982 ;;		_WiFly_Example_InitializeAsClient
 11983 ;; This function uses a non-reentrant model
 11984 ;;
 11985                           
 11986                           
 11987                           ;psect for function _WiFly_SaveConfig
 11988  0EAB                     _WiFly_SaveConfig:	
 11989  0EAB                     l3868:	
 11990                           ;incstack = 0
 11991                           ; Regs used in _WiFly_SaveConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11992                           
 11993                           
 11994                           ;WiFly.c: 151: WiFly_SendString("save\r\n");
 11995  0EAB  30DA               	movlw	low (STR_4| (0+32768))
 11996  0EAC  00F5               	movwf	WiFly_SendString@sendString
 11997  0EAD  3092               	movlw	high (STR_4| (0+32768))
 11998  0EAE  00F6               	movwf	WiFly_SendString@sendString+1
 11999  0EAF  267E  3188         	fcall	_WiFly_SendString
 12000                           
 12001                           ;WiFly.c: 152: WiFly_RebootCMD();
 12002  0EB1  2896               	ljmp	l3852
 12003  0EB2                     __end_of_WiFly_SaveConfig:	
 12004  0EB2                     __ptext32:	
 12005 ;; *************** function ___bmul *****************
 12006 ;; Defined at:
 12007 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul8.c"
 12008 ;; Parameters:    Size  Location     Type
 12009 ;;  multiplier      1    wreg     unsigned char 
 12010 ;;  multiplicand    1    1[COMMON] unsigned char 
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;  multiplier      1    3[COMMON] unsigned char 
 12013 ;;  product         1    2[COMMON] unsigned char 
 12014 ;; Return value:  Size  Location     Type
 12015 ;;                  1    wreg      unsigned char 
 12016 ;; Registers used:
 12017 ;;		wreg, status,2, status,0
 12018 ;; Tracked objects:
 12019 ;;		On entry : 1F/0
 12020 ;;		On exit  : 1F/0
 12021 ;;		Unchanged: 1F/0
 12022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12023 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;Total ram usage:        3 bytes
 12028 ;; Hardware stack levels used:    1
 12029 ;; Hardware stack levels required when called:    5
 12030 ;; This function calls:
 12031 ;;		Nothing
 12032 ;; This function is called by:
 12033 ;;		_sprintf
 12034 ;; This function uses a non-reentrant model
 12035 ;;
 12036                           
 12037                           
 12038                           ;psect for function ___bmul
 12039  0EB2                     ___bmul:	
 12040                           
 12041                           ;incstack = 0
 12042                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12043                           ;___bmul@multiplier stored from wreg
 12044  0EB2  00F3               	movwf	___bmul@multiplier
 12045  0EB3  01F2               	clrf	___bmul@product
 12046  0EB4                     l2610:	
 12047  0EB4  0871               	movf	___bmul@multiplicand,w
 12048  0EB5  1873               	btfsc	___bmul@multiplier,0
 12049  0EB6  07F2               	addwf	___bmul@product,f
 12050  0EB7  35F1               	lslf	___bmul@multiplicand,f
 12051  0EB8  36F3               	lsrf	___bmul@multiplier,f
 12052  0EB9  0873               	movf	___bmul@multiplier,w
 12053  0EBA  1D03               	btfss	3,2
 12054  0EBB  2EB4               	goto	l2610
 12055  0EBC  0872               	movf	___bmul@product,w
 12056  0EBD  0008               	return
 12057  0EBE                     __end_of___bmul:	
 12058  0EBE                     __ptext30:	
 12059 ;; *************** function ___lwmod *****************
 12060 ;; Defined at:
 12061 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;  divisor         2    8[COMMON] unsigned int 
 12064 ;;  dividend        2   10[COMMON] unsigned int 
 12065 ;; Auto vars:     Size  Location     Type
 12066 ;;  counter         1    0[BANK0 ] unsigned char 
 12067 ;; Return value:  Size  Location     Type
 12068 ;;                  2    8[COMMON] unsigned int 
 12069 ;; Registers used:
 12070 ;;		wreg, status,2, status,0
 12071 ;; Tracked objects:
 12072 ;;		On entry : 1F/0
 12073 ;;		On exit  : 1F/0
 12074 ;;		Unchanged: 0/0
 12075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12076 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;Total ram usage:        5 bytes
 12081 ;; Hardware stack levels used:    1
 12082 ;; Hardware stack levels required when called:    5
 12083 ;; This function calls:
 12084 ;;		Nothing
 12085 ;; This function is called by:
 12086 ;;		_sprintf
 12087 ;; This function uses a non-reentrant model
 12088 ;;
 12089                           
 12090                           
 12091                           ;psect for function ___lwmod
 12092  0EBE                     ___lwmod:	
 12093                           
 12094                           ;incstack = 0
 12095                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12096  0EBE  0878               	movf	___lwmod@divisor,w
 12097  0EBF  0479               	iorwf	___lwmod@divisor+1,w
 12098  0EC0  1903               	btfsc	3,2
 12099  0EC1  2ED9               	goto	l3584
 12100  0EC2  01A0               	clrf	___lwmod@counter
 12101  0EC3                     L8:	
 12102  0EC3  0AA0               	incf	___lwmod@counter,f
 12103  0EC4  1BF9               	btfsc	___lwmod@divisor+1,7
 12104  0EC5  2EC9               	goto	l3576
 12105  0EC6  35F8               	lslf	___lwmod@divisor,f
 12106  0EC7  0DF9               	rlf	___lwmod@divisor+1,f
 12107  0EC8  2EC3               	goto	L8
 12108  0EC9                     l3576:	
 12109  0EC9  0879               	movf	___lwmod@divisor+1,w
 12110  0ECA  027B               	subwf	___lwmod@dividend+1,w
 12111  0ECB  1D03               	skipz
 12112  0ECC  2ECF               	goto	u2775
 12113  0ECD  0878               	movf	___lwmod@divisor,w
 12114  0ECE  027A               	subwf	___lwmod@dividend,w
 12115  0ECF                     u2775:	
 12116  0ECF  1C03               	skipc
 12117  0ED0  2ED5               	goto	l3580
 12118  0ED1  0878               	movf	___lwmod@divisor,w
 12119  0ED2  02FA               	subwf	___lwmod@dividend,f
 12120  0ED3  0879               	movf	___lwmod@divisor+1,w
 12121  0ED4  3BFB               	subwfb	___lwmod@dividend+1,f
 12122  0ED5                     l3580:	
 12123  0ED5  36F9               	lsrf	___lwmod@divisor+1,f
 12124  0ED6  0CF8               	rrf	___lwmod@divisor,f
 12125  0ED7  0BA0               	decfsz	___lwmod@counter,f
 12126  0ED8  2EC9               	goto	l3576
 12127  0ED9                     l3584:	
 12128  0ED9  087B               	movf	___lwmod@dividend+1,w
 12129  0EDA  00F9               	movwf	?___lwmod+1
 12130  0EDB  087A               	movf	___lwmod@dividend,w
 12131  0EDC  00F8               	movwf	?___lwmod
 12132  0EDD  0008               	return
 12133  0EDE                     __end_of___lwmod:	
 12134  0EDE                     __ptext29:	
 12135 ;; *************** function ___wmul *****************
 12136 ;; Defined at:
 12137 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 12138 ;; Parameters:    Size  Location     Type
 12139 ;;  multiplier      2    1[COMMON] unsigned int 
 12140 ;;  multiplicand    2    3[COMMON] unsigned int 
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;  product         2    5[COMMON] unsigned int 
 12143 ;; Return value:  Size  Location     Type
 12144 ;;                  2    1[COMMON] unsigned int 
 12145 ;; Registers used:
 12146 ;;		wreg, status,2, status,0
 12147 ;; Tracked objects:
 12148 ;;		On entry : 1F/0
 12149 ;;		On exit  : 1F/0
 12150 ;;		Unchanged: 1F/0
 12151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12152 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;Total ram usage:        6 bytes
 12157 ;; Hardware stack levels used:    1
 12158 ;; Hardware stack levels required when called:    5
 12159 ;; This function calls:
 12160 ;;		Nothing
 12161 ;; This function is called by:
 12162 ;;		_sprintf
 12163 ;; This function uses a non-reentrant model
 12164 ;;
 12165                           
 12166                           
 12167                           ;psect for function ___wmul
 12168  0EDE                     ___wmul:	
 12169                           
 12170                           ;incstack = 0
 12171                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12172  0EDE  01F5               	clrf	___wmul@product
 12173  0EDF  01F6               	clrf	___wmul@product+1
 12174  0EE0                     l2594:	
 12175  0EE0  1C71               	btfss	___wmul@multiplier,0
 12176  0EE1  2EE6               	goto	l2598
 12177  0EE2  0873               	movf	___wmul@multiplicand,w
 12178  0EE3  07F5               	addwf	___wmul@product,f
 12179  0EE4  0874               	movf	___wmul@multiplicand+1,w
 12180  0EE5  3DF6               	addwfc	___wmul@product+1,f
 12181  0EE6                     l2598:	
 12182  0EE6  35F3               	lslf	___wmul@multiplicand,f
 12183  0EE7  0DF4               	rlf	___wmul@multiplicand+1,f
 12184  0EE8  36F2               	lsrf	___wmul@multiplier+1,f
 12185  0EE9  0CF1               	rrf	___wmul@multiplier,f
 12186  0EEA  0871               	movf	___wmul@multiplier,w
 12187  0EEB  0472               	iorwf	___wmul@multiplier+1,w
 12188  0EEC  1D03               	btfss	3,2
 12189  0EED  2EE0               	goto	l2594
 12190  0EEE  0876               	movf	___wmul@product+1,w
 12191  0EEF  00F2               	movwf	?___wmul+1
 12192  0EF0  0875               	movf	___wmul@product,w
 12193  0EF1  00F1               	movwf	?___wmul
 12194  0EF2  0008               	return
 12195  0EF3                     __end_of___wmul:	
 12196  0EF3                     __ptext12:	
 12197 ;; *************** function _TMR4_Initialize *****************
 12198 ;; Defined at:
 12199 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 12200 ;; Parameters:    Size  Location     Type
 12201 ;;		None
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;		None
 12204 ;; Return value:  Size  Location     Type
 12205 ;;                  1    wreg      void 
 12206 ;; Registers used:
 12207 ;;		wreg, status,2, status,0, pclath, cstack
 12208 ;; Tracked objects:
 12209 ;;		On entry : 1F/10
 12210 ;;		On exit  : 1F/5
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;Total ram usage:        0 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; Hardware stack levels required when called:    6
 12220 ;; This function calls:
 12221 ;;		_TMR4_SetInterruptHandler
 12222 ;;		_TMR4_Start
 12223 ;; This function is called by:
 12224 ;;		_SYSTEM_Initialize
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           
 12229                           ;psect for function _TMR4_Initialize
 12230  0EF3                     _TMR4_Initialize:	
 12231                           
 12232                           ;tmr4.c: 68: T4CON = 0x7F;
 12233                           
 12234                           ;incstack = 0
 12235                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12236  0EF3  307F               	movlw	127
 12237  0EF4  0025               	movlb	5	; select bank5
 12238  0EF5  0094               	movwf	20	;volatile
 12239                           
 12240                           ;tmr4.c: 71: T4CLKCON = 0x04;
 12241  0EF6  3004               	movlw	4
 12242  0EF7  0096               	movwf	22	;volatile
 12243                           
 12244                           ;tmr4.c: 74: T4HLT = 0x00;
 12245  0EF8  0195               	clrf	21	;volatile
 12246                           
 12247                           ;tmr4.c: 77: T4RST = 0x00;
 12248  0EF9  0197               	clrf	23	;volatile
 12249                           
 12250                           ;tmr4.c: 80: T4PR = 0xE2;
 12251  0EFA  30E2               	movlw	226
 12252  0EFB  0093               	movwf	19	;volatile
 12253                           
 12254                           ;tmr4.c: 83: T4TMR = 0x00;
 12255  0EFC  0192               	clrf	18	;volatile
 12256                           
 12257                           ;tmr4.c: 86: PIR4bits.TMR4IF = 0;
 12258  0EFD  002E               	movlb	14	; select bank14
 12259  0EFE  1190               	bcf	16,3	;volatile
 12260                           
 12261                           ;tmr4.c: 89: PIE4bits.TMR4IE = 1;
 12262  0EFF  159A               	bsf	26,3	;volatile
 12263                           
 12264                           ;tmr4.c: 92: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
 12265  0F00  3022               	movlw	low _TMR4_DefaultInterruptHandler
 12266  0F01  00F1               	movwf	TMR4_SetInterruptHandler@InterruptHandler
 12267  0F02  3001               	movlw	high _TMR4_DefaultInterruptHandler
 12268  0F03  00F2               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1
 12269  0F04  23D4  3188         	fcall	_TMR4_SetInterruptHandler
 12270                           
 12271                           ;tmr4.c: 95: TMR4_Start();
 12272  0F06  2F07               	ljmp	l3588
 12273  0F07                     __end_of_TMR4_Initialize:	
 12274  0F07                     __ptext46:	
 12275 ;; *************** function _TMR4_Start *****************
 12276 ;; Defined at:
 12277 ;;		line 110 in file "mcc_generated_files/tmr4.c"
 12278 ;; Parameters:    Size  Location     Type
 12279 ;;		None
 12280 ;; Auto vars:     Size  Location     Type
 12281 ;;		None
 12282 ;; Return value:  Size  Location     Type
 12283 ;;                  1    wreg      void 
 12284 ;; Registers used:
 12285 ;;		None
 12286 ;; Tracked objects:
 12287 ;;		On entry : 1E/1
 12288 ;;		On exit  : 1F/5
 12289 ;;		Unchanged: 0/0
 12290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;Total ram usage:        0 bytes
 12296 ;; Hardware stack levels used:    1
 12297 ;; Hardware stack levels required when called:    5
 12298 ;; This function calls:
 12299 ;;		Nothing
 12300 ;; This function is called by:
 12301 ;;		_TMR4_Initialize
 12302 ;;		_TMR4_StartTimer
 12303 ;; This function uses a non-reentrant model
 12304 ;;
 12305                           
 12306                           
 12307                           ;psect for function _TMR4_Start
 12308  0F07                     _TMR4_Start:	
 12309  0F07                     l3588:	
 12310                           ;incstack = 0
 12311                           ; Regs used in _TMR4_Start: []
 12312                           
 12313                           
 12314                           ;tmr4.c: 113: T4CONbits.TMR4ON = 1;
 12315  0F07  0025               	movlb	5	; select bank5
 12316  0F08  1794               	bsf	20,7	;volatile
 12317  0F09  0008               	return
 12318  0F0A                     __end_of_TMR4_Start:	
 12319  0F0A                     __ptext11:	
 12320 ;; *************** function _WWDT_Initialize *****************
 12321 ;; Defined at:
 12322 ;;		line 113 in file "mcc_generated_files/mcc.c"
 12323 ;; Parameters:    Size  Location     Type
 12324 ;;		None
 12325 ;; Auto vars:     Size  Location     Type
 12326 ;;		None
 12327 ;; Return value:  Size  Location     Type
 12328 ;;                  1    wreg      void 
 12329 ;; Registers used:
 12330 ;;		wreg
 12331 ;; Tracked objects:
 12332 ;;		On entry : 1F/11
 12333 ;;		On exit  : 1F/10
 12334 ;;		Unchanged: 0/0
 12335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12340 ;;Total ram usage:        0 bytes
 12341 ;; Hardware stack levels used:    1
 12342 ;; Hardware stack levels required when called:    5
 12343 ;; This function calls:
 12344 ;;		Nothing
 12345 ;; This function is called by:
 12346 ;;		_SYSTEM_Initialize
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           
 12351                           ;psect for function _WWDT_Initialize
 12352  0F0A                     _WWDT_Initialize:	
 12353                           
 12354                           ;mcc.c: 116: WDTCON0 = 36;
 12355                           
 12356                           ;incstack = 0
 12357                           ; Regs used in _WWDT_Initialize: [wreg]
 12358  0F0A  3024               	movlw	36
 12359  0F0B  0030               	movlb	16	; select bank16
 12360  0F0C  008C               	movwf	12	;volatile
 12361                           
 12362                           ;mcc.c: 117: WDTCON1 = 7|0;
 12363  0F0D  3007               	movlw	7
 12364  0F0E  008D               	movwf	13	;volatile
 12365  0F0F  0008               	return
 12366  0F10                     __end_of_WWDT_Initialize:	
 12367  0F10                     __ptext2:	
 12368 ;; *************** function _connect_network *****************
 12369 ;; Defined at:
 12370 ;;		line 264 in file "main.c"
 12371 ;; Parameters:    Size  Location     Type
 12372 ;;  ssid            2   74[BANK0 ] PTR const unsigned char 
 12373 ;;		 -> STR_28(14), 
 12374 ;;  passwd          2   76[BANK0 ] PTR const unsigned char 
 12375 ;;		 -> STR_29(10), 
 12376 ;; Auto vars:     Size  Location     Type
 12377 ;;		None
 12378 ;; Return value:  Size  Location     Type
 12379 ;;                  1    wreg      void 
 12380 ;; Registers used:
 12381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12382 ;; Tracked objects:
 12383 ;;		On entry : 1F/0
 12384 ;;		On exit  : 1F/0
 12385 ;;		Unchanged: 0/0
 12386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12387 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;Total ram usage:        4 bytes
 12392 ;; Hardware stack levels used:    1
 12393 ;; Hardware stack levels required when called:   13
 12394 ;; This function calls:
 12395 ;;		_WiFly_Example_InitializeAsClient
 12396 ;; This function is called by:
 12397 ;;		_main
 12398 ;; This function uses a non-reentrant model
 12399 ;;
 12400                           
 12401                           
 12402                           ;psect for function _connect_network
 12403  0F10                     _connect_network:	
 12404                           
 12405                           ;main.c: 266: WiFly_Example_InitializeAsClient(ssid, passwd);
 12406                           
 12407                           ;incstack = 0
 12408                           ; Regs used in _connect_network: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12409  0F10  086B               	movf	connect_network@ssid+1,w
 12410  0F11  00E7               	movwf	WiFly_Example_InitializeAsClient@ssid+1
 12411  0F12  086A               	movf	connect_network@ssid,w
 12412  0F13  00E6               	movwf	WiFly_Example_InitializeAsClient@ssid
 12413  0F14  086D               	movf	connect_network@passwd+1,w
 12414  0F15  00E9               	movwf	WiFly_Example_InitializeAsClient@password+1
 12415  0F16  086C               	movf	connect_network@passwd,w
 12416  0F17  00E8               	movwf	WiFly_Example_InitializeAsClient@password
 12417  0F18  28AA               	ljmp	l601
 12418  0F19                     __end_of_connect_network:	
 12419  0F19                     __ptext1:	
 12420 ;; *************** function _eeprom_read *****************
 12421 ;; Defined at:
 12422 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic\eeread.c"
 12423 ;; Parameters:    Size  Location     Type
 12424 ;;  addr            1    wreg     unsigned char 
 12425 ;; Auto vars:     Size  Location     Type
 12426 ;;  addr            1    1[COMMON] unsigned char 
 12427 ;; Return value:  Size  Location     Type
 12428 ;;                  1    wreg      unsigned char 
 12429 ;; Registers used:
 12430 ;;		wreg
 12431 ;; Tracked objects:
 12432 ;;		On entry : 1F/5
 12433 ;;		On exit  : 1F/10
 12434 ;;		Unchanged: 0/0
 12435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;Total ram usage:        1 bytes
 12441 ;; Hardware stack levels used:    1
 12442 ;; Hardware stack levels required when called:    5
 12443 ;; This function calls:
 12444 ;;		Nothing
 12445 ;; This function is called by:
 12446 ;;		_main
 12447 ;; This function uses a non-reentrant model
 12448 ;;
 12449                           
 12450                           
 12451                           ;psect for function _eeprom_read
 12452  0F19                     _eeprom_read:	
 12453                           
 12454                           ;incstack = 0
 12455                           ; Regs used in _eeprom_read: [wreg]
 12456                           ;eeprom_read@addr stored from wreg
 12457  0F19  00F1               	movwf	eeprom_read@addr
 12458  0F1A  2F1C               	goto	l956
 12459  0F1B                     u2501:	
 12460  0F1B  0025               	movlb	5	; select bank5
 12461  0F1C                     l956:	
 12462  0F1C  0064               	clrwdt	;# 
 12463  0F1D  0030               	movlb	16	; select bank16
 12464  0F1E  189E               	btfsc	30,1	;volsfr
 12465  0F1F  2F1B               	goto	u2501
 12466  0F20  171E               	bsf	30,6	;volsfr
 12467  0F21  0871               	movf	eeprom_read@addr,w
 12468  0F22  009A               	movwf	26	;volatile
 12469  0F23  3070               	movlw	112
 12470  0F24  009B               	movwf	27	;volatile
 12471  0F25  141E               	bsf	30,0	;volsfr
 12472  0F26  081C               	movf	28,w	;volatile
 12473  0F27  0008               	return
 12474  0F28                     __end_of_eeprom_read:	
 12475  0F28                     __ptext59:	
 12476 ;; *************** function _RELAY_RL1_Disengage *****************
 12477 ;; Defined at:
 12478 ;;		line 29 in file "mcc_generated_files/Relay_app.c"
 12479 ;; Parameters:    Size  Location     Type
 12480 ;;		None
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;		None
 12483 ;; Return value:  Size  Location     Type
 12484 ;;                  1    wreg      void 
 12485 ;; Registers used:
 12486 ;;		None
 12487 ;; Tracked objects:
 12488 ;;		On entry : 0/10
 12489 ;;		On exit  : 1F/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;Total ram usage:        0 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; Hardware stack levels required when called:    5
 12499 ;; This function calls:
 12500 ;;		Nothing
 12501 ;; This function is called by:
 12502 ;;		_Knock
 12503 ;; This function uses a non-reentrant model
 12504 ;;
 12505                           
 12506                           
 12507                           ;psect for function _RELAY_RL1_Disengage
 12508  0F28                     _RELAY_RL1_Disengage:	
 12509                           
 12510                           ;incstack = 0
 12511                           ; Regs used in _RELAY_RL1_Disengage: []
 12512                           ;Relay_app.c: 30: do { LATCbits.LATC2 = 0; } while(0);
 12513  0F28  0020               	movlb	0	; select bank0
 12514  0F29  1118               	bcf	24,2	;volatile
 12515  0F2A  0008               	return
 12516  0F2B                     __end_of_RELAY_RL1_Disengage:	
 12517  0F2B                     __ptext52:	
 12518 ;; *************** function _ClearIndicators *****************
 12519 ;; Defined at:
 12520 ;;		line 72 in file "main.c"
 12521 ;; Parameters:    Size  Location     Type
 12522 ;;		None
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;		None
 12525 ;; Return value:  Size  Location     Type
 12526 ;;                  1    wreg      void 
 12527 ;; Registers used:
 12528 ;;		status,2
 12529 ;; Tracked objects:
 12530 ;;		On entry : 1F/5
 12531 ;;		On exit  : 1F/0
 12532 ;;		Unchanged: 0/0
 12533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;Total ram usage:        0 bytes
 12539 ;; Hardware stack levels used:    1
 12540 ;; Hardware stack levels required when called:    5
 12541 ;; This function calls:
 12542 ;;		Nothing
 12543 ;; This function is called by:
 12544 ;;		_goto_mode
 12545 ;; This function uses a non-reentrant model
 12546 ;;
 12547                           
 12548                           
 12549                           ;psect for function _ClearIndicators
 12550  0F2B                     _ClearIndicators:	
 12551  0F2B                     l3870:	
 12552                           ;incstack = 0
 12553                           ; Regs used in _ClearIndicators: [status,2]
 12554                           
 12555                           
 12556                           ;main.c: 73: indStatus = 0;
 12557  0F2B  0021               	movlb	1	; select bank1
 12558  0F2C  01CE               	clrf	_indStatus^(0+128)
 12559                           
 12560                           ;main.c: 74: LATAbits.LATA4 = 0;
 12561  0F2D  0020               	movlb	0	; select bank0
 12562  0F2E  1216               	bcf	22,4	;volatile
 12563                           
 12564                           ;main.c: 75: LATAbits.LATA5 = 0;
 12565  0F2F  1296               	bcf	22,5	;volatile
 12566                           
 12567                           ;main.c: 76: LATAbits.LATA6 = 0;
 12568  0F30  1316               	bcf	22,6	;volatile
 12569                           
 12570                           ;main.c: 77: LATAbits.LATA7 = 0;
 12571  0F31  1396               	bcf	22,7	;volatile
 12572  0F32  0008               	return
 12573  0F33                     __end_of_ClearIndicators:	
 12574  0F33                     __ptext50:	
 12575 ;; *************** function _TMR2_Start *****************
 12576 ;; Defined at:
 12577 ;;		line 110 in file "mcc_generated_files/tmr2.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;		None
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;		None
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  1    wreg      void 
 12584 ;; Registers used:
 12585 ;;		None
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/1
 12588 ;;		On exit  : 1F/5
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;Total ram usage:        0 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; Hardware stack levels required when called:    5
 12598 ;; This function calls:
 12599 ;;		Nothing
 12600 ;; This function is called by:
 12601 ;;		_TMR2_Initialize
 12602 ;;		_TMR2_StartTimer
 12603 ;; This function uses a non-reentrant model
 12604 ;;
 12605                           
 12606                           
 12607                           ;psect for function _TMR2_Start
 12608  0F33                     _TMR2_Start:	
 12609  0F33                     l3592:	
 12610                           ;incstack = 0
 12611                           ; Regs used in _TMR2_Start: []
 12612                           
 12613                           
 12614                           ;tmr2.c: 113: T2CONbits.TMR2ON = 1;
 12615  0F33  0025               	movlb	5	; select bank5
 12616  0F34  178E               	bsf	14,7	;volatile
 12617  0F35  0008               	return
 12618  0F36                     __end_of_TMR2_Start:	
 12619  0F36                     __ptext48:	
 12620 ;; *************** function _TMR2_Stop *****************
 12621 ;; Defined at:
 12622 ;;		line 121 in file "mcc_generated_files/tmr2.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;		None
 12625 ;; Auto vars:     Size  Location     Type
 12626 ;;		None
 12627 ;; Return value:  Size  Location     Type
 12628 ;;                  1    wreg      void 
 12629 ;; Registers used:
 12630 ;;		None
 12631 ;; Tracked objects:
 12632 ;;		On entry : 0/1
 12633 ;;		On exit  : 1F/5
 12634 ;;		Unchanged: 0/0
 12635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;Total ram usage:        0 bytes
 12641 ;; Hardware stack levels used:    1
 12642 ;; Hardware stack levels required when called:    5
 12643 ;; This function calls:
 12644 ;;		Nothing
 12645 ;; This function is called by:
 12646 ;;		_TMR2_StopTimer
 12647 ;; This function uses a non-reentrant model
 12648 ;;
 12649                           
 12650                           
 12651                           ;psect for function _TMR2_Stop
 12652  0F36                     _TMR2_Stop:	
 12653  0F36                     l3594:	
 12654                           ;incstack = 0
 12655                           ; Regs used in _TMR2_Stop: []
 12656                           
 12657                           
 12658                           ;tmr2.c: 124: T2CONbits.TMR2ON = 0;
 12659  0F36  0025               	movlb	5	; select bank5
 12660  0F37  138E               	bcf	14,7	;volatile
 12661  0F38  0008               	return
 12662  0F39                     __end_of_TMR2_Stop:	
 12663  0F39                     __ptext44:	
 12664 ;; *************** function _TMR4_Stop *****************
 12665 ;; Defined at:
 12666 ;;		line 121 in file "mcc_generated_files/tmr4.c"
 12667 ;; Parameters:    Size  Location     Type
 12668 ;;		None
 12669 ;; Auto vars:     Size  Location     Type
 12670 ;;		None
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  1    wreg      void 
 12673 ;; Registers used:
 12674 ;;		None
 12675 ;; Tracked objects:
 12676 ;;		On entry : 1A/5
 12677 ;;		On exit  : 1F/5
 12678 ;;		Unchanged: 0/0
 12679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;Total ram usage:        0 bytes
 12685 ;; Hardware stack levels used:    1
 12686 ;; Hardware stack levels required when called:    5
 12687 ;; This function calls:
 12688 ;;		Nothing
 12689 ;; This function is called by:
 12690 ;;		_TMR4_StopTimer
 12691 ;; This function uses a non-reentrant model
 12692 ;;
 12693                           
 12694                           
 12695                           ;psect for function _TMR4_Stop
 12696  0F39                     _TMR4_Stop:	
 12697  0F39                     l3590:	
 12698                           ;incstack = 0
 12699                           ; Regs used in _TMR4_Stop: []
 12700                           
 12701                           
 12702                           ;tmr4.c: 124: T4CONbits.TMR4ON = 0;
 12703  0F39  0025               	movlb	5	; select bank5
 12704  0F3A  1394               	bcf	20,7	;volatile
 12705  0F3B  0008               	return
 12706  0F3C                     __end_of_TMR4_Stop:	
 12707  0F3C                     __ptext14:	
 12708 ;; *************** function _TMR2_Initialize *****************
 12709 ;; Defined at:
 12710 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 12711 ;; Parameters:    Size  Location     Type
 12712 ;;		None
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;		None
 12715 ;; Return value:  Size  Location     Type
 12716 ;;                  1    wreg      void 
 12717 ;; Registers used:
 12718 ;;		wreg, status,2, status,0, pclath, cstack
 12719 ;; Tracked objects:
 12720 ;;		On entry : 1F/5
 12721 ;;		On exit  : 1F/5
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;Total ram usage:        0 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; Hardware stack levels required when called:    6
 12731 ;; This function calls:
 12732 ;;		_TMR2_SetInterruptHandler
 12733 ;;		_TMR2_Start
 12734 ;; This function is called by:
 12735 ;;		_SYSTEM_Initialize
 12736 ;; This function uses a non-reentrant model
 12737 ;;
 12738                           
 12739                           
 12740                           ;psect for function _TMR2_Initialize
 12741  0F3C                     _TMR2_Initialize:	
 12742                           
 12743                           ;tmr2.c: 68: T2CON = 0x3F;
 12744                           
 12745                           ;incstack = 0
 12746                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12747  0F3C  303F               	movlw	63
 12748  0F3D  008E               	movwf	14	;volatile
 12749                           
 12750                           ;tmr2.c: 71: T2CLKCON = 0x04;
 12751  0F3E  3004               	movlw	4
 12752  0F3F  0090               	movwf	16	;volatile
 12753                           
 12754                           ;tmr2.c: 74: T2HLT = 0x00;
 12755  0F40  018F               	clrf	15	;volatile
 12756                           
 12757                           ;tmr2.c: 77: T2RST = 0x00;
 12758  0F41  0191               	clrf	17	;volatile
 12759                           
 12760                           ;tmr2.c: 80: T2PR = 0x01;
 12761  0F42  3001               	movlw	1
 12762  0F43  008D               	movwf	13	;volatile
 12763                           
 12764                           ;tmr2.c: 83: T2TMR = 0x00;
 12765  0F44  018C               	clrf	12	;volatile
 12766                           
 12767                           ;tmr2.c: 86: PIR4bits.TMR2IF = 0;
 12768  0F45  002E               	movlb	14	; select bank14
 12769  0F46  1090               	bcf	16,1	;volatile
 12770                           
 12771                           ;tmr2.c: 89: PIE4bits.TMR2IE = 1;
 12772  0F47  149A               	bsf	26,1	;volatile
 12773                           
 12774                           ;tmr2.c: 92: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 12775  0F48  3023               	movlw	low _TMR2_DefaultInterruptHandler
 12776  0F49  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 12777  0F4A  3001               	movlw	high _TMR2_DefaultInterruptHandler
 12778  0F4B  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 12779  0F4C  23CE  3188         	fcall	_TMR2_SetInterruptHandler
 12780                           
 12781                           ;tmr2.c: 95: TMR2_Start();
 12782  0F4E  2F33               	ljmp	l3592
 12783  0F4F                     __end_of_TMR2_Initialize:	
 12784  0F4F                     PL2:	
 12785  0F4F  00A7               	movwf	??_sprintf
 12786  0F50  01A8               	clrf	??_sprintf+1
 12787  0F51  1BA7               	btfsc	??_sprintf,7
 12788  0F52  03A8               	decf	??_sprintf+1,f
 12789  0F53  0828               	movf	??_sprintf+1,w
 12790  0F54  3A80               	xorlw	128
 12791  0F55  00A9               	movwf	??_sprintf+2
 12792  0F56  0838               	movf	sprintf@width+1,w
 12793  0F57  3A80               	xorlw	128
 12794  0F58  0229               	subwf	??_sprintf+2,w
 12795  0F59  1D03               	skipz
 12796  0F5A  0008               	return
 12797  0F5B  0837               	movf	sprintf@width,w
 12798  0F5C  0227               	subwf	??_sprintf,w
 12799  0F5D  0008               	return
 12800  0F5E                     __end_ofPL2:	
 12801  0F5E                     PL4:	
 12802  0F5E  0822               	movf	sprintf@f+1,w
 12803  0F5F  00A8               	movwf	??_sprintf+1
 12804  0F60  0821               	movf	sprintf@f,w
 12805  0F61  00A7               	movwf	??_sprintf
 12806  0F62  0AA1               	incf	sprintf@f,f
 12807  0F63  1903               	skipnz
 12808  0F64  0AA2               	incf	sprintf@f+1,f
 12809  0F65  0084               	movwf	4
 12810  0F66  0828               	movf	??_sprintf+1,w
 12811  0F67  0085               	movwf	5
 12812  0F68  0800               	movf	0,w	;code access
 12813  0F69  00B9               	movwf	sprintf@c
 12814  0F6A  0008               	return
 12815  0F6B                     __end_ofPL4:	
 12816  0F6B                     PL6:	
 12817  0F6B  0086               	movwf	6
 12818  0F6C  3020               	movlw	32
 12819  0F6D  0187               	clrf	7
 12820  0F6E  0081               	movwf	1
 12821  0F6F  30FF               	movlw	-1
 12822  0F70  0AB6               	incf	sprintf@sp,f
 12823  0F71  07B7               	addwf	sprintf@width,f
 12824  0F72  1C03               	skipc
 12825  0F73  03B8               	decf	sprintf@width+1,f
 12826  0F74  0837               	movf	sprintf@width,w
 12827  0F75  0438               	iorwf	sprintf@width+1,w
 12828  0F76  0008               	return
 12829  0F77                     __end_ofPL6:	
 12830  0F77                     PL8:	
 12831  0F77  00A7               	movwf	??_sprintf
 12832  0F78  307E               	movlw	low (_dpowers| (0+32768))
 12833  0F79  01A8               	clrf	??_sprintf+1
 12834  0F7A  35A7               	lslf	??_sprintf,f
 12835  0F7B  0DA8               	rlf	??_sprintf+1,f
 12836  0F7C  0727               	addwf	??_sprintf,w
 12837  0F7D  0084               	movwf	4
 12838  0F7E  3092               	movlw	high (_dpowers| (0+32768))
 12839  0F7F  3D28               	addwfc	??_sprintf+1,w
 12840  0F80  0085               	movwf	5
 12841  0F81  3F00               	moviw [0]fsr0
 12842  0F82  0008               	return
 12843  0F83                     __end_ofPL8:	
 12844  0F83                     PL10:	
 12845  0F83  00A7               	movwf	??_sprintf
 12846  0F84  30AE               	movlw	low (_hexpowers| (0+32768))
 12847  0F85  01A8               	clrf	??_sprintf+1
 12848  0F86  35A7               	lslf	??_sprintf,f
 12849  0F87  0DA8               	rlf	??_sprintf+1,f
 12850  0F88  0727               	addwf	??_sprintf,w
 12851  0F89  0084               	movwf	4
 12852  0F8A  3092               	movlw	high (_hexpowers| (0+32768))
 12853  0F8B  3D28               	addwfc	??_sprintf+1,w
 12854  0F8C  0085               	movwf	5
 12855  0F8D  3F00               	moviw [0]fsr0
 12856  0F8E  0008               	return
 12857  0F8F                     __end_ofPL10:	
 12858  0F8F                     PL12:	
 12859  0F8F  0821               	movf	sprintf@f,w
 12860  0F90  0084               	movwf	4
 12861  0F91  0822               	movf	sprintf@f+1,w
 12862  0F92  0085               	movwf	5
 12863  0F93  0800               	movf	0,w	;code access
 12864  0F94  0008               	return
 12865  0F95                     __end_ofPL12:	
 12866  0F95                     PL14:	
 12867  0F95  082E               	movf	sprintf@ap,w
 12868  0F96  0086               	movwf	6
 12869  0F97  0187               	clrf	7
 12870  0F98  3F40               	moviw [0]fsr1
 12871  0F99  00B1               	movwf	sprintf@val
 12872  0F9A  3F41               	moviw [1]fsr1
 12873  0F9B  00B2               	movwf	sprintf@val+1
 12874  0F9C  0AAE               	incf	sprintf@ap,f
 12875  0F9D  0AAE               	incf	sprintf@ap,f
 12876  0F9E  0008               	return
 12877  0F9F                     __end_ofPL14:	
 12878  0F9F                     PL16:	
 12879  0F9F  0836               	movf	sprintf@sp,w
 12880  0FA0  0086               	movwf	6
 12881  0FA1  3020               	movlw	32
 12882  0FA2  0187               	clrf	7
 12883  0FA3  0081               	movwf	1
 12884  0FA4  0AB6               	incf	sprintf@sp,f
 12885  0FA5  0008               	return
 12886  0FA6                     __end_ofPL16:	
 12887  0FA6                     PL18:	
 12888  0FA6  00A7               	movwf	??_sprintf
 12889  0FA7  01A8               	clrf	??_sprintf+1
 12890  0FA8  1BA7               	btfsc	??_sprintf,7
 12891  0FA9  03A8               	decf	??_sprintf+1,f
 12892  0FAA  02B7               	subwf	sprintf@width,f
 12893  0FAB  0828               	movf	??_sprintf+1,w
 12894  0FAC  3BB8               	subwfb	sprintf@width+1,f
 12895  0FAD  0008               	return
 12896  0FAE                     __end_ofPL18:	
 12897  0FAE                     PL20:	
 12898  0FAE  00A2               	movwf	sprintf@f+1
 12899  0FAF  0021               	movlb	1	; select bank1
 12900  0FB0  0869               	movf	_UID^(0+128),w
 12901  0FB1  0020               	movlb	0	; select bank0
 12902  0FB2  00A3               	movwf	?_sprintf+2
 12903  0FB3  0008               	return
 12904  0FB4                     __end_ofPL20:	
 12905  0FB4                     PL22:	
 12906  0FB4  30CA               	movlw	low ((_uart+4)| (0+32768))
 12907  0FB5  0084               	movwf	4
 12908  0FB6  3091               	movlw	high ((_uart+4)| (0+32768))
 12909  0FB7  0085               	movwf	5
 12910  0FB8  3F01               	moviw [1]fsr0
 12911  0FB9  0008               	return
 12912  0FBA                     __end_ofPL22:	
 12913  0FBA                     PL26:	
 12914  0FBA  3055               	movlw	85
 12915  0FBB  003D               	movlb	29	; select bank29
 12916  0FBC  008F               	movwf	15	;volatile
 12917  0FBD  30AA               	movlw	170
 12918  0FBE  008F               	movwf	15	;volatile
 12919  0FBF  0008               	return
 12920  0FC0                     __end_ofPL26:	
 12921  0FC0                     PL28:	
 12922  0FC0  00FA               	movwf	??_CheckResponse
 12923  0FC1  0086               	movwf	6
 12924  0FC2  0187               	clrf	7
 12925  0FC3  0801               	movf	1,w
 12926  0FC4  0628               	xorwf	CheckResponse@input,w
 12927  0FC5  0008               	return
 12928  0FC6                     __end_ofPL28:	
 12929  0FC6                     PL30:	
 12930  0FC6  30E8               	movlw	low (_hardRebootStr| (0+32768))
 12931  0FC7  00F6               	movwf	WiFly_CheckRecv@chkString
 12932  0FC8  3092               	movlw	high (_hardRebootStr| (0+32768))
 12933  0FC9  00F7               	movwf	WiFly_CheckRecv@chkString+1
 12934  0FCA  0008               	return
 12935  0FCB                     __end_ofPL30:	
 12936  0FCB                     PL32:	
 12937  0FCB  3008               	movlw	low (_aokStr| (0+32768))
 12938  0FCC  00F6               	movwf	WiFly_CheckRecv@chkString
 12939  0FCD  3093               	movlw	high (_aokStr| (0+32768))
 12940  0FCE  00F7               	movwf	WiFly_CheckRecv@chkString+1
 12941  0FCF  0008               	return
 12942  0FD0                     __end_ofPL32:	
 12943  0FD0                     __ptext68:	
 12944 ;; *************** function _blink *****************
 12945 ;; Defined at:
 12946 ;;		line 269 in file "main.c"
 12947 ;; Parameters:    Size  Location     Type
 12948 ;;		None
 12949 ;; Auto vars:     Size  Location     Type
 12950 ;;		None
 12951 ;; Return value:  Size  Location     Type
 12952 ;;                  1    wreg      void 
 12953 ;; Registers used:
 12954 ;;		wreg, status,2, status,0, pclath, cstack
 12955 ;; Tracked objects:
 12956 ;;		On entry : 1F/1
 12957 ;;		On exit  : 1E/0
 12958 ;;		Unchanged: 0/0
 12959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;Total ram usage:        0 bytes
 12965 ;; Hardware stack levels used:    1
 12966 ;; Hardware stack levels required when called:    1
 12967 ;; This function calls:
 12968 ;;		i1_SetIndication
 12969 ;; This function is called by:
 12970 ;;		_main
 12971 ;;		_TMR2_ISR
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           
 12976                           ;psect for function _blink
 12977  0FD0                     _blink:	
 12978                           
 12979                           ;main.c: 270: SetIndication(!indStatus);
 12980                           
 12981                           ;incstack = 0
 12982                           ; Regs used in _blink: [wreg+status,2+status,0+pclath+cstack]
 12983  0FD0  084E               	movf	_indStatus^(0+128),w
 12984  0FD1  1D03               	btfss	3,2
 12985  0FD2  2FD5               	goto	u233_20
 12986  0FD3  3001               	movlw	1
 12987  0FD4  2FD6               	goto	u234_20
 12988  0FD5                     u233_20:	
 12989  0FD5  3000               	movlw	0
 12990  0FD6                     u234_20:	
 12991  0FD6  27D8               	fcall	i1_SetIndication
 12992  0FD7  0008               	return
 12993  0FD8                     __end_of_blink:	
 12994  0FD8                     __ptext69:	
 12995 ;; *************** function i1_SetIndication *****************
 12996 ;; Defined at:
 12997 ;;		line 80 in file "main.c"
 12998 ;; Parameters:    Size  Location     Type
 12999 ;;  set             1    wreg     unsigned char 
 13000 ;; Auto vars:     Size  Location     Type
 13001 ;;  set             1    0[COMMON] unsigned char 
 13002 ;; Return value:  Size  Location     Type
 13003 ;;                  1    wreg      void 
 13004 ;; Registers used:
 13005 ;;		wreg, status,0
 13006 ;; Tracked objects:
 13007 ;;		On entry : 1F/1
 13008 ;;		On exit  : 1E/0
 13009 ;;		Unchanged: 0/0
 13010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;Total ram usage:        1 bytes
 13016 ;; Hardware stack levels used:    1
 13017 ;; This function calls:
 13018 ;;		Nothing
 13019 ;; This function is called by:
 13020 ;;		_blink
 13021 ;; This function uses a non-reentrant model
 13022 ;;
 13023                           
 13024                           
 13025                           ;psect for function i1_SetIndication
 13026  0FD8                     i1_SetIndication:	
 13027                           
 13028                           ;incstack = 0
 13029                           ; Regs used in i1_SetIndication: [wreg+status,0]
 13030                           ;i1SetIndication@set stored from wreg
 13031  0FD8  00F0               	movwf	i1SetIndication@set
 13032                           
 13033                           ;main.c: 81: indStatus = set;
 13034  0FD9  0870               	movf	i1SetIndication@set,w
 13035  0FDA  00CE               	movwf	_indStatus^(0+128)
 13036                           
 13037                           ;main.c: 83: if (UID & 1) {
 13038  0FDB  1C69               	btfss	_UID^(0+128),0
 13039  0FDC  2FE3               	goto	i1l3108
 13040                           
 13041                           ;main.c: 84: LATAbits.LATA4 = set;
 13042  0FDD  0C70               	rrf	i1SetIndication@set,w
 13043  0FDE  0020               	movlb	0	; select bank0
 13044  0FDF  1C03               	skipc
 13045  0FE0  1216               	bcf	22,4	;volatile
 13046  0FE1  1803               	skipnc
 13047  0FE2  1616               	bsf	22,4	;volatile
 13048  0FE3                     i1l3108:	
 13049                           
 13050                           ;main.c: 85: }
 13051                           ;main.c: 86: if (UID & 1 << 1) {
 13052  0FE3  0021               	movlb	1	; select bank1
 13053  0FE4  1CE9               	btfss	_UID^(0+128),1
 13054  0FE5  2FEC               	goto	i1l3112
 13055                           
 13056                           ;main.c: 87: LATAbits.LATA5 = set;
 13057  0FE6  0C70               	rrf	i1SetIndication@set,w
 13058  0FE7  0020               	movlb	0	; select bank0
 13059  0FE8  1C03               	skipc
 13060  0FE9  1296               	bcf	22,5	;volatile
 13061  0FEA  1803               	skipnc
 13062  0FEB  1696               	bsf	22,5	;volatile
 13063  0FEC                     i1l3112:	
 13064                           
 13065                           ;main.c: 88: }
 13066                           ;main.c: 89: if (UID & 1 << 2) {
 13067  0FEC  0021               	movlb	1	; select bank1
 13068  0FED  1D69               	btfss	_UID^(0+128),2
 13069  0FEE  2FF5               	goto	i1l3116
 13070                           
 13071                           ;main.c: 90: LATAbits.LATA6 = set;
 13072  0FEF  0C70               	rrf	i1SetIndication@set,w
 13073  0FF0  0020               	movlb	0	; select bank0
 13074  0FF1  1C03               	skipc
 13075  0FF2  1316               	bcf	22,6	;volatile
 13076  0FF3  1803               	skipnc
 13077  0FF4  1716               	bsf	22,6	;volatile
 13078  0FF5                     i1l3116:	
 13079                           
 13080                           ;main.c: 91: }
 13081                           ;main.c: 92: if (UID & 1 << 3) {
 13082  0FF5  0021               	movlb	1	; select bank1
 13083  0FF6  1DE9               	btfss	_UID^(0+128),3
 13084  0FF7  0008               	return
 13085                           
 13086                           ;main.c: 93: LATAbits.LATA7 = set;
 13087  0FF8  0C70               	rrf	i1SetIndication@set,w
 13088  0FF9  2FFA               	ljmp	PL24	;call to abstracted procedure
 13089  0FFA                     __end_ofi1_SetIndication:	
 13090  0FFA                     PL24:	
 13091  0FFA  0020               	movlb	0	; select bank0
 13092  0FFB  1C03               	skipc
 13093  0FFC  1396               	bcf	22,7	;volatile
 13094  0FFD  1803               	skipnc
 13095  0FFE  1796               	bsf	22,7	;volatile
 13096  0FFF  0008               	return
 13097  1000                     __end_ofPL24:	
 13098                           
 13099                           	psect	bssCOMMON
 13100  007C                     __pbssCOMMON:	
 13101  007C                     _eusartTxHead:	
 13102  007C                     	ds	1
 13103                           
 13104                           	psect	bssBANK0
 13105  006E                     __pbssBANK0:	
 13106  006E                     _eusartRxHead:	
 13107  006E                     	ds	1
 13108  006F                     _eusartTxTail:	
 13109  006F                     	ds	1
 13110                           
 13111                           	psect	bssBANK1
 13112  00BE                     __pbssBANK1:	
 13113  00BE                     _eusartRxBuffer:	
 13114  00BE                     	ds	8
 13115  00C6                     _eusartTxBuffer:	
 13116  00C6                     	ds	8
 13117  00CE                     _indStatus:	
 13118  00CE                     	ds	1
 13119  00CF                     _pingTime:	
 13120  00CF                     	ds	1
 13121  00D0                     _mode:	
 13122  00D0                     	ds	1
 13123  00D1                     _eusartRxCount:	
 13124  00D1                     	ds	1
 13125  00D2                     _eusartRxTail:	
 13126  00D2                     	ds	1
 13127                           
 13128                           	psect	dataBANK1
 13129  00A0                     __pdataBANK1:	
 13130  00A0                     Knock@F15448:	
 13131  00A0                     	ds	10
 13132  00AA                     Pair@F15440:	
 13133  00AA                     	ds	9
 13134  00B3                     _failedStr:	
 13135  00B3                     	ds	7
 13136  00BA                     _errStr:	
 13137  00BA                     	ds	4
 13138                           
 13139                           	psect	dataBANK2
 13140  0120                     __pdataBANK2:	
 13141  0120                     Validate@F15444:	
 13142  0120                     	ds	13
 13143                           
 13144                           	psect	inittext
 13145  0116                     init_ram:	
 13146  0116  00FE               	movwf	126
 13147  0117                     initloop:	
 13148  0117  0012               	moviw fsr0++
 13149  0118  001E               	movwi fsr1++
 13150  0119  0BFE               	decfsz	126,f
 13151  011A  2917               	goto	initloop
 13152  011B  3400               	retlw	0
 13153                           
 13154                           	psect	clrtext
 13155  011C                     clear_ram0:	
 13156                           ;	Called with FSR0 containing the base address, and
 13157                           ;	WREG with the size to clear
 13158                           
 13159  011C  0064               	clrwdt	;clear the watchdog before getting into this loop
 13160  011D                     clrloop0:	
 13161  011D  0180               	clrf	0	;clear RAM location pointed to by FSR
 13162  011E  3101               	addfsr 0,1
 13163  011F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
 13164  0120  291D               	goto	clrloop0	;have we reached the end yet?
 13165  0121  3400               	retlw	0	;all done for this memory range, return
 13166                           
 13167                           	psect	cstackBANK1
 13168  00D3                     __pcstackBANK1:	
 13169  00D3                     ??_Knock:	
 13170  00D3                     Pair@pairString:	
 13171                           ; 1 bytes @ 0x0
 13172                           
 13173  00D3                     Validate@valString:	
 13174                           ; 9 bytes @ 0x0
 13175                           
 13176                           
 13177                           ; 13 bytes @ 0x0
 13178  00D3                     	ds	2
 13179  00D5                     Knock@knockString:	
 13180                           
 13181                           ; 10 bytes @ 0x2
 13182  00D5                     	ds	7
 13183  00DC                     Pair@returnVal:	
 13184                           
 13185                           ; 1 bytes @ 0x9
 13186  00DC                     	ds	3
 13187  00DF                     Knock@returnVal:	
 13188                           
 13189                           ; 1 bytes @ 0xC
 13190  00DF                     	ds	1
 13191  00E0                     Validate@returnVal:	
 13192                           
 13193                           ; 1 bytes @ 0xD
 13194  00E0                     	ds	1
 13195                           
 13196                           	psect	cstackCOMMON
 13197  0070                     __pcstackCOMMON:	
 13198  0070                     ?_isdigit:	
 13199  0070                     ?_TMR4_DefaultInterruptHandler:	
 13200                           ; 1 bit 
 13201                           
 13202  0070                     ??_TMR4_DefaultInterruptHandler:	
 13203                           ; 1 bytes @ 0x0
 13204                           
 13205  0070                     ?_TMR4_Start:	
 13206                           ; 1 bytes @ 0x0
 13207                           
 13208  0070                     ?_EUSART_Transmit_ISR:	
 13209                           ; 1 bytes @ 0x0
 13210                           
 13211  0070                     ??_EUSART_Transmit_ISR:	
 13212                           ; 1 bytes @ 0x0
 13213                           
 13214  0070                     ?_EUSART_Receive_ISR:	
 13215                           ; 1 bytes @ 0x0
 13216                           
 13217  0070                     ??_EUSART_Receive_ISR:	
 13218                           ; 1 bytes @ 0x0
 13219                           
 13220  0070                     ?_PIN_MANAGER_Initialize:	
 13221                           ; 1 bytes @ 0x0
 13222                           
 13223  0070                     ?_OSCILLATOR_Initialize:	
 13224                           ; 1 bytes @ 0x0
 13225                           
 13226  0070                     ?_WWDT_Initialize:	
 13227                           ; 1 bytes @ 0x0
 13228                           
 13229  0070                     ?_TMR2_Initialize:	
 13230                           ; 1 bytes @ 0x0
 13231                           
 13232  0070                     ?_TMR2_DefaultInterruptHandler:	
 13233                           ; 1 bytes @ 0x0
 13234                           
 13235  0070                     ??_TMR2_DefaultInterruptHandler:	
 13236                           ; 1 bytes @ 0x0
 13237                           
 13238  0070                     ?_TMR2_Start:	
 13239                           ; 1 bytes @ 0x0
 13240                           
 13241  0070                     ?_WiFly_EnterCMDMode:	
 13242                           ; 1 bytes @ 0x0
 13243                           
 13244  0070                     ?_eeprom_read:	
 13245                           ; 1 bytes @ 0x0
 13246                           
 13247  0070                     ?_TMR4_Initialize:	
 13248                           ; 1 bytes @ 0x0
 13249                           
 13250  0070                     ?_TMR4_StartTimer:	
 13251                           ; 1 bytes @ 0x0
 13252                           
 13253  0070                     ?_TMR4_Stop:	
 13254                           ; 1 bytes @ 0x0
 13255                           
 13256  0070                     ?_TMR4_StopTimer:	
 13257                           ; 1 bytes @ 0x0
 13258                           
 13259  0070                     ?_TMR4_ISR:	
 13260                           ; 1 bytes @ 0x0
 13261                           
 13262  0070                     ??_TMR4_ISR:	
 13263                           ; 1 bytes @ 0x0
 13264                           
 13265  0070                     ?_EUSART_Initialize:	
 13266                           ; 1 bytes @ 0x0
 13267                           
 13268  0070                     ?_EUSART_is_rx_ready:	
 13269                           ; 1 bytes @ 0x0
 13270                           
 13271  0070                     ?_EUSART_Read:	
 13272                           ; 1 bytes @ 0x0
 13273                           
 13274  0070                     ?_SYSTEM_Initialize:	
 13275                           ; 1 bytes @ 0x0
 13276                           
 13277  0070                     ?_RELAY_RL1_Engage:	
 13278                           ; 1 bytes @ 0x0
 13279                           
 13280  0070                     ?_RELAY_RL1_Disengage:	
 13281                           ; 1 bytes @ 0x0
 13282                           
 13283  0070                     ?_TMR2_StartTimer:	
 13284                           ; 1 bytes @ 0x0
 13285                           
 13286  0070                     ?_TMR2_Stop:	
 13287                           ; 1 bytes @ 0x0
 13288                           
 13289  0070                     ?_TMR2_StopTimer:	
 13290                           ; 1 bytes @ 0x0
 13291                           
 13292  0070                     ?_TMR2_ISR:	
 13293                           ; 1 bytes @ 0x0
 13294                           
 13295  0070                     ?_Clear_RX_Buffer:	
 13296                           ; 1 bytes @ 0x0
 13297                           
 13298  0070                     ?_WiFly_CheckInCMD:	
 13299                           ; 1 bytes @ 0x0
 13300                           
 13301  0070                     ?_WiFly_ReadChar:	
 13302                           ; 1 bytes @ 0x0
 13303                           
 13304  0070                     ?_WiFly_RebootCMD:	
 13305                           ; 1 bytes @ 0x0
 13306                           
 13307  0070                     ?_WiFly_SaveConfig:	
 13308                           ; 1 bytes @ 0x0
 13309                           
 13310  0070                     ?_WiFly_FactoryReset:	
 13311                           ; 1 bytes @ 0x0
 13312                           
 13313  0070                     ?_INTERRUPT_InterruptManager:	
 13314                           ; 1 bytes @ 0x0
 13315                           
 13316  0070                     ?_ClearIndicators:	
 13317                           ; 1 bytes @ 0x0
 13318                           
 13319  0070                     ?_SetIndication:	
 13320                           ; 1 bytes @ 0x0
 13321                           
 13322  0070                     ?_goto_mode:	
 13323                           ; 1 bytes @ 0x0
 13324                           
 13325  0070                     ?_get_response:	
 13326                           ; 1 bytes @ 0x0
 13327                           
 13328  0070                     ?_send_message:	
 13329                           ; 1 bytes @ 0x0
 13330                           
 13331  0070                     ?_Pair:	
 13332                           ; 1 bytes @ 0x0
 13333                           
 13334  0070                     ?_Validate:	
 13335                           ; 1 bytes @ 0x0
 13336                           
 13337  0070                     ?_Knock:	
 13338                           ; 1 bytes @ 0x0
 13339                           
 13340  0070                     ?_blink:	
 13341                           ; 1 bytes @ 0x0
 13342                           
 13343  0070                     ?_setFlag:	
 13344                           ; 1 bytes @ 0x0
 13345                           
 13346  0070                     ??_setFlag:	
 13347                           ; 1 bytes @ 0x0
 13348                           
 13349  0070                     ?_main:	
 13350                           ; 1 bytes @ 0x0
 13351                           
 13352  0070                     ?i1_TMR4_Stop:	
 13353                           ; 1 bytes @ 0x0
 13354                           
 13355  0070                     ??i1_TMR4_Stop:	
 13356                           ; 1 bytes @ 0x0
 13357                           
 13358  0070                     ?i1_TMR4_StopTimer:	
 13359                           ; 1 bytes @ 0x0
 13360                           
 13361  0070                     ??i1_TMR4_StopTimer:	
 13362                           ; 1 bytes @ 0x0
 13363                           
 13364  0070                     ?i1_SetIndication:	
 13365                           ; 1 bytes @ 0x0
 13366                           
 13367  0070                     ??i1_SetIndication:	
 13368                           ; 1 bytes @ 0x0
 13369                           
 13370  0070                     i1SetIndication@set:	
 13371                           ; 1 bytes @ 0x0
 13372                           
 13373                           
 13374                           ; 1 bytes @ 0x0
 13375  0070                     	ds	1
 13376  0071                     ?_TMR4_SetInterruptHandler:	
 13377  0071                     ??_TMR4_Start:	
 13378                           ; 1 bytes @ 0x1
 13379                           
 13380  0071                     ?_EUSART_SetTxInterruptHandler:	
 13381                           ; 1 bytes @ 0x1
 13382                           
 13383  0071                     ?_EUSART_SetRxInterruptHandler:	
 13384                           ; 1 bytes @ 0x1
 13385                           
 13386  0071                     ??_PIN_MANAGER_Initialize:	
 13387                           ; 1 bytes @ 0x1
 13388                           
 13389  0071                     ??_OSCILLATOR_Initialize:	
 13390                           ; 1 bytes @ 0x1
 13391                           
 13392  0071                     ??_WWDT_Initialize:	
 13393                           ; 1 bytes @ 0x1
 13394                           
 13395  0071                     ?_TMR2_SetInterruptHandler:	
 13396                           ; 1 bytes @ 0x1
 13397                           
 13398  0071                     ??_TMR2_Start:	
 13399                           ; 1 bytes @ 0x1
 13400                           
 13401  0071                     ?_eeprom_write:	
 13402                           ; 1 bytes @ 0x1
 13403                           
 13404  0071                     ??_eeprom_read:	
 13405                           ; 1 bytes @ 0x1
 13406                           
 13407  0071                     ??_isdigit:	
 13408                           ; 1 bytes @ 0x1
 13409                           
 13410  0071                     ??_TMR4_StartTimer:	
 13411                           ; 1 bytes @ 0x1
 13412                           
 13413  0071                     ??_TMR4_Stop:	
 13414                           ; 1 bytes @ 0x1
 13415                           
 13416  0071                     ??_TMR4_StopTimer:	
 13417                           ; 1 bytes @ 0x1
 13418                           
 13419  0071                     ??_EUSART_is_rx_ready:	
 13420                           ; 1 bytes @ 0x1
 13421                           
 13422  0071                     ??_EUSART_Read:	
 13423                           ; 1 bytes @ 0x1
 13424                           
 13425  0071                     ?_EUSART_Write:	
 13426                           ; 1 bytes @ 0x1
 13427                           
 13428  0071                     ??_RELAY_RL1_Engage:	
 13429                           ; 1 bytes @ 0x1
 13430                           
 13431  0071                     ??_RELAY_RL1_Disengage:	
 13432                           ; 1 bytes @ 0x1
 13433                           
 13434  0071                     ??_TMR2_StartTimer:	
 13435                           ; 1 bytes @ 0x1
 13436                           
 13437  0071                     ??_TMR2_Stop:	
 13438                           ; 1 bytes @ 0x1
 13439                           
 13440  0071                     ??_TMR2_StopTimer:	
 13441                           ; 1 bytes @ 0x1
 13442                           
 13443  0071                     ??_TMR2_ISR:	
 13444                           ; 1 bytes @ 0x1
 13445                           
 13446  0071                     ??_INTERRUPT_InterruptManager:	
 13447                           ; 1 bytes @ 0x1
 13448                           
 13449  0071                     ??_ClearIndicators:	
 13450                           ; 1 bytes @ 0x1
 13451                           
 13452  0071                     ??_SetIndication:	
 13453                           ; 1 bytes @ 0x1
 13454                           
 13455  0071                     ??_blink:	
 13456                           ; 1 bytes @ 0x1
 13457                           
 13458  0071                     ?___bmul:	
 13459                           ; 1 bytes @ 0x1
 13460                           
 13461  0071                     ?_strlen:	
 13462                           ; 1 bytes @ 0x1
 13463                           
 13464  0071                     ?___wmul:	
 13465                           ; 2 bytes @ 0x1
 13466                           
 13467  0071                     ?___lwdiv:	
 13468                           ; 2 bytes @ 0x1
 13469                           
 13470  0071                     EUSART_Read@readValue:	
 13471                           ; 2 bytes @ 0x1
 13472                           
 13473  0071                     EUSART_Write@txData:	
 13474                           ; 1 bytes @ 0x1
 13475                           
 13476  0071                     PIN_MANAGER_Initialize@state:	
 13477                           ; 1 bytes @ 0x1
 13478                           
 13479  0071                     SetIndication@set:	
 13480                           ; 1 bytes @ 0x1
 13481                           
 13482  0071                     eeprom_read@addr:	
 13483                           ; 1 bytes @ 0x1
 13484                           
 13485  0071                     eeprom_write@value:	
 13486                           ; 1 bytes @ 0x1
 13487                           
 13488  0071                     ___bmul@multiplicand:	
 13489                           ; 1 bytes @ 0x1
 13490                           
 13491  0071                     _isdigit$1889:	
 13492                           ; 1 bytes @ 0x1
 13493                           
 13494  0071                     TMR4_SetInterruptHandler@InterruptHandler:	
 13495                           ; 1 bytes @ 0x1
 13496                           
 13497  0071                     EUSART_SetTxInterruptHandler@handler:	
 13498                           ; 2 bytes @ 0x1
 13499                           
 13500  0071                     EUSART_SetRxInterruptHandler@handler:	
 13501                           ; 2 bytes @ 0x1
 13502                           
 13503  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
 13504                           ; 2 bytes @ 0x1
 13505                           
 13506  0071                     ___wmul@multiplier:	
 13507                           ; 2 bytes @ 0x1
 13508                           
 13509  0071                     ___lwdiv@divisor:	
 13510                           ; 2 bytes @ 0x1
 13511                           
 13512  0071                     strlen@s:	
 13513                           ; 2 bytes @ 0x1
 13514                           
 13515                           
 13516                           ; 2 bytes @ 0x1
 13517  0071                     	ds	1
 13518  0072                     ??_eeprom_write:	
 13519  0072                     ??_EUSART_Write:	
 13520                           ; 1 bytes @ 0x2
 13521                           
 13522  0072                     ?_WiFly_Send:	
 13523                           ; 1 bytes @ 0x2
 13524                           
 13525  0072                     ??_Clear_RX_Buffer:	
 13526                           ; 1 bytes @ 0x2
 13527                           
 13528  0072                     ??_WiFly_ReadChar:	
 13529                           ; 1 bytes @ 0x2
 13530                           
 13531  0072                     ??_goto_mode:	
 13532                           ; 1 bytes @ 0x2
 13533                           
 13534  0072                     ??___bmul:	
 13535                           ; 1 bytes @ 0x2
 13536                           
 13537  0072                     goto_mode@target:	
 13538                           ; 1 bytes @ 0x2
 13539                           
 13540  0072                     eeprom_write@addr:	
 13541                           ; 1 bytes @ 0x2
 13542                           
 13543  0072                     ___bmul@product:	
 13544                           ; 1 bytes @ 0x2
 13545                           
 13546  0072                     isdigit@c:	
 13547                           ; 1 bytes @ 0x2
 13548                           
 13549  0072                     WiFly_Send@command:	
 13550                           ; 1 bytes @ 0x2
 13551                           
 13552                           
 13553                           ; 2 bytes @ 0x2
 13554  0072                     	ds	1
 13555  0073                     ??_TMR4_SetInterruptHandler:	
 13556  0073                     ??_EUSART_SetTxInterruptHandler:	
 13557                           ; 1 bytes @ 0x3
 13558                           
 13559  0073                     ??_EUSART_SetRxInterruptHandler:	
 13560                           ; 1 bytes @ 0x3
 13561                           
 13562  0073                     ??_TMR2_Initialize:	
 13563                           ; 1 bytes @ 0x3
 13564                           
 13565  0073                     ??_TMR2_SetInterruptHandler:	
 13566                           ; 1 bytes @ 0x3
 13567                           
 13568  0073                     ??_strlen:	
 13569                           ; 1 bytes @ 0x3
 13570                           
 13571  0073                     ??_TMR4_Initialize:	
 13572                           ; 1 bytes @ 0x3
 13573                           
 13574  0073                     ??_EUSART_Initialize:	
 13575                           ; 1 bytes @ 0x3
 13576                           
 13577  0073                     ??_SYSTEM_Initialize:	
 13578                           ; 1 bytes @ 0x3
 13579                           
 13580  0073                     ___bmul@multiplier:	
 13581                           ; 1 bytes @ 0x3
 13582                           
 13583  0073                     ___wmul@multiplicand:	
 13584                           ; 1 bytes @ 0x3
 13585                           
 13586  0073                     ___lwdiv@dividend:	
 13587                           ; 2 bytes @ 0x3
 13588                           
 13589                           
 13590                           ; 2 bytes @ 0x3
 13591  0073                     	ds	1
 13592  0074                     ??_WiFly_Send:	
 13593  0074                     strlen@cp:	
 13594                           ; 1 bytes @ 0x4
 13595                           
 13596                           
 13597                           ; 2 bytes @ 0x4
 13598  0074                     	ds	1
 13599  0075                     ?_WiFly_SendString:	
 13600  0075                     ??___wmul:	
 13601                           ; 1 bytes @ 0x5
 13602                           
 13603  0075                     ??___lwdiv:	
 13604                           ; 1 bytes @ 0x5
 13605                           
 13606  0075                     WiFly_SendString@sendString:	
 13607                           ; 1 bytes @ 0x5
 13608                           
 13609  0075                     ___wmul@product:	
 13610                           ; 2 bytes @ 0x5
 13611                           
 13612  0075                     ___lwdiv@quotient:	
 13613                           ; 2 bytes @ 0x5
 13614                           
 13615                           
 13616                           ; 2 bytes @ 0x5
 13617  0075                     	ds	1
 13618  0076                     ?_WiFly_CheckRecv:	
 13619  0076                     ?_CheckResponse:	
 13620                           ; 1 bytes @ 0x6
 13621                           
 13622  0076                     ?_WaitResponse:	
 13623                           ; 1 bytes @ 0x6
 13624                           
 13625  0076                     WiFly_CheckRecv@chkString:	
 13626                           ; 1 bytes @ 0x6
 13627                           
 13628  0076                     CheckResponse@chkString1:	
 13629                           ; 2 bytes @ 0x6
 13630                           
 13631  0076                     WaitResponse@chkString:	
 13632                           ; 2 bytes @ 0x6
 13633                           
 13634                           
 13635                           ; 2 bytes @ 0x6
 13636  0076                     	ds	1
 13637  0077                     ??_WiFly_SendString:	
 13638  0077                     ___lwdiv@counter:	
 13639                           ; 1 bytes @ 0x7
 13640                           
 13641                           
 13642                           ; 1 bytes @ 0x7
 13643  0077                     	ds	1
 13644  0078                     ??_WiFly_CheckRecv:	
 13645  0078                     ??_WaitResponse:	
 13646                           ; 1 bytes @ 0x8
 13647                           
 13648  0078                     ?___lwmod:	
 13649                           ; 1 bytes @ 0x8
 13650                           
 13651  0078                     CheckResponse@chkString2:	
 13652                           ; 2 bytes @ 0x8
 13653                           
 13654  0078                     ___lwmod@divisor:	
 13655                           ; 1 bytes @ 0x8
 13656                           
 13657                           
 13658                           ; 2 bytes @ 0x8
 13659  0078                     	ds	1
 13660  0079                     ??_WiFly_EnterCMDMode:	
 13661  0079                     ??_get_response:	
 13662                           ; 1 bytes @ 0x9
 13663                           
 13664  0079                     CheckResponse@chkString3:	
 13665                           ; 1 bytes @ 0x9
 13666                           
 13667  0079                     get_response@status:	
 13668                           ; 1 bytes @ 0x9
 13669                           
 13670                           
 13671                           ; 1 bytes @ 0x9
 13672  0079                     	ds	1
 13673  007A                     ??_CheckResponse:	
 13674  007A                     ___lwmod@dividend:	
 13675                           ; 1 bytes @ 0xA
 13676                           
 13677                           
 13678                           ; 2 bytes @ 0xA
 13679  007A                     	ds	1
 13680  007B                     ??_WiFly_CheckInCMD:	
 13681  007B                     ??_WiFly_SendCMD:	
 13682                           ; 1 bytes @ 0xB
 13683                           
 13684  007B                     ??_WiFly_RebootCMD:	
 13685                           ; 1 bytes @ 0xB
 13686                           
 13687  007B                     ??_WiFly_SaveConfig:	
 13688                           ; 1 bytes @ 0xB
 13689                           
 13690                           
 13691                           ; 1 bytes @ 0xB
 13692  007B                     	ds	1
 13693  007C                     ??_WiFly_SendCMD_SingleArg:	
 13694  007C                     ??_WiFly_SendCMD_DoubleArg:	
 13695                           ; 1 bytes @ 0xC
 13696                           
 13697  007C                     ??_WiFly_Example_InitializeAsClient:	
 13698                           ; 1 bytes @ 0xC
 13699                           
 13700  007C                     ??_connect_socket:	
 13701                           ; 1 bytes @ 0xC
 13702                           
 13703  007C                     ??_send_message:	
 13704                           ; 1 bytes @ 0xC
 13705                           
 13706  007C                     ??_connect_network:	
 13707                           ; 1 bytes @ 0xC
 13708                           
 13709  007C                     ??_main:	
 13710                           ; 1 bytes @ 0xC
 13711                           
 13712  007C                     ??___lwmod:	
 13713                           ; 1 bytes @ 0xC
 13714                           
 13715                           
 13716                           	psect	cstackBANK0
 13717  0020                     __pcstackBANK0:	
 13718                           ; 1 bytes @ 0xC
 13719                           
 13720  0020                     ___lwmod@counter:	
 13721  0020                     WiFly_CheckRecv@length:	
 13722                           ; 1 bytes @ 0x0
 13723                           
 13724  0020                     CheckResponse@length3:	
 13725                           ; 2 bytes @ 0x0
 13726                           
 13727  0020                     WaitResponse@length:	
 13728                           ; 2 bytes @ 0x0
 13729                           
 13730                           
 13731                           ; 2 bytes @ 0x0
 13732  0020                     	ds	1
 13733  0021                     ?_sprintf:	
 13734  0021                     sprintf@f:	
 13735                           ; 2 bytes @ 0x1
 13736                           
 13737                           
 13738                           ; 2 bytes @ 0x1
 13739  0021                     	ds	1
 13740  0022                     WiFly_CheckRecv@i:	
 13741  0022                     CheckResponse@length1:	
 13742                           ; 2 bytes @ 0x2
 13743                           
 13744  0022                     WaitResponse@i:	
 13745                           ; 2 bytes @ 0x2
 13746                           
 13747                           
 13748                           ; 2 bytes @ 0x2
 13749  0022                     	ds	2
 13750  0024                     ?_WiFly_SendCMD:	
 13751  0024                     WiFly_SendCMD@cmd:	
 13752                           ; 1 bytes @ 0x4
 13753                           
 13754  0024                     CheckResponse@length2:	
 13755                           ; 2 bytes @ 0x4
 13756                           
 13757                           
 13758                           ; 2 bytes @ 0x4
 13759  0024                     	ds	2
 13760  0026                     ??_WiFly_FactoryReset:	
 13761  0026                     CheckResponse@i3:	
 13762                           ; 1 bytes @ 0x6
 13763                           
 13764                           
 13765                           ; 2 bytes @ 0x6
 13766  0026                     	ds	1
 13767  0027                     ??_sprintf:	
 13768                           
 13769                           ; 1 bytes @ 0x7
 13770  0027                     	ds	1
 13771  0028                     CheckResponse@input:	
 13772                           
 13773                           ; 1 bytes @ 0x8
 13774  0028                     	ds	1
 13775  0029                     CheckResponse@i1:	
 13776                           
 13777                           ; 2 bytes @ 0x9
 13778  0029                     	ds	2
 13779  002B                     sprintf@idx:	
 13780  002B                     CheckResponse@i2:	
 13781                           ; 1 bytes @ 0xB
 13782                           
 13783                           
 13784                           ; 2 bytes @ 0xB
 13785  002B                     	ds	1
 13786  002C                     sprintf@cp:	
 13787                           
 13788                           ; 2 bytes @ 0xC
 13789  002C                     	ds	2
 13790  002E                     sprintf@ap:	
 13791                           
 13792                           ; 1 bytes @ 0xE
 13793  002E                     	ds	1
 13794  002F                     sprintf@len:	
 13795                           
 13796                           ; 2 bytes @ 0xF
 13797  002F                     	ds	2
 13798  0031                     sprintf@val:	
 13799                           
 13800                           ; 2 bytes @ 0x11
 13801  0031                     	ds	2
 13802  0033                     sprintf@prec:	
 13803                           
 13804                           ; 1 bytes @ 0x13
 13805  0033                     	ds	1
 13806  0034                     sprintf@flag:	
 13807                           
 13808                           ; 2 bytes @ 0x14
 13809  0034                     	ds	2
 13810  0036                     sprintf@sp:	
 13811                           
 13812                           ; 1 bytes @ 0x16
 13813  0036                     	ds	1
 13814  0037                     sprintf@width:	
 13815                           
 13816                           ; 2 bytes @ 0x17
 13817  0037                     	ds	2
 13818  0039                     sprintf@c:	
 13819                           
 13820                           ; 1 bytes @ 0x19
 13821  0039                     	ds	1
 13822  003A                     ?_WiFly_SendCMD_SingleArg:	
 13823  003A                     ?_WiFly_SendCMD_DoubleArg:	
 13824                           ; 1 bytes @ 0x1A
 13825                           
 13826  003A                     WiFly_SendCMD_SingleArg@cmdFormat:	
 13827                           ; 1 bytes @ 0x1A
 13828                           
 13829  003A                     WiFly_SendCMD_DoubleArg@cmdFormat:	
 13830                           ; 2 bytes @ 0x1A
 13831                           
 13832                           
 13833                           ; 2 bytes @ 0x1A
 13834  003A                     	ds	2
 13835  003C                     WiFly_SendCMD_SingleArg@arg:	
 13836  003C                     WiFly_SendCMD_DoubleArg@arg1:	
 13837                           ; 2 bytes @ 0x1C
 13838                           
 13839                           
 13840                           ; 2 bytes @ 0x1C
 13841  003C                     	ds	2
 13842  003E                     WiFly_SendCMD_DoubleArg@arg2:	
 13843  003E                     WiFly_SendCMD_SingleArg@txBuffer:	
 13844                           ; 2 bytes @ 0x1E
 13845                           
 13846                           
 13847                           ; 40 bytes @ 0x1E
 13848  003E                     	ds	2
 13849  0040                     WiFly_SendCMD_DoubleArg@txBuffer:	
 13850                           
 13851                           ; 40 bytes @ 0x20
 13852  0040                     	ds	38
 13853  0066                     ?_WiFly_Example_InitializeAsClient:	
 13854  0066                     WiFly_Example_InitializeAsClient@ssid:	
 13855                           ; 1 bytes @ 0x46
 13856                           
 13857                           
 13858                           ; 2 bytes @ 0x46
 13859  0066                     	ds	2
 13860  0068                     ?_connect_socket:	
 13861  0068                     WiFly_Example_InitializeAsClient@password:	
 13862                           ; 1 bytes @ 0x48
 13863                           
 13864  0068                     connect_socket@addr:	
 13865                           ; 2 bytes @ 0x48
 13866                           
 13867                           
 13868                           ; 2 bytes @ 0x48
 13869  0068                     	ds	2
 13870  006A                     ?_connect_network:	
 13871  006A                     connect_socket@port:	
 13872                           ; 1 bytes @ 0x4A
 13873                           
 13874  006A                     connect_network@ssid:	
 13875                           ; 2 bytes @ 0x4A
 13876                           
 13877                           
 13878                           ; 2 bytes @ 0x4A
 13879  006A                     	ds	2
 13880  006C                     send_message@message:	
 13881  006C                     connect_network@passwd:	
 13882                           ; 1 bytes @ 0x4C
 13883                           
 13884                           
 13885                           ; 2 bytes @ 0x4C
 13886  006C                     	ds	1
 13887  006D                     ??_Pair:	
 13888  006D                     ??_Validate:	
 13889                           ; 1 bytes @ 0x4D
 13890                           
 13891                           
 13892                           ; 1 bytes @ 0x4D
 13893  006D                     	ds	1
 13894                           
 13895                           	psect	text18
 13896  0036                     __ptext18:	
 13897 ;; *************** function _EUSART_Initialize *****************
 13898 ;; Defined at:
 13899 ;;		line 75 in file "mcc_generated_files/eusart.c"
 13900 ;; Parameters:    Size  Location     Type
 13901 ;;		None
 13902 ;; Auto vars:     Size  Location     Type
 13903 ;;		None
 13904 ;; Return value:  Size  Location     Type
 13905 ;;                  1    wreg      void 
 13906 ;; Registers used:
 13907 ;;		wreg, status,2, status,0, pclath, cstack
 13908 ;; Tracked objects:
 13909 ;;		On entry : 1F/5
 13910 ;;		On exit  : 1F/E
 13911 ;;		Unchanged: 0/0
 13912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13917 ;;Total ram usage:        0 bytes
 13918 ;; Hardware stack levels used:    1
 13919 ;; Hardware stack levels required when called:    6
 13920 ;; This function calls:
 13921 ;;		_EUSART_SetRxInterruptHandler
 13922 ;;		_EUSART_SetTxInterruptHandler
 13923 ;; This function is called by:
 13924 ;;		_SYSTEM_Initialize
 13925 ;; This function uses a non-reentrant model
 13926 ;;
 13927                           
 13928                           
 13929                           ;psect for function _EUSART_Initialize
 13930  0036                     _EUSART_Initialize:	
 13931  0036                     l3136:	
 13932                           ;incstack = 0
 13933                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13934                           
 13935                           
 13936                           ;eusart.c: 78: PIE3bits.RCIE = 0;
 13937  0036  002E               	movlb	14	; select bank14
 13938  0037  1299               	bcf	25,5	;volatile
 13939                           
 13940                           ;eusart.c: 79: PIE3bits.TXIE = 0;
 13941  0038  1219               	bcf	25,4	;volatile
 13942                           
 13943                           ;eusart.c: 81: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
 13944  0039  30A2               	movlw	low _EUSART_Transmit_ISR
 13945  003A  00F1               	movwf	EUSART_SetTxInterruptHandler@handler
 13946  003B  3000               	movlw	high _EUSART_Transmit_ISR
 13947  003C  00F2               	movwf	EUSART_SetTxInterruptHandler@handler+1
 13948  003D  205D  3180         	fcall	_EUSART_SetTxInterruptHandler
 13949                           
 13950                           ;eusart.c: 82: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 13951  003F  30D1               	movlw	low _EUSART_Receive_ISR
 13952  0040  00F1               	movwf	EUSART_SetRxInterruptHandler@handler
 13953  0041  3000               	movlw	high _EUSART_Receive_ISR
 13954  0042  00F2               	movwf	EUSART_SetRxInterruptHandler@handler+1
 13955  0043  2063               	fcall	_EUSART_SetRxInterruptHandler
 13956                           
 13957                           ;eusart.c: 87: BAUD1CON = 0x08;
 13958  0044  3008               	movlw	8
 13959  0045  0022               	movlb	2	; select bank2
 13960  0046  009F               	movwf	31	;volatile
 13961                           
 13962                           ;eusart.c: 90: RC1STA = 0x90;
 13963  0047  3090               	movlw	144
 13964  0048  009D               	movwf	29	;volatile
 13965                           
 13966                           ;eusart.c: 93: TX1STA = 0x24;
 13967  0049  3024               	movlw	36
 13968  004A  009E               	movwf	30	;volatile
 13969                           
 13970                           ;eusart.c: 96: SP1BRGL = 0x40;
 13971  004B  3040               	movlw	64
 13972  004C  009B               	movwf	27	;volatile
 13973                           
 13974                           ;eusart.c: 99: SP1BRGH = 0x03;
 13975  004D  3003               	movlw	3
 13976  004E  009C               	movwf	28	;volatile
 13977                           
 13978                           ;eusart.c: 103: eusartTxHead = 0;
 13979  004F  01FC               	clrf	_eusartTxHead	;volatile
 13980                           
 13981                           ;eusart.c: 104: eusartTxTail = 0;
 13982  0050  0020               	movlb	0	; select bank0
 13983  0051  01EF               	clrf	_eusartTxTail	;volatile
 13984                           
 13985                           ;eusart.c: 105: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 13986  0052  3008               	movlw	8
 13987  0053  0021               	movlb	1	; select bank1
 13988  0054  00EB               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 13989                           
 13990                           ;eusart.c: 107: eusartRxHead = 0;
 13991  0055  0020               	movlb	0	; select bank0
 13992  0056  01EE               	clrf	_eusartRxHead	;volatile
 13993                           
 13994                           ;eusart.c: 108: eusartRxTail = 0;
 13995  0057  0021               	movlb	1	; select bank1
 13996  0058  01D2               	clrf	_eusartRxTail^(0+128)	;volatile
 13997                           
 13998                           ;eusart.c: 109: eusartRxCount = 0;
 13999  0059  01D1               	clrf	_eusartRxCount^(0+128)	;volatile
 14000                           
 14001                           ;eusart.c: 112: PIE3bits.RCIE = 1;
 14002  005A  002E               	movlb	14	; select bank14
 14003  005B  1699               	bsf	25,5	;volatile
 14004  005C  0008               	return
 14005  005D                     __end_of_EUSART_Initialize:	
 14006  005D                     __ptext19:	
 14007 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 14008 ;; Defined at:
 14009 ;;		line 212 in file "mcc_generated_files/eusart.c"
 14010 ;; Parameters:    Size  Location     Type
 14011 ;;  handler         2    1[COMMON] PTR void 
 14012 ;;		 -> EUSART_Transmit_ISR(1), 
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;		None
 14015 ;; Return value:  Size  Location     Type
 14016 ;;                  1    wreg      void 
 14017 ;; Registers used:
 14018 ;;		wreg
 14019 ;; Tracked objects:
 14020 ;;		On entry : 1F/E
 14021 ;;		On exit  : 1F/1
 14022 ;;		Unchanged: 0/0
 14023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14024 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14027 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14028 ;;Total ram usage:        2 bytes
 14029 ;; Hardware stack levels used:    1
 14030 ;; Hardware stack levels required when called:    5
 14031 ;; This function calls:
 14032 ;;		Nothing
 14033 ;; This function is called by:
 14034 ;;		_EUSART_Initialize
 14035 ;; This function uses a non-reentrant model
 14036 ;;
 14037                           
 14038                           
 14039                           ;psect for function _EUSART_SetTxInterruptHandler
 14040  005D                     _EUSART_SetTxInterruptHandler:	
 14041                           
 14042                           ;eusart.c: 213: EUSART_TxDefaultInterruptHandler = handler;
 14043                           
 14044                           ;incstack = 0
 14045                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 14046  005D  0872               	movf	EUSART_SetTxInterruptHandler@handler+1,w
 14047  005E  0021               	movlb	1	; select bank1
 14048  005F  00E6               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
 14049  0060  0871               	movf	EUSART_SetTxInterruptHandler@handler,w
 14050  0061  00E5               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
 14051  0062  0008               	return
 14052  0063                     __end_of_EUSART_SetTxInterruptHandler:	
 14053  0063                     __ptext20:	
 14054 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 14055 ;; Defined at:
 14056 ;;		line 216 in file "mcc_generated_files/eusart.c"
 14057 ;; Parameters:    Size  Location     Type
 14058 ;;  handler         2    1[COMMON] PTR void 
 14059 ;;		 -> EUSART_Receive_ISR(1), 
 14060 ;; Auto vars:     Size  Location     Type
 14061 ;;		None
 14062 ;; Return value:  Size  Location     Type
 14063 ;;                  1    wreg      void 
 14064 ;; Registers used:
 14065 ;;		wreg
 14066 ;; Tracked objects:
 14067 ;;		On entry : 1F/1
 14068 ;;		On exit  : 1F/1
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14071 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;Total ram usage:        2 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; Hardware stack levels required when called:    5
 14078 ;; This function calls:
 14079 ;;		Nothing
 14080 ;; This function is called by:
 14081 ;;		_EUSART_Initialize
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           
 14086                           ;psect for function _EUSART_SetRxInterruptHandler
 14087  0063                     _EUSART_SetRxInterruptHandler:	
 14088                           
 14089                           ;eusart.c: 217: EUSART_RxDefaultInterruptHandler = handler;
 14090                           
 14091                           ;incstack = 0
 14092                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 14093  0063  0872               	movf	EUSART_SetRxInterruptHandler@handler+1,w
 14094  0064  00E4               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
 14095  0065  0871               	movf	EUSART_SetRxInterruptHandler@handler,w
 14096  0066  00E3               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
 14097  0067  0008               	return
 14098  0068                     __end_of_EUSART_SetRxInterruptHandler:	
 14099                           
 14100                           	psect	text39
 14101  0086                     __ptext39:	
 14102 ;; *************** function _EUSART_Write *****************
 14103 ;; Defined at:
 14104 ;;		line 150 in file "mcc_generated_files/eusart.c"
 14105 ;; Parameters:    Size  Location     Type
 14106 ;;  txData          1    1[COMMON] unsigned char 
 14107 ;; Auto vars:     Size  Location     Type
 14108 ;;		None
 14109 ;; Return value:  Size  Location     Type
 14110 ;;                  1    wreg      void 
 14111 ;; Registers used:
 14112 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14113 ;; Tracked objects:
 14114 ;;		On entry : 0/0
 14115 ;;		On exit  : 1F/E
 14116 ;;		Unchanged: 0/0
 14117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14118 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14122 ;;Total ram usage:        1 bytes
 14123 ;; Hardware stack levels used:    1
 14124 ;; Hardware stack levels required when called:    5
 14125 ;; This function calls:
 14126 ;;		Nothing
 14127 ;; This function is called by:
 14128 ;;		_WiFly_Send
 14129 ;; This function uses a non-reentrant model
 14130 ;;
 14131                           
 14132                           
 14133                           ;psect for function _EUSART_Write
 14134  0086                     _EUSART_Write:	
 14135  0086                     l2508:	
 14136                           ;eusart.c: 152: while(0 == eusartTxBufferRemaining)
 14137                           
 14138                           ;incstack = 0
 14139                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 14140                           
 14141  0086  0021               	movlb	1	; select bank1
 14142  0087  086B               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 14143  0088  1903               	btfsc	3,2
 14144  0089  2886               	goto	l2508
 14145                           
 14146                           ;eusart.c: 154: }
 14147                           ;eusart.c: 156: if(0 == PIE3bits.TXIE)
 14148  008A  002E               	movlb	14	; select bank14
 14149  008B  1A19               	btfsc	25,4	;volatile
 14150  008C  2891               	goto	l156
 14151                           
 14152                           ;eusart.c: 157: {
 14153                           ;eusart.c: 158: TX1REG = txData;
 14154  008D  0871               	movf	EUSART_Write@txData,w
 14155  008E  0022               	movlb	2	; select bank2
 14156  008F  009A               	movwf	26	;volatile
 14157                           
 14158                           ;eusart.c: 159: }
 14159  0090  289F               	goto	l2522
 14160  0091                     l156:	
 14161                           
 14162                           ;eusart.c: 160: else
 14163                           ;eusart.c: 161: {
 14164                           ;eusart.c: 162: PIE3bits.TXIE = 0;
 14165  0091  1219               	bcf	25,4	;volatile
 14166                           
 14167                           ;eusart.c: 163: eusartTxBuffer[eusartTxHead++] = txData;
 14168  0092  087C               	movf	_eusartTxHead,w
 14169  0093  3EC6               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 14170  0094  0086               	movwf	6
 14171  0095  0187               	clrf	7
 14172  0096  0871               	movf	EUSART_Write@txData,w
 14173  0097  0081               	movwf	1
 14174  0098  0AFC               	incf	_eusartTxHead,f	;volatile
 14175                           
 14176                           ;eusart.c: 164: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 14177  0099  3008               	movlw	8
 14178  009A  027C               	subwf	_eusartTxHead,w
 14179  009B  1803               	btfsc	3,0
 14180                           
 14181                           ;eusart.c: 165: {
 14182                           ;eusart.c: 166: eusartTxHead = 0;
 14183  009C  01FC               	clrf	_eusartTxHead	;volatile
 14184                           
 14185                           ;eusart.c: 167: }
 14186                           ;eusart.c: 168: eusartTxBufferRemaining--;
 14187  009D  0021               	movlb	1	; select bank1
 14188  009E  03EB               	decf	_eusartTxBufferRemaining^(0+128),f	;volatile
 14189  009F                     l2522:	
 14190                           
 14191                           ;eusart.c: 169: }
 14192                           ;eusart.c: 170: PIE3bits.TXIE = 1;
 14193  009F  002E               	movlb	14	; select bank14
 14194  00A0  1619               	bsf	25,4	;volatile
 14195  00A1  0008               	return
 14196  00A2                     __end_of_EUSART_Write:	
 14197                           
 14198                           	psect	text57
 14199  00BA                     __ptext57:	
 14200 ;; *************** function _EUSART_Read *****************
 14201 ;; Defined at:
 14202 ;;		line 130 in file "mcc_generated_files/eusart.c"
 14203 ;; Parameters:    Size  Location     Type
 14204 ;;		None
 14205 ;; Auto vars:     Size  Location     Type
 14206 ;;  readValue       1    1[COMMON] unsigned char 
 14207 ;; Return value:  Size  Location     Type
 14208 ;;                  1    wreg      unsigned char 
 14209 ;; Registers used:
 14210 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14211 ;; Tracked objects:
 14212 ;;		On entry : 0/0
 14213 ;;		On exit  : 1F/E
 14214 ;;		Unchanged: 0/0
 14215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;Total ram usage:        1 bytes
 14221 ;; Hardware stack levels used:    1
 14222 ;; Hardware stack levels required when called:    5
 14223 ;; This function calls:
 14224 ;;		Nothing
 14225 ;; This function is called by:
 14226 ;;		_Clear_RX_Buffer
 14227 ;;		_WiFly_CheckRecv
 14228 ;;		_WiFly_ReadChar
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           
 14233                           ;psect for function _EUSART_Read
 14234  00BA                     _EUSART_Read:	
 14235  00BA                     l3500:	
 14236                           ;eusart.c: 134: while(0 == eusartRxCount)
 14237                           
 14238                           ;incstack = 0
 14239                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 14240                           
 14241  00BA  0021               	movlb	1	; select bank1
 14242  00BB  0851               	movf	_eusartRxCount^(0+128),w	;volatile
 14243  00BC  1903               	btfsc	3,2
 14244  00BD  28BA               	goto	l3500
 14245                           
 14246                           ;eusart.c: 136: }
 14247                           ;eusart.c: 138: readValue = eusartRxBuffer[eusartRxTail++];
 14248  00BE  0852               	movf	_eusartRxTail^(0+128),w
 14249  00BF  3EBE               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14250  00C0  0086               	movwf	6
 14251  00C1  0187               	clrf	7
 14252  00C2  0801               	movf	1,w
 14253  00C3  00F1               	movwf	EUSART_Read@readValue
 14254  00C4  0AD2               	incf	_eusartRxTail^(0+128),f	;volatile
 14255                           
 14256                           ;eusart.c: 139: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 14257  00C5  3008               	movlw	8
 14258  00C6  0252               	subwf	_eusartRxTail^(0+128),w
 14259  00C7  1803               	btfsc	3,0
 14260                           
 14261                           ;eusart.c: 140: {
 14262                           ;eusart.c: 141: eusartRxTail = 0;
 14263  00C8  01D2               	clrf	_eusartRxTail^(0+128)	;volatile
 14264                           
 14265                           ;eusart.c: 142: }
 14266                           ;eusart.c: 143: PIE3bits.RCIE = 0;
 14267  00C9  002E               	movlb	14	; select bank14
 14268  00CA  1299               	bcf	25,5	;volatile
 14269                           
 14270                           ;eusart.c: 144: eusartRxCount--;
 14271  00CB  0021               	movlb	1	; select bank1
 14272  00CC  03D1               	decf	_eusartRxCount^(0+128),f	;volatile
 14273                           
 14274                           ;eusart.c: 145: PIE3bits.RCIE = 1;
 14275  00CD  002E               	movlb	14	; select bank14
 14276  00CE  1699               	bsf	25,5	;volatile
 14277                           
 14278                           ;eusart.c: 147: return readValue;
 14279  00CF  0871               	movf	EUSART_Read@readValue,w
 14280  00D0  0008               	return
 14281  00D1                     __end_of_EUSART_Read:	
 14282                           
 14283                           	psect	intentry
 14284  0004                     __pintentry:	
 14285 ;; *************** function _INTERRUPT_InterruptManager *****************
 14286 ;; Defined at:
 14287 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14288 ;; Parameters:    Size  Location     Type
 14289 ;;		None
 14290 ;; Auto vars:     Size  Location     Type
 14291 ;;		None
 14292 ;; Return value:  Size  Location     Type
 14293 ;;                  1    wreg      void 
 14294 ;; Registers used:
 14295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14296 ;; Tracked objects:
 14297 ;;		On entry : 0/0
 14298 ;;		On exit  : 0/0
 14299 ;;		Unchanged: 0/0
 14300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;Total ram usage:        0 bytes
 14306 ;; Hardware stack levels used:    1
 14307 ;; Hardware stack levels required when called:    4
 14308 ;; This function calls:
 14309 ;;		Absolute function
 14310 ;;		_EUSART_Receive_ISR
 14311 ;;		_EUSART_Transmit_ISR
 14312 ;;		_TMR2_ISR
 14313 ;;		_TMR4_ISR
 14314 ;; This function is called by:
 14315 ;;		Interrupt level 1
 14316 ;; This function uses a non-reentrant model
 14317 ;;
 14318                           
 14319  0004                     _INTERRUPT_InterruptManager:	
 14320                           
 14321                           ;incstack = 0
 14322  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14323                           
 14324                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14325  0005  3180               	pagesel	$
 14326                           
 14327                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.TXIE == 1 && PIR3bits.TXIF
      +                           == 1)
 14328  0006  1F0B               	btfss	11,6	;volatile
 14329  0007  2813               	goto	i1l632
 14330  0008  002E               	movlb	14	; select bank14
 14331  0009  1A19               	btfsc	25,4	;volatile
 14332  000A  1E0F               	btfss	15,4	;volatile
 14333  000B  2813               	goto	i1l632
 14334                           
 14335                           ;interrupt_manager.c: 55: {
 14336                           ;interrupt_manager.c: 56: EUSART_TxDefaultInterruptHandler();
 14337  000C  0021               	movlb	1	; select bank1
 14338  000D  0866               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 14339  000E  008A               	movwf	10
 14340  000F  0865               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 14341  0010  000A               	callw
 14342  0011  3180               	pagesel	$
 14343                           
 14344                           ;interrupt_manager.c: 57: }
 14345  0012  2832               	goto	i1l640
 14346  0013                     i1l632:	
 14347                           
 14348                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE3bits.RCIE == 1 && PIR3bits
      +                          .RCIF == 1)
 14349  0013  1F0B               	btfss	11,6	;volatile
 14350  0014  2820               	goto	i1l634
 14351  0015  002E               	movlb	14	; select bank14
 14352  0016  1A99               	btfsc	25,5	;volatile
 14353  0017  1E8F               	btfss	15,5	;volatile
 14354  0018  2820               	goto	i1l634
 14355                           
 14356                           ;interrupt_manager.c: 59: {
 14357                           ;interrupt_manager.c: 60: EUSART_RxDefaultInterruptHandler();
 14358  0019  0021               	movlb	1	; select bank1
 14359  001A  0864               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14360  001B  008A               	movwf	10
 14361  001C  0863               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14362  001D  000A               	callw
 14363  001E  3180               	pagesel	$
 14364                           
 14365                           ;interrupt_manager.c: 61: }
 14366  001F  2832               	goto	i1l640
 14367  0020                     i1l634:	
 14368                           
 14369                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE4bits.TMR4IE == 1 && PIR4bi
      +                          ts.TMR4IF == 1)
 14370  0020  1F0B               	btfss	11,6	;volatile
 14371  0021  282A               	goto	i1l636
 14372  0022  002E               	movlb	14	; select bank14
 14373  0023  199A               	btfsc	26,3	;volatile
 14374  0024  1D90               	btfss	16,3	;volatile
 14375  0025  282A               	goto	i1l636
 14376                           
 14377                           ;interrupt_manager.c: 63: {
 14378                           ;interrupt_manager.c: 64: TMR4_ISR();
 14379  0026  3180  20F4  3180   	fcall	_TMR4_ISR
 14380                           
 14381                           ;interrupt_manager.c: 65: }
 14382  0029  2832               	goto	i1l640
 14383  002A                     i1l636:	
 14384                           
 14385                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE4bits.TMR2IE == 1 && PIR4bi
      +                          ts.TMR2IF == 1)
 14386  002A  1F0B               	btfss	11,6	;volatile
 14387  002B  2832               	goto	i1l640
 14388  002C  002E               	movlb	14	; select bank14
 14389  002D  189A               	btfsc	26,1	;volatile
 14390  002E  1C90               	btfss	16,1	;volatile
 14391  002F  2832               	goto	i1l640
 14392                           
 14393                           ;interrupt_manager.c: 67: {
 14394                           ;interrupt_manager.c: 68: TMR2_ISR();
 14395  0030  3181  2100         	fcall	_TMR2_ISR
 14396  0032                     i1l640:	
 14397                           ;interrupt_manager.c: 69: }
 14398                           
 14399  0032  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14400  0033  0009               	retfie
 14401  0034                     __end_of_INTERRUPT_InterruptManager:	
 14402                           
 14403                           	psect	text61
 14404  00F4                     __ptext61:	
 14405 ;; *************** function _TMR4_ISR *****************
 14406 ;; Defined at:
 14407 ;;		line 167 in file "mcc_generated_files/tmr4.c"
 14408 ;; Parameters:    Size  Location     Type
 14409 ;;		None
 14410 ;; Auto vars:     Size  Location     Type
 14411 ;;		None
 14412 ;; Return value:  Size  Location     Type
 14413 ;;                  1    wreg      void 
 14414 ;; Registers used:
 14415 ;;		wreg, status,2, status,0, pclath, cstack
 14416 ;; Tracked objects:
 14417 ;;		On entry : 1F/E
 14418 ;;		On exit  : 0/0
 14419 ;;		Unchanged: 0/0
 14420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;Total ram usage:        0 bytes
 14426 ;; Hardware stack levels used:    1
 14427 ;; Hardware stack levels required when called:    3
 14428 ;; This function calls:
 14429 ;;		Absolute function
 14430 ;;		_TMR4_DefaultInterruptHandler
 14431 ;;		_setFlag
 14432 ;; This function is called by:
 14433 ;;		_INTERRUPT_InterruptManager
 14434 ;; This function uses a non-reentrant model
 14435 ;;
 14436                           
 14437                           
 14438                           ;psect for function _TMR4_ISR
 14439  00F4                     _TMR4_ISR:	
 14440                           
 14441                           ;tmr4.c: 171: PIR4bits.TMR4IF = 0;
 14442                           
 14443                           ;incstack = 0
 14444                           ; Regs used in _TMR4_ISR: [wreg+status,2+status,0+pclath+cstack]
 14445  00F4  1190               	bcf	16,3	;volatile
 14446                           
 14447                           ;tmr4.c: 173: if(TMR4_InterruptHandler)
 14448  00F5  0021               	movlb	1	; select bank1
 14449  00F6  0867               	movf	_TMR4_InterruptHandler^(0+128),w
 14450  00F7  0468               	iorwf	(_TMR4_InterruptHandler+1)^(0+128),w
 14451  00F8  1903               	btfsc	3,2
 14452  00F9  0008               	return
 14453                           
 14454                           ;tmr4.c: 174: {
 14455                           ;tmr4.c: 175: TMR4_InterruptHandler();
 14456  00FA  0868               	movf	(_TMR4_InterruptHandler+1)^(0+128),w
 14457  00FB  008A               	movwf	10
 14458  00FC  0867               	movf	_TMR4_InterruptHandler^(0+128),w
 14459  00FD  000A               	callw
 14460  00FE  3180               	pagesel	$
 14461  00FF  0008               	return
 14462  0100                     __end_of_TMR4_ISR:	
 14463                           
 14464                           	psect	text62
 14465  0122                     __ptext62:	
 14466 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 14467 ;; Defined at:
 14468 ;;		line 184 in file "mcc_generated_files/tmr4.c"
 14469 ;; Parameters:    Size  Location     Type
 14470 ;;		None
 14471 ;; Auto vars:     Size  Location     Type
 14472 ;;		None
 14473 ;; Return value:  Size  Location     Type
 14474 ;;                  1    wreg      void 
 14475 ;; Registers used:
 14476 ;;		None
 14477 ;; Tracked objects:
 14478 ;;		On entry : 1F/1
 14479 ;;		On exit  : 1F/1
 14480 ;;		Unchanged: 1F/0
 14481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14486 ;;Total ram usage:        0 bytes
 14487 ;; Hardware stack levels used:    1
 14488 ;; This function calls:
 14489 ;;		Nothing
 14490 ;; This function is called by:
 14491 ;;		_TMR4_Initialize
 14492 ;;		_TMR4_ISR
 14493 ;; This function uses a non-reentrant model
 14494 ;;
 14495                           
 14496                           
 14497                           ;psect for function _TMR4_DefaultInterruptHandler
 14498  0122                     _TMR4_DefaultInterruptHandler:	
 14499                           
 14500                           ;incstack = 0
 14501                           ; Regs used in _TMR4_DefaultInterruptHandler: []
 14502  0122  0008               	return
 14503  0123                     __end_of_TMR4_DefaultInterruptHandler:	
 14504                           
 14505                           	psect	text63
 14506  010C                     __ptext63:	
 14507 ;; *************** function _setFlag *****************
 14508 ;; Defined at:
 14509 ;;		line 273 in file "main.c"
 14510 ;; Parameters:    Size  Location     Type
 14511 ;;		None
 14512 ;; Auto vars:     Size  Location     Type
 14513 ;;		None
 14514 ;; Return value:  Size  Location     Type
 14515 ;;                  1    wreg      void 
 14516 ;; Registers used:
 14517 ;;		status,2, status,0, pclath, cstack
 14518 ;; Tracked objects:
 14519 ;;		On entry : 1F/1
 14520 ;;		On exit  : 1F/1
 14521 ;;		Unchanged: 0/0
 14522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14527 ;;Total ram usage:        0 bytes
 14528 ;; Hardware stack levels used:    1
 14529 ;; Hardware stack levels required when called:    2
 14530 ;; This function calls:
 14531 ;;		i1_TMR4_StopTimer
 14532 ;; This function is called by:
 14533 ;;		_main
 14534 ;;		_TMR4_ISR
 14535 ;; This function uses a non-reentrant model
 14536 ;;
 14537                           
 14538                           
 14539                           ;psect for function _setFlag
 14540  010C                     _setFlag:	
 14541                           
 14542                           ;main.c: 274: TMR4_StopTimer();
 14543                           
 14544                           ;incstack = 0
 14545                           ; Regs used in _setFlag: [status,2+status,0+pclath+cstack]
 14546  010C  2111               	fcall	i1_TMR4_StopTimer
 14547                           
 14548                           ;main.c: 275: pingTime = 1;
 14549  010D  0021               	movlb	1	; select bank1
 14550  010E  01CF               	clrf	_pingTime^(0+128)
 14551  010F  0ACF               	incf	_pingTime^(0+128),f
 14552  0110  0008               	return
 14553  0111                     __end_of_setFlag:	
 14554  0111                     __ptext64:	
 14555 ;; *************** function i1_TMR4_StopTimer *****************
 14556 ;; Defined at:
 14557 ;;		line 127 in file "mcc_generated_files/tmr4.c"
 14558 ;; Parameters:    Size  Location     Type
 14559 ;;		None
 14560 ;; Auto vars:     Size  Location     Type
 14561 ;;		None
 14562 ;; Return value:  Size  Location     Type
 14563 ;;                  1    wreg      void 
 14564 ;; Registers used:
 14565 ;;		status,2, status,0, pclath, cstack
 14566 ;; Tracked objects:
 14567 ;;		On entry : 1F/1
 14568 ;;		On exit  : 1F/5
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;Total ram usage:        0 bytes
 14576 ;; Hardware stack levels used:    1
 14577 ;; Hardware stack levels required when called:    1
 14578 ;; This function calls:
 14579 ;;		i1_TMR4_Stop
 14580 ;; This function is called by:
 14581 ;;		_setFlag
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585                           
 14586                           ;psect for function i1_TMR4_StopTimer
 14587  0111                     i1_TMR4_StopTimer:	
 14588                           
 14589                           ;tmr4.c: 129: TMR4_Stop();
 14590                           
 14591                           ;incstack = 0
 14592                           ; Regs used in i1_TMR4_StopTimer: [status,2+status,0+pclath+cstack]
 14593  0111  2113               	fcall	i1_TMR4_Stop
 14594  0112  0008               	return
 14595  0113                     __end_ofi1_TMR4_StopTimer:	
 14596  0113                     __ptext65:	
 14597 ;; *************** function i1_TMR4_Stop *****************
 14598 ;; Defined at:
 14599 ;;		line 121 in file "mcc_generated_files/tmr4.c"
 14600 ;; Parameters:    Size  Location     Type
 14601 ;;		None
 14602 ;; Auto vars:     Size  Location     Type
 14603 ;;		None
 14604 ;; Return value:  Size  Location     Type
 14605 ;;                  1    wreg      void 
 14606 ;; Registers used:
 14607 ;;		None
 14608 ;; Tracked objects:
 14609 ;;		On entry : 1F/1
 14610 ;;		On exit  : 1F/5
 14611 ;;		Unchanged: 0/0
 14612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14617 ;;Total ram usage:        0 bytes
 14618 ;; Hardware stack levels used:    1
 14619 ;; This function calls:
 14620 ;;		Nothing
 14621 ;; This function is called by:
 14622 ;;		i1_TMR4_StopTimer
 14623 ;; This function uses a non-reentrant model
 14624 ;;
 14625                           
 14626                           
 14627                           ;psect for function i1_TMR4_Stop
 14628  0113                     i1_TMR4_Stop:	
 14629                           
 14630                           ;tmr4.c: 124: T4CONbits.TMR4ON = 0;
 14631                           
 14632                           ;incstack = 0
 14633                           ; Regs used in i1_TMR4_Stop: []
 14634  0113  0025               	movlb	5	; select bank5
 14635  0114  1394               	bcf	20,7	;volatile
 14636  0115  0008               	return
 14637  0116                     __end_ofi1_TMR4_Stop:	
 14638                           
 14639                           	psect	text66
 14640  0100                     __ptext66:	
 14641 ;; *************** function _TMR2_ISR *****************
 14642 ;; Defined at:
 14643 ;;		line 167 in file "mcc_generated_files/tmr2.c"
 14644 ;; Parameters:    Size  Location     Type
 14645 ;;		None
 14646 ;; Auto vars:     Size  Location     Type
 14647 ;;		None
 14648 ;; Return value:  Size  Location     Type
 14649 ;;                  1    wreg      void 
 14650 ;; Registers used:
 14651 ;;		wreg, status,2, status,0, pclath, cstack
 14652 ;; Tracked objects:
 14653 ;;		On entry : 1F/E
 14654 ;;		On exit  : 0/0
 14655 ;;		Unchanged: 0/0
 14656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14661 ;;Total ram usage:        0 bytes
 14662 ;; Hardware stack levels used:    1
 14663 ;; Hardware stack levels required when called:    2
 14664 ;; This function calls:
 14665 ;;		Absolute function
 14666 ;;		_TMR2_DefaultInterruptHandler
 14667 ;;		_blink
 14668 ;; This function is called by:
 14669 ;;		_INTERRUPT_InterruptManager
 14670 ;; This function uses a non-reentrant model
 14671 ;;
 14672                           
 14673                           
 14674                           ;psect for function _TMR2_ISR
 14675  0100                     _TMR2_ISR:	
 14676                           
 14677                           ;tmr2.c: 171: PIR4bits.TMR2IF = 0;
 14678                           
 14679                           ;incstack = 0
 14680                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 14681  0100  1090               	bcf	16,1	;volatile
 14682                           
 14683                           ;tmr2.c: 173: if(TMR2_InterruptHandler)
 14684  0101  0021               	movlb	1	; select bank1
 14685  0102  0861               	movf	_TMR2_InterruptHandler^(0+128),w
 14686  0103  0462               	iorwf	(_TMR2_InterruptHandler+1)^(0+128),w
 14687  0104  1903               	btfsc	3,2
 14688  0105  0008               	return
 14689                           
 14690                           ;tmr2.c: 174: {
 14691                           ;tmr2.c: 175: TMR2_InterruptHandler();
 14692  0106  0862               	movf	(_TMR2_InterruptHandler+1)^(0+128),w
 14693  0107  008A               	movwf	10
 14694  0108  0861               	movf	_TMR2_InterruptHandler^(0+128),w
 14695  0109  000A               	callw
 14696  010A  3181               	pagesel	$
 14697  010B  0008               	return
 14698  010C                     __end_of_TMR2_ISR:	
 14699                           
 14700                           	psect	text67
 14701  0123                     __ptext67:	
 14702 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 14703 ;; Defined at:
 14704 ;;		line 184 in file "mcc_generated_files/tmr2.c"
 14705 ;; Parameters:    Size  Location     Type
 14706 ;;		None
 14707 ;; Auto vars:     Size  Location     Type
 14708 ;;		None
 14709 ;; Return value:  Size  Location     Type
 14710 ;;                  1    wreg      void 
 14711 ;; Registers used:
 14712 ;;		None
 14713 ;; Tracked objects:
 14714 ;;		On entry : 1F/1
 14715 ;;		On exit  : 1F/1
 14716 ;;		Unchanged: 1F/0
 14717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;Total ram usage:        0 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; This function calls:
 14725 ;;		Nothing
 14726 ;; This function is called by:
 14727 ;;		_TMR2_Initialize
 14728 ;;		_TMR2_ISR
 14729 ;; This function uses a non-reentrant model
 14730 ;;
 14731                           
 14732                           
 14733                           ;psect for function _TMR2_DefaultInterruptHandler
 14734  0123                     _TMR2_DefaultInterruptHandler:	
 14735                           
 14736                           ;incstack = 0
 14737                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 14738  0123  0008               	return
 14739  0124                     __end_of_TMR2_DefaultInterruptHandler:	
 14740                           
 14741                           	psect	text70
 14742  00A2                     __ptext70:	
 14743 ;; *************** function _EUSART_Transmit_ISR *****************
 14744 ;; Defined at:
 14745 ;;		line 173 in file "mcc_generated_files/eusart.c"
 14746 ;; Parameters:    Size  Location     Type
 14747 ;;		None
 14748 ;; Auto vars:     Size  Location     Type
 14749 ;;		None
 14750 ;; Return value:  Size  Location     Type
 14751 ;;                  1    wreg      void 
 14752 ;; Registers used:
 14753 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14754 ;; Tracked objects:
 14755 ;;		On entry : 1F/1
 14756 ;;		On exit  : 10/0
 14757 ;;		Unchanged: 0/0
 14758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14763 ;;Total ram usage:        0 bytes
 14764 ;; Hardware stack levels used:    1
 14765 ;; This function calls:
 14766 ;;		Nothing
 14767 ;; This function is called by:
 14768 ;;		_EUSART_Initialize
 14769 ;;		_INTERRUPT_InterruptManager
 14770 ;; This function uses a non-reentrant model
 14771 ;;
 14772                           
 14773                           
 14774                           ;psect for function _EUSART_Transmit_ISR
 14775  00A2                     _EUSART_Transmit_ISR:	
 14776                           
 14777                           ;eusart.c: 177: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 14778                           
 14779                           ;incstack = 0
 14780                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 14781  00A2  3008               	movlw	8
 14782  00A3  026B               	subwf	_eusartTxBufferRemaining^(0+128),w
 14783  00A4  1803               	skipnc
 14784  00A5  28B7               	goto	i1l162
 14785                           
 14786                           ;eusart.c: 178: {
 14787                           ;eusart.c: 179: TX1REG = eusartTxBuffer[eusartTxTail++];
 14788  00A6  0020               	movlb	0	; select bank0
 14789  00A7  086F               	movf	_eusartTxTail,w
 14790  00A8  3EC6               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 14791  00A9  0086               	movwf	6
 14792  00AA  0187               	clrf	7
 14793  00AB  0801               	movf	1,w
 14794  00AC  0022               	movlb	2	; select bank2
 14795  00AD  009A               	movwf	26	;volatile
 14796  00AE  0020               	movlb	0	; select bank0
 14797  00AF  0AEF               	incf	_eusartTxTail,f	;volatile
 14798                           
 14799                           ;eusart.c: 180: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 14800  00B0  3008               	movlw	8
 14801  00B1  026F               	subwf	_eusartTxTail,w
 14802  00B2  1803               	btfsc	3,0
 14803                           
 14804                           ;eusart.c: 181: {
 14805                           ;eusart.c: 182: eusartTxTail = 0;
 14806  00B3  01EF               	clrf	_eusartTxTail	;volatile
 14807                           
 14808                           ;eusart.c: 183: }
 14809                           ;eusart.c: 184: eusartTxBufferRemaining++;
 14810  00B4  0021               	movlb	1	; select bank1
 14811  00B5  0AEB               	incf	_eusartTxBufferRemaining^(0+128),f	;volatile
 14812                           
 14813                           ;eusart.c: 185: }
 14814  00B6  0008               	return
 14815  00B7                     i1l162:	
 14816                           
 14817                           ;eusart.c: 186: else
 14818                           ;eusart.c: 187: {
 14819                           ;eusart.c: 188: PIE3bits.TXIE = 0;
 14820  00B7  002E               	movlb	14	; select bank14
 14821  00B8  1219               	bcf	25,4	;volatile
 14822  00B9  0008               	return
 14823  00BA                     __end_of_EUSART_Transmit_ISR:	
 14824                           
 14825                           	psect	text71
 14826  00D1                     __ptext71:	
 14827 ;; *************** function _EUSART_Receive_ISR *****************
 14828 ;; Defined at:
 14829 ;;		line 192 in file "mcc_generated_files/eusart.c"
 14830 ;; Parameters:    Size  Location     Type
 14831 ;;		None
 14832 ;; Auto vars:     Size  Location     Type
 14833 ;;		None
 14834 ;; Return value:  Size  Location     Type
 14835 ;;                  1    wreg      void 
 14836 ;; Registers used:
 14837 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14838 ;; Tracked objects:
 14839 ;;		On entry : 1F/1
 14840 ;;		On exit  : 1F/1
 14841 ;;		Unchanged: 0/0
 14842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14847 ;;Total ram usage:        0 bytes
 14848 ;; Hardware stack levels used:    1
 14849 ;; This function calls:
 14850 ;;		Nothing
 14851 ;; This function is called by:
 14852 ;;		_EUSART_Initialize
 14853 ;;		_INTERRUPT_InterruptManager
 14854 ;; This function uses a non-reentrant model
 14855 ;;
 14856                           
 14857                           
 14858                           ;psect for function _EUSART_Receive_ISR
 14859  00D1                     _EUSART_Receive_ISR:	
 14860                           
 14861                           ;eusart.c: 195: if(1 == RC1STAbits.OERR)
 14862                           
 14863                           ;incstack = 0
 14864                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 14865  00D1  0022               	movlb	2	; select bank2
 14866  00D2  1C9D               	btfss	29,1	;volatile
 14867  00D3  28D6               	goto	i1l3334
 14868                           
 14869                           ;eusart.c: 196: {
 14870                           ;eusart.c: 199: RC1STAbits.CREN = 0;
 14871  00D4  121D               	bcf	29,4	;volatile
 14872                           
 14873                           ;eusart.c: 200: RC1STAbits.CREN = 1;
 14874  00D5  161D               	bsf	29,4	;volatile
 14875  00D6                     i1l3334:	
 14876                           
 14877                           ;eusart.c: 201: }
 14878                           ;eusart.c: 204: eusartRxBuffer[eusartRxHead++] = RC1REG;
 14879  00D6  0020               	movlb	0	; select bank0
 14880  00D7  086E               	movf	_eusartRxHead,w
 14881  00D8  3EBE               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14882  00D9  0086               	movwf	6
 14883  00DA  0187               	clrf	7
 14884  00DB  0022               	movlb	2	; select bank2
 14885  00DC  0819               	movf	25,w	;volatile
 14886  00DD  0081               	movwf	1
 14887  00DE  0020               	movlb	0	; select bank0
 14888  00DF  0AEE               	incf	_eusartRxHead,f	;volatile
 14889                           
 14890                           ;eusart.c: 205: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14891  00E0  3008               	movlw	8
 14892  00E1  026E               	subwf	_eusartRxHead,w
 14893  00E2  1803               	btfsc	3,0
 14894                           
 14895                           ;eusart.c: 206: {
 14896                           ;eusart.c: 207: eusartRxHead = 0;
 14897  00E3  01EE               	clrf	_eusartRxHead	;volatile
 14898                           
 14899                           ;eusart.c: 208: }
 14900                           ;eusart.c: 209: eusartRxCount++;
 14901  00E4  0021               	movlb	1	; select bank1
 14902  00E5  0AD1               	incf	_eusartRxCount^(0+128),f	;volatile
 14903  00E6  0008               	return
 14904  00E7                     __end_of_EUSART_Receive_ISR:	
 14905  007E                     btemp	set	126	;btemp
 14906  007E                     int$flags	set	126
 14907  007E                     wtemp0	set	126


Data Sizes:
    Strings     719
    Constant    69
    Data        43
    BSS         24
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     78      80
    BANK1            80     14      76
    BANK2            80      0      13
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    S572$4$0	PTR void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S572$5$0	PTR void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_24(CODE[8]), STR_21(CODE[7]), errStr(BANK1[4]), failedStr(BANK1[7]), 
		 -> STR_18(CODE[5]), STR_16(CODE[7]), STR_14(CODE[8]), openStr(CODE[5]), 
		 -> STR_12(CODE[6]), hardRebootStr(CODE[6]), softRebootStr(CODE[7]), aokStr(CODE[4]), 
		 -> endStr(CODE[5]), cmdStr(CODE[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_24(CODE[8]), STR_21(CODE[7]), errStr(BANK1[4]), failedStr(BANK1[7]), 
		 -> STR_18(CODE[5]), STR_16(CODE[7]), STR_14(CODE[8]), openStr(CODE[5]), 
		 -> STR_12(CODE[6]), hardRebootStr(CODE[6]), softRebootStr(CODE[7]), aokStr(CODE[4]), 
		 -> endStr(CODE[5]), cmdStr(CODE[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_30(CODE[7]), sprintf@c(BANK0[1]), STR_29(CODE[10]), STR_28(CODE[14]), 
		 -> STR_23(CODE[5]), STR_22(CODE[12]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_27(CODE[11]), STR_26(CODE[14]), STR_25(CODE[10]), STR_20(CODE[13]), 
		 -> STR_13(CODE[13]), STR_9(CODE[19]), STR_8(CODE[25]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 40
		 -> Knock@knockString(BANK1[10]), Validate@valString(BANK1[13]), Pair@pairString(BANK1[9]), WiFly_SendCMD_DoubleArg@txBuffer(BANK0[40]), 
		 -> WiFly_SendCMD_SingleArg@txBuffer(BANK0[40]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    connect_network@passwd	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_29(CODE[10]), 

    connect_network@ssid	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_28(CODE[14]), 

    send_message@message	PTR const unsigned char  size(1) Largest target is 13
		 -> Knock@knockString(BANK1[10]), Validate@valString(BANK1[13]), Pair@pairString(BANK1[9]), 

    WaitResponse@chkString	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_24(CODE[8]), STR_21(CODE[7]), 

    connect_socket@port	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_23(CODE[5]), 

    connect_socket@addr	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_22(CODE[12]), 

    CheckResponse@chkString3	PTR const unsigned char  size(1) Largest target is 4
		 -> errStr(BANK1[4]), 

    CheckResponse@chkString2	PTR const unsigned char  size(1) Largest target is 7
		 -> failedStr(BANK1[7]), 

    CheckResponse@chkString1	PTR const unsigned char  size(2) Largest target is 5
		 -> openStr(CODE[5]), 

    WiFly_Example_InitializeAsClient@ssid	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_28(CODE[14]), 

    WiFly_Example_InitializeAsClient@password	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_29(CODE[10]), 

    WiFly_SendCMD@cmd	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_10(CODE[18]), STR_7(CODE[16]), STR_6(CODE[21]), 

    WiFly_SendCMD_DoubleArg@arg2	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_23(CODE[5]), 

    WiFly_SendCMD_DoubleArg@arg1	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_22(CODE[12]), 

    WiFly_SendCMD_DoubleArg@cmdFormat	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_20(CODE[13]), STR_13(CODE[13]), 

    WiFly_SendCMD_SingleArg@arg	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_29(CODE[10]), STR_28(CODE[14]), 

    WiFly_SendCMD_SingleArg@cmdFormat	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_9(CODE[19]), STR_8(CODE[25]), 

    WiFly_CheckRecv@chkString	PTR const unsigned char  size(2) Largest target is 7
		 -> openStr(CODE[5]), STR_12(CODE[6]), hardRebootStr(CODE[6]), softRebootStr(CODE[7]), 
		 -> aokStr(CODE[4]), endStr(CODE[5]), cmdStr(CODE[4]), 

    WiFly_SendString@sendString	PTR const unsigned char  size(2) Largest target is 387
		 -> Knock@knockString(BANK1[10]), Validate@valString(BANK1[13]), Pair@pairString(BANK1[9]), STR_19(CODE[387]), 
		 -> STR_17(CODE[9]), STR_15(CODE[14]), STR_11(CODE[21]), STR_10(CODE[18]), 
		 -> STR_7(CODE[16]), STR_6(CODE[21]), STR_5(CODE[16]), STR_4(CODE[7]), 
		 -> STR_3(CODE[9]), STR_2(CODE[7]), 

    WiFly_Send@command	PTR unsigned char  size(2) Largest target is 387
		 -> Knock@knockString(BANK1[10]), Validate@valString(BANK1[13]), Pair@pairString(BANK1[9]), STR_19(CODE[387]), 
		 -> STR_17(CODE[9]), STR_15(CODE[14]), STR_11(CODE[21]), STR_10(CODE[18]), 
		 -> STR_7(CODE[16]), STR_6(CODE[21]), STR_5(CODE[16]), STR_4(CODE[7]), 
		 -> STR_3(CODE[9]), WiFly_SendCMD_DoubleArg@txBuffer(BANK0[40]), WiFly_SendCMD_SingleArg@txBuffer(BANK0[40]), STR_2(CODE[7]), 
		 -> STR_1(CODE[4]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> blink(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> blink(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    S572$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    uart.Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    S572$TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    uart.TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S572$TransmitReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    uart.TransmitReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    S572$TransmitDone	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    uart.TransmitDone	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    S572$SetTxISR	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    uart.SetTxISR	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    S572$SetRxISR	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    uart.SetRxISR	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    S572$RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    uart.RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S572$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    uart.Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    S572$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    uart.Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S572$DataReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    uart.DataReady	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    EUSART_SetRxInterruptHandler@handler	PTR void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_SetTxInterruptHandler@handler	PTR void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    TMR4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> setFlag(), TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> setFlag(), Absolute function(), TMR4_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _WiFly_CheckInCMD->_WiFly_EnterCMDMode
    _WiFly_EnterCMDMode->_WiFly_CheckRecv
    _WiFly_CheckRecv->_strlen
    _CheckResponse->_strlen
    _WiFly_SendString->_WiFly_Send
    _WiFly_Send->_EUSART_Write
    _Clear_RX_Buffer->_EUSART_Read
    _get_response->_WaitResponse
    _goto_mode->_SetIndication
    _WaitResponse->_strlen
    _WiFly_ReadChar->_EUSART_Read

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _blink->i1_SetIndication

Critical Paths under _main in BANK0

    _main->_Pair
    _main->_Validate
    _main->_connect_network
    _connect_network->_WiFly_Example_InitializeAsClient
    _WiFly_Example_InitializeAsClient->_WiFly_SendCMD_SingleArg
    _WiFly_SendCMD_SingleArg->_sprintf
    _WiFly_FactoryReset->_WiFly_SendCMD
    _WiFly_SendCMD->_WiFly_CheckRecv
    _WiFly_RebootCMD->_WiFly_CheckRecv
    _Validate->_send_message
    _Pair->_send_message
    _Knock->_send_message
    _send_message->_connect_socket
    _connect_socket->_WiFly_SendCMD_DoubleArg
    _WiFly_SendCMD_DoubleArg->_sprintf
    _sprintf->___lwmod
    _WiFly_EnterCMDMode->_WiFly_CheckRecv
    _get_response->_WaitResponse

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Validate

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  113414
                              _Knock
                               _Pair
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
           _TMR4_SetInterruptHandler
                     _TMR4_StopTimer
                           _Validate
                 _WiFly_FactoryReset
                    _connect_network
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _connect_network                                      4     0      4   39634
                                             74 BANK0      4     0      4
   _WiFly_Example_InitializeAsClient
 ---------------------------------------------------------------------------------
 (2) _WiFly_Example_InitializeAsClient                     4     0      4   39418
                                             70 BANK0      4     0      4
                    _WiFly_CheckRecv
                 _WiFly_FactoryReset
                   _WiFly_SaveConfig
                      _WiFly_SendCMD
            _WiFly_SendCMD_SingleArg
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (3) _WiFly_SendCMD_SingleArg                             44    40      4    9091
                                             26 BANK0     44    40      4
                    _Clear_RX_Buffer
                   _WiFly_CheckInCMD
                    _WiFly_CheckRecv
                         _WiFly_Send
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _WiFly_FactoryReset                                   2     2      0   17270
                                              6 BANK0      2     2      0
                    _WiFly_CheckRecv
                    _WiFly_RebootCMD
                   _WiFly_SaveConfig
                      _WiFly_SendCMD
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (3) _WiFly_SendCMD                                        2     0      2    4691
                                              4 BANK0      2     0      2
                   _WiFly_CheckInCMD
                    _WiFly_CheckRecv
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (3) _WiFly_SaveConfig                                     0     0      0    5575
                    _WiFly_RebootCMD
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (4) _WiFly_RebootCMD                                      0     0      0    4429
                   _WiFly_CheckInCMD
                    _WiFly_CheckRecv
                   _WiFly_SendString
 ---------------------------------------------------------------------------------
 (1) _Validate                                            15    15      0   18547
                                             77 BANK0      1     1      0
                                              0 BANK1     14    14      0
                    _TMR4_StartTimer
                       _get_response
                          _goto_mode
                       _send_message
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     495
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                    _WWDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WWDT_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     150
           _TMR4_SetInterruptHandler
                         _TMR4_Start
 ---------------------------------------------------------------------------------
 (1) _TMR4_SetInterruptHandler                             2     0      2     150
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     150
           _TMR2_SetInterruptHandler
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     150
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     172
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      86
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      86
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Pair                                                11    11      0   18630
                                             77 BANK0      1     1      0
                                              0 BANK1     10    10      0
                     _WiFly_ReadChar
                       _eeprom_write
                       _get_response
                          _goto_mode
                       _send_message
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         2     1      1     108
                                              1 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Knock                                               13    13      0   18516
                                              0 BANK1     13    13      0
                _RELAY_RL1_Disengage
                   _RELAY_RL1_Engage
                     _TMR4_StopTimer
                       _get_response
                          _goto_mode
                       _send_message
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _send_message                                         1     1      0   11993
                                             76 BANK0      1     1      0
                    _Clear_RX_Buffer
                       _WaitResponse
                   _WiFly_SendString
                     _connect_socket
                          _goto_mode
 ---------------------------------------------------------------------------------
 (3) _connect_socket                                       4     0      4    9564
                                             72 BANK0      4     0      4
                      _CheckResponse
            _WiFly_SendCMD_DoubleArg
 ---------------------------------------------------------------------------------
 (4) _WiFly_SendCMD_DoubleArg                             46    40      6    7787
                                             26 BANK0     46    40      6
                    _Clear_RX_Buffer
                   _WiFly_CheckInCMD
                         _WiFly_Send
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             29    23      6    4879
                                              1 BANK0     25    19      6
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     220
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     386
                                              8 COMMON     4     0      4
                                              0 BANK0      1     1      0
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     418
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               3     2      1     156
                                              1 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _WiFly_CheckInCMD                                     0     0      0    1854
                 _WiFly_EnterCMDMode
 ---------------------------------------------------------------------------------
 (5) _WiFly_EnterCMDMode                                   2     2      0    1854
                                              9 COMMON     2     2      0
                    _Clear_RX_Buffer
                    _WiFly_CheckRecv
                         _WiFly_Send
 ---------------------------------------------------------------------------------
 (4) _WiFly_CheckRecv                                      7     5      2    1429
                                              6 COMMON     3     1      2
                                              0 BANK0      4     4      0
                        _EUSART_Read *
                 _EUSART_is_rx_ready
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _CheckResponse                                       18    14      4    1561
                                              6 COMMON     5     1      4
                                              0 BANK0     13    13      0
                     _WiFly_ReadChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _WiFly_SendString                                     2     0      2    1146
                                              5 COMMON     2     0      2
                    _Clear_RX_Buffer
                         _WiFly_Send
 ---------------------------------------------------------------------------------
 (4) _WiFly_Send                                           3     1      2     388
                                              2 COMMON     3     1      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     0      1      87
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Clear_RX_Buffer                                      0     0      0      37
                        _EUSART_Read *
                 _EUSART_is_rx_ready
 ---------------------------------------------------------------------------------
 (2) _get_response                                         1     1      0    1249
                                              9 COMMON     1     1      0
                       _WaitResponse
                     _WiFly_ReadChar
                          _goto_mode
 ---------------------------------------------------------------------------------
 (3) _goto_mode                                            1     1      0     186
                                              2 COMMON     1     1      0
                    _ClearIndicators
                      _SetIndication
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                    _TMR4_StartTimer
                     _TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (4) _TMR4_StopTimer                                       0     0      0       0
                          _TMR4_Stop
 ---------------------------------------------------------------------------------
 (5) _TMR4_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR4_StartTimer                                      0     0      0       0
                         _TMR4_Start
 ---------------------------------------------------------------------------------
 (5) _TMR4_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR2_StopTimer                                       0     0      0       0
                          _TMR2_Stop
 ---------------------------------------------------------------------------------
 (5) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (5) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SetIndication                                        1     1      0     155
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ClearIndicators                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WaitResponse                                         7     5      2     930
                                              6 COMMON     3     1      2
                                              0 BANK0      4     4      0
                     _WiFly_ReadChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               5     3      2     572
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (5) _WiFly_ReadChar                                       0     0      0      37
                        _EUSART_Read *
                 _EUSART_is_rx_ready
 ---------------------------------------------------------------------------------
 (5) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Read                                          1     1      0      37
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _RELAY_RL1_Engage                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RELAY_RL1_Disengage                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          0     0      0     110
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR4_ISR                                            0     0      0       0
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
                            _setFlag *
 ---------------------------------------------------------------------------------
 (12) _setFlag                                             0     0      0       0
                   i1_TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (13) i1_TMR4_StopTimer                                    0     0      0       0
                        i1_TMR4_Stop
 ---------------------------------------------------------------------------------
 (14) i1_TMR4_Stop                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR4_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR2_ISR                                            0     0      0     110
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                              _blink *
 ---------------------------------------------------------------------------------
 (12) _blink                                               0     0      0     110
                    i1_SetIndication
 ---------------------------------------------------------------------------------
 (13) i1_SetIndication                                     1     1      0     110
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Knock
     _RELAY_RL1_Disengage
     _RELAY_RL1_Engage
     _TMR4_StopTimer
       _TMR4_Stop
     _get_response
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_ReadChar
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _goto_mode
       _ClearIndicators
       _SetIndication
       _TMR2_StartTimer
         _TMR2_Start
       _TMR2_StopTimer
         _TMR2_Stop
       _TMR4_StartTimer
         _TMR4_Start
       _TMR4_StopTimer
         _TMR4_Stop
     _send_message
       _Clear_RX_Buffer
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
       _connect_socket
         _CheckResponse
           _WiFly_ReadChar
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _strlen
         _WiFly_SendCMD_DoubleArg
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_Send
             _EUSART_Write *
           _sprintf
             ___bmul
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _Pair
     _WiFly_ReadChar
       _EUSART_Read *
       _EUSART_is_rx_ready *
     _eeprom_write
     _get_response
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_ReadChar
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _goto_mode
       _ClearIndicators
       _SetIndication
       _TMR2_StartTimer
         _TMR2_Start
       _TMR2_StopTimer
         _TMR2_Stop
       _TMR4_StartTimer
         _TMR4_Start
       _TMR4_StopTimer
         _TMR4_Stop
     _send_message
       _Clear_RX_Buffer
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
       _connect_socket
         _CheckResponse
           _WiFly_ReadChar
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _strlen
         _WiFly_SendCMD_DoubleArg
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_Send
             _EUSART_Write *
           _sprintf
             ___bmul
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_Start
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
       _TMR4_Start
     _WWDT_Initialize
   _TMR2_SetInterruptHandler
   _TMR2_StartTimer
     _TMR2_Start
   _TMR4_SetInterruptHandler
   _TMR4_StopTimer
     _TMR4_Stop
   _Validate
     _TMR4_StartTimer
       _TMR4_Start
     _get_response
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_ReadChar
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _goto_mode
       _ClearIndicators
       _SetIndication
       _TMR2_StartTimer
         _TMR2_Start
       _TMR2_StopTimer
         _TMR2_Stop
       _TMR4_StartTimer
         _TMR4_Start
       _TMR4_StopTimer
         _TMR4_Stop
     _send_message
       _Clear_RX_Buffer
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _WaitResponse
         _WiFly_ReadChar
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _strlen
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
       _connect_socket
         _CheckResponse
           _WiFly_ReadChar
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _strlen
         _WiFly_SendCMD_DoubleArg
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_Send
             _EUSART_Write *
           _sprintf
             ___bmul
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
       _goto_mode
         _ClearIndicators
         _SetIndication
         _TMR2_StartTimer
           _TMR2_Start
         _TMR2_StopTimer
           _TMR2_Stop
         _TMR4_StartTimer
           _TMR4_Start
         _TMR4_StopTimer
           _TMR4_Stop
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _WiFly_FactoryReset
     _WiFly_CheckRecv
       _EUSART_Read *
       _EUSART_is_rx_ready *
       _strlen *
     _WiFly_RebootCMD
       _WiFly_CheckInCMD
         _WiFly_EnterCMDMode
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_CheckRecv
         _EUSART_Read *
         _EUSART_is_rx_ready *
         _strlen *
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
     _WiFly_SaveConfig
       _WiFly_RebootCMD
         _WiFly_CheckInCMD
           _WiFly_EnterCMDMode
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_CheckRecv
               _EUSART_Read *
               _EUSART_is_rx_ready *
               _strlen *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_CheckRecv
           _EUSART_Read *
           _EUSART_is_rx_ready *
           _strlen *
         _WiFly_SendString
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
     _WiFly_SendCMD
       _WiFly_CheckInCMD
         _WiFly_EnterCMDMode
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_CheckRecv
         _EUSART_Read *
         _EUSART_is_rx_ready *
         _strlen *
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
     _WiFly_SendString
       _Clear_RX_Buffer
         _EUSART_Read *
         _EUSART_is_rx_ready *
       _WiFly_Send
         _EUSART_Write *
   _connect_network
     _WiFly_Example_InitializeAsClient
       _WiFly_CheckRecv
         _EUSART_Read *
         _EUSART_is_rx_ready *
         _strlen *
       _WiFly_FactoryReset
         _WiFly_CheckRecv
           _EUSART_Read *
           _EUSART_is_rx_ready *
           _strlen *
         _WiFly_RebootCMD
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_SendString
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_SaveConfig
           _WiFly_RebootCMD
             _WiFly_CheckInCMD
               _WiFly_EnterCMDMode
                 _Clear_RX_Buffer
                   _EUSART_Read *
                   _EUSART_is_rx_ready *
                 _WiFly_CheckRecv
                   _EUSART_Read *
                   _EUSART_is_rx_ready *
                   _strlen *
                 _WiFly_Send
                   _EUSART_Write *
             _WiFly_CheckRecv
               _EUSART_Read *
               _EUSART_is_rx_ready *
               _strlen *
             _WiFly_SendString
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_SendString
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_SendCMD
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_SendString
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_SendString
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_SaveConfig
         _WiFly_RebootCMD
           _WiFly_CheckInCMD
             _WiFly_EnterCMDMode
               _Clear_RX_Buffer
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
               _WiFly_CheckRecv
                 _EUSART_Read *
                 _EUSART_is_rx_ready *
                 _strlen *
               _WiFly_Send
                 _EUSART_Write *
           _WiFly_CheckRecv
             _EUSART_Read *
             _EUSART_is_rx_ready *
             _strlen *
           _WiFly_SendString
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_SendString
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_SendCMD
         _WiFly_CheckInCMD
           _WiFly_EnterCMDMode
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_CheckRecv
               _EUSART_Read *
               _EUSART_is_rx_ready *
               _strlen *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_CheckRecv
           _EUSART_Read *
           _EUSART_is_rx_ready *
           _strlen *
         _WiFly_SendString
           _Clear_RX_Buffer
             _EUSART_Read *
             _EUSART_is_rx_ready *
           _WiFly_Send
             _EUSART_Write *
       _WiFly_SendCMD_SingleArg
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_CheckInCMD
           _WiFly_EnterCMDMode
             _Clear_RX_Buffer
               _EUSART_Read *
               _EUSART_is_rx_ready *
             _WiFly_CheckRecv
               _EUSART_Read *
               _EUSART_is_rx_ready *
               _strlen *
             _WiFly_Send
               _EUSART_Write *
         _WiFly_CheckRecv
           _EUSART_Read *
           _EUSART_is_rx_ready *
           _strlen *
         _WiFly_Send
           _EUSART_Write *
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _WiFly_SendString
         _Clear_RX_Buffer
           _EUSART_Read *
           _EUSART_is_rx_ready *
         _WiFly_Send
           _EUSART_Write *
   _eeprom_read

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _TMR2_ISR *
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
     _blink *
       i1_SetIndication
   _TMR4_ISR *
     Absolute function(Fake) *
     _TMR4_DefaultInterruptHandler *
     _setFlag *
       i1_TMR4_StopTimer
         i1_TMR4_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      E      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       D       9       16.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Aug 15 15:04:38 2017

            ?_EUSART_SetRxInterruptHandler 0071                           ??_WiFly_ReadChar 0072  
                 __size_of_WWDT_Initialize 0006           __end_of_TMR2_SetInterruptHandler 0BD4  
                           ___bmul@product 0072                                __CFG_CP$OFF 0000  
                                       PL2 0F4F                                         PL4 0F5E  
                                       PL6 0F6B                                         PL8 0F77  
                                       _WR 40F1                              ?_get_response 0070  
                      ___wmul@multiplicand 0073                                        PL10 0F83  
                                      PL20 0FAE                                        PL12 0F8F  
                                      PL30 0FC6                                        PL22 0FB4  
                                      PL14 0F95                                        PL32 0FCB  
                                      PL24 0FFA                                        PL16 0F9F  
                                      PL26 0FBA                                        PL18 0FA6  
                                      PL28 0FC0                                __CFG_LVP$ON 0000  
                                      l156 0091                                        l601 08AA  
                                      l741 0A14                                        l830 09A5  
                                      l904 0D55                                        l762 0B76  
                                      l860 0C55                                        l828 09B5  
                                      l909 0D69                                        l775 0A46  
                                      l856 0C46                                        l858 0C48  
                                      l875 0D3C                                        l956 0F1C  
                                      l877 0CA6                                        l982 0BC8  
                                      l978 0BB3                                        _GIE 005F  
                             __CFG_CPD$OFF 0000                                        _UID 00E9  
                        ??_WiFly_RebootCMD 007B        EUSART_SetRxInterruptHandler@handler 0071  
                          _TMR2_Initialize 0F3C                               __CFG_BORV$LO 0000  
                                      wreg 0009            __end_of_WiFly_SendCMD_DoubleArg 0BAD  
                   __end_of_connect_socket 0B94                               ?_EUSART_Read 0070  
                             __CFG_ZCD$OFF 0000                                       l4000 0A96  
                                     l4008 0A99                                       l4104 09F1  
                                     l3136 0036                                       l2522 009F  
                                     l2610 0EB4                                       l4122 0A3B  
                                     l4114 0A2F                                       l3500 00BA  
                                     l2508 0086                                       l2540 0E91  
                                     l4126 0A40                                       l3600 0A65  
                                     l4056 0A55                                       l2640 0E75  
                                     l2632 0E66                                       l4146 0953  
                                     l4138 0947                                       l3524 0B64  
                                     l3540 08E9                                       l2644 0E79  
                                     l3620 0C4C                                       l3612 0C41  
                                     l4180 09A0                                       l3526 0B6F  
                                     l3534 0ADD                                       l3550 0846  
                                     l3702 0D15                                       l3710 0D27  
                                     l3614 0C49                                       l4190 09B0  
                                     l4182 09A2                                       l3544 08FF  
                                     l3536 08DB                                       l3704 0D1F  
                                     l3624 0C58                                       l3546 0902  
                                     l2594 0EE0                                       l3722 0D4A  
                                     l3650 0CA4                                       l4186 09AB  
                                     l3548 0907                                       l3580 0ED5  
                                     l2588 0E57                                       l3820 0DEF  
                                     l3804 0DDC                                       l3660 0CB8  
                                     l3652 0CA8                                       l3628 0C60  
                                     l3636 0C82                                       l3590 0F39  
                                     l3566 0E7E                                       l2598 0EE6  
                                     l3830 0E21                                       l3822 0E07  
                                     l3814 0DE6                                       l3726 0D4C  
                                     l3592 0F33                                       l3920 0B2C  
                                     l3576 0EC9                                       l3584 0ED9  
                                     l3840 0E3F                                       l3832 0E29  
                                     l3808 0DE1                                       l3760 0D85  
                                     l3672 0CDC                                       l3664 0CBA  
                                     l3648 0C8F                                       l3594 0F36  
                                     l3922 0B2E                                       l3914 0B20  
                                     l3906 0B0B                                       l3682 0CEE  
                                     l3666 0CC7                                       l3588 0F07  
                                     l3916 0B22                                       l3908 0B0E  
                                     l3836 0E2F                                       l3780 0DB1  
                                     l3676 0CE9                                       l3852 0896  
                                     l3598 0A5E                                       l3870 0F2B  
                                     l3934 0B4F                                       l3782 0DB4  
                                     l3774 0DA5                                       l3758 0D7D  
                                     l3686 0CF0                                       l3694 0D07  
                                     l3678 0CEB                                       l3846 0C30  
                                     l3928 0B37                                       l3768 0D99  
                                     l3848 0E46                                       l3688 0CFA  
                                     l3890 0ACE                                       l3786 0DBE  
                                     l3698 0D13                                       l3980 0A09  
                                     l3796 0DCD                                       l3788 0DC1  
                                     l3868 0EAB                                       l3894 0AD7  
                                     l3886 0AC5                                       l3974 0A03  
                                     l3984 0A0D                                       l3988 0A0F  
                                     STR_1 1310                                       STR_2 12E1  
                                     STR_3 12A5                                       STR_4 12DA  
                                     STR_5 1220                                       STR_6 11B1  
                                     STR_7 1210                                       STR_8 1183  
                                     STR_9 11DA                                       _LATA 0016  
                                     _LATB 0017                                       u3015 0D66  
                                     _LATC 0018                                       u2240 0C2B  
                                     _LATD 0019                                       _LATE 001A  
                                     u3035 0D7A                                       u2501 0F1B  
                                     u3215 0E3D                                       u1545 0E6E  
                                     _T2PR 028D                                       u3315 0B3D  
                                     u3420 09CC                                       u3325 0B45  
                                     u3335 0B4D                                       u3440 0A22  
                                     u3345 0B55                                       _T4PR 0293  
                                     u3355 0B5D                                       u2735 090E  
                                     u3480 0939                                       u3385 0A9F  
                                     u2905 0CE2                                       u3557 087A  
                                     u2775 0ECF                                       u3567 0963  
                                     u3577 084D                                       u3587 0865  
                                     u2895 0CD5                                       _WPUA 0F39  
                                     _WPUB 0F44                                       _WPUC 0F4F  
                           ??_eeprom_write 0072                                       _WPUD 0F5A  
                                     _WPUE 0F65                          ?_WiFly_SaveConfig 0070  
                                     _Pair 09C1                               __CFG_WRT$OFF 0000  
                            __CFG_FCMEN$ON 0000                           ?_ClearIndicators 0070  
                                     _main 096D                                       _mode 00D0  
                                     _uart 11C6                                       fsr0h 0005  
                                     fsr1h 0007                                       indf0 0000  
                                     fsr0l 0004                                       indf1 0001  
                                     fsr1l 0006                                       btemp 007E  
                       ??_WiFly_SaveConfig 007B                              __CFG_BOREN$ON 0000  
                        ?_WiFly_SendString 0075                                       start 0034  
                  CheckResponse@chkString1 0076                    CheckResponse@chkString2 0078  
                  CheckResponse@chkString3 0079                    __end_of_connect_network 0F19  
                       ??_WiFly_SendString 0077                              __CFG_CSWEN$ON 0000  
                        ___bmul@multiplier 0073                              __CFG_MCLRE$ON 0000  
                         ?_Clear_RX_Buffer 0070                 ??_TMR4_SetInterruptHandler 0073  
                           ??_get_response 0079            __end_of_WiFly_SendCMD_SingleArg 092A  
                            ?_EUSART_Write 0071             __size_of_OSCILLATOR_Initialize 0009  
                                    ?_Pair 0070              __end_of_OSCILLATOR_Initialize 0BEE  
                                    ?_main 0070                                      STR_10 11ED  
                                    STR_11 119C                                      STR_20 125A  
                                    STR_12 12EE                                      STR_21 12CC  
                                    STR_13 125A                                      STR_30 12C5  
                                    STR_14 12B6                                      STR_22 1267  
                                    STR_23 12FE                                      STR_15 124C  
                                    STR_31 11FF                                      STR_24 12B6  
                                    STR_16 12D3                                      STR_17 129C  
                                    STR_25 1292                                      STR_18 1303  
                                    STR_26 123E                                      STR_27 1273  
                                    STR_19 1000                                      STR_28 1230  
                                    STR_29 1288                                      _T2CON 028E  
                                    _T4CON 0294                                      _T2HLT 028F  
                                    _T4HLT 0295                             __CFG_DEBUG$OFF 0000  
                          __end_of___lwdiv 0E7E                                      _T2TMR 028C  
                                    i1l162 00B7                                      _T2RST 0291  
                          __end_of___lwmod 0EDE                                      _T4TMR 0292  
                                    i1l640 0032                                      i1l632 0013  
                                    i1l634 0020                                      _T4RST 0297  
                                    i1l636 002A                                      _OSCEN 0891  
                                    _TRISA 0011                                      _TRISB 0012  
                                    _TRISC 0013                                      _TRISD 0014  
                                    _TRISE 0015                            _TMR4_Initialize 0EF3  
                                    _Knock 092A                           __end_of_TMR2_ISR 010C  
                          ?_connect_socket 0068                           __end_of_TMR4_ISR 0100  
                                    _inCMD 00EA                                      _blink 0FD0  
                          __end_of_dpowers 1288                         __size_of_TMR2_Stop 0003  
                              ?_TMR2_Start 0070                         __size_of_TMR4_Stop 0003  
                          __end_of_isdigit 0E59                                ?_TMR4_Start 0070  
                          __end_of_setFlag 0111                            __end_of_openStr 12F9  
                                    pclath 000A                __size_of_WiFly_FactoryReset 0026  
                              Knock@F15448 00A0                                      status 0003  
                                    wtemp0 007E                            __end_of_sprintf 0E4B  
                          _TMR2_StartTimer 0AB3                   __end_ofi1_TMR4_StopTimer 0113  
                          __initialization 0820                               __end_of_Pair 09F3  
                 __size_ofi1_SetIndication 0022                               ?i1_TMR4_Stop 0070  
                             __end_of_main 09C1                               __end_of_uart 11DA  
                     CheckResponse@length1 0022                       CheckResponse@length2 0024  
                     CheckResponse@length3 0020                             ??_EUSART_Write 0072  
                       get_response@status 0079                    __end_of_TMR2_Initialize 0F4F  
              ?_INTERRUPT_InterruptManager 0070                                     ??_Pair 006D  
           ??_EUSART_SetRxInterruptHandler 0073                   _TMR2_SetInterruptHandler 0BCE  
                                   ??_main 007C                          ??_WWDT_Initialize 0071  
                        ?_RELAY_RL1_Engage 0070                           __end_of_Validate 0A46  
         WiFly_SendCMD_DoubleArg@cmdFormat 003A                         ??_RELAY_RL1_Engage 0071  
                               _WiFly_Send 0E91                                     ?_Knock 0070  
     WiFly_Example_InitializeAsClient@ssid 0066                                     ?_blink 0070  
                                   _ANSELA 0F38                                     _ANSELB 0F43  
                                   _ANSELC 0F4E                                     _ANSELD 0F59  
                                   _ANSELE 0F64                         __CFG_RSTOSC$HFINT1 0000  
               __end_of_EUSART_is_rx_ready 0AB9                                     _RC1REG 0119  
                                   _RC1PPS 0F21                                     _RC1STA 011D  
                                   i1l3112 0FEC                                     _ODCONA 0F3A  
                                   _ODCONB 0F45                                     _ODCONC 0F50  
                                   i1l3116 0FF5                                     i1l3108 0FE3  
                                   _ODCOND 0F5B                                     _ODCONE 0F66  
                                   i1l3334 00D6                                     u233_20 0FD5  
                                   u234_20 0FD6                                     _OSCFRQ 0893  
                                   _TX1REG 011A                                     _TX1STA 011E  
               WiFly_SendString@sendString 0075                            _TMR4_StartTimer 0ADC  
                           __CFG_PWRTE$OFF 0000                           ?_connect_network 006A  
                     __size_of_eeprom_read 000F                                     ___bmul 0EB2  
         __size_of_WiFly_SendCMD_DoubleArg 0019                            _WiFly_CheckRecv 08DB  
                                   ___wmul 0EDE                             __CFG_STVREN$ON 0000  
                        __end_of_TMR2_Stop 0F39                  __size_of_WiFly_CheckInCMD 0005  
                                   _cmdStr 130C                                     _aokStr 1308  
                        __end_of_TMR4_Stop 0F3C                                     _endStr 12F9  
                                ??___lwdiv 0075                                  ??___lwmod 007C  
                      __size_of_TMR2_Start 0003                           WiFly_SendCMD@cmd 0024  
                      _EUSART_Transmit_ISR 00A2                                     _errStr 00BA  
                      __size_of_TMR4_Start 0003                    __end_of_TMR4_Initialize 0F07  
                   __size_of_WiFly_SendCMD 000C                       __end_of_eeprom_write 0BCE  
                      _RELAY_RL1_Disengage 0F28                                     _strlen 0B60  
                   __size_of_CheckResponse 0078       __end_of_TMR4_DefaultInterruptHandler 0123  
    __size_of_TMR4_DefaultInterruptHandler 0001               _TMR4_DefaultInterruptHandler 0122  
                                ??_isdigit 0071                                  ??_setFlag 0070  
                  __end_of_TMR2_StartTimer 0AB4   TMR2_SetInterruptHandler@InterruptHandler 0071  
 TMR4_SetInterruptHandler@InterruptHandler 0071                                  ??_sprintf 0027  
                     ?_EUSART_Transmit_ISR 0070                       __end_of_get_response 0A5E  
                     __size_of_EUSART_Read 0017                          _SYSTEM_Initialize 0BDA  
                  __end_of__initialization 0843           __size_of_WiFly_SendCMD_SingleArg 0019  
                     ?_RELAY_RL1_Disengage 0070                            eeprom_read@addr 0071  
                       ?_SYSTEM_Initialize 0070                           SetIndication@set 0071  
     __end_of_EUSART_SetTxInterruptHandler 0063      __size_of_EUSART_SetTxInterruptHandler 0006  
             _EUSART_SetTxInterruptHandler 005D                        ___bmul@multiplicand 0071  
                          _WiFly_RebootCMD 0896                              __end_of_Knock 096D  
                           __pcstackCOMMON 0070                               __pidataBANK1 0068  
                             __pidataBANK2 00E7                        ??_SYSTEM_Initialize 0073  
                                ?_TMR2_ISR 0070                              __end_of_blink 0FD8  
                                ?_TMR4_ISR 0070                      __end_of_hardRebootStr 12EE  
                         ?_TMR2_Initialize 0070                                 __end_ofPL2 0F5E  
                               __end_ofPL4 0F6B                                 __end_ofPL6 0F77  
                               __end_ofPL8 0F83                     __size_of_SetIndication 0023  
                        ??i1_SetIndication 0070           WiFly_SendCMD_SingleArg@cmdFormat 003A  
                       CheckResponse@input 0028                                ?_WiFly_Send 0072  
            ?_TMR4_DefaultInterruptHandler 0070                                    ??_Knock 00D3  
                        eeprom_write@value 0071                                    ??_blink 0071  
                  __end_of_TMR4_StartTimer 0ADD                  __end_of_SYSTEM_Initialize 0BE5  
                    ??_EUSART_Transmit_ISR 0070                               sprintf@width 0037  
              __size_of_WiFly_EnterCMDMode 002A                                 __pbssBANK0 006E  
                               __pbssBANK1 00BE                       __end_of_EUSART_Write 00A2  
                    ??_RELAY_RL1_Disengage 0071                              _WiFly_SendCMD 0E85  
                            _CheckResponse 0AE8                    __end_of_WiFly_CheckRecv 0911  
              __size_of_EUSART_Receive_ISR 0016                      _TMR4_InterruptHandler 00E7  
          WiFly_SendCMD_DoubleArg@txBuffer 0040                         __size_of_goto_mode 0022  
                            ?_WaitResponse 0076                                  ?_Validate 0070  
                               __pmaintext 096D                                    ?___bmul 0071  
            ?_EUSART_SetTxInterruptHandler 0071           _EUSART_TxDefaultInterruptHandler 00E5  
                                  ?___wmul 0071                            __CFG_PPS1WAY$ON 0000  
                               ??_TMR2_ISR 0071                                 ??_TMR4_ISR 0070  
                               __pintentry 0004                  __size_of_WiFly_SaveConfig 0007  
                     __size_ofi1_TMR4_Stop 0003                           ?_TMR4_Initialize 0070  
                            ?_send_message 0070                           ??_connect_socket 007C  
                __size_of_WiFly_SendString 0007                                    ?_strlen 0071  
                         Knock@knockString 00D5                              _eusartRxCount 00D1  
                                  _SP1BRGH 011C                                    _SP1BRGL 011B  
                    connect_network@passwd 006C                                    _OSCCON1 088D  
                                  _OSCCON3 088F                              Pair@returnVal 00DC  
                           Knock@returnVal 00DF                                    _NVMADRH 081B  
                                  _NVMADRL 081A                                    _NVMDATH 081D  
                                  _OSCTUNE 0892                                    _NVMDATL 081C  
                                  _NVMCON2 081F                                    _PPSLOCK 0E8F  
                                  _WDTCON0 080C                                    _WDTCON1 080D  
                             ??_TMR2_Start 0071                    __size_of_TMR2_StopTimer 0001  
                             ??_TMR4_Start 0071                           ?_TMR2_StartTimer 0070  
                    WaitResponse@chkString 0076                             ?_WiFly_SendCMD 0024  
                            _SetIndication 0AB9                    __end_of_WiFly_RebootCMD 08AA  
                           ?_CheckResponse 0076        EUSART_SetTxInterruptHandler@handler 0071  
                           ??_WaitResponse 0078                                 ??_Validate 006D  
                          _WWDT_Initialize 0F0A                 ??_TMR2_SetInterruptHandler 0073  
                  _WiFly_SendCMD_DoubleArg 0B94                        __size_of_WiFly_Send 001A  
                        ?i1_TMR4_StopTimer 0070                   __size_of_ClearIndicators 0008  
                    __size_of_eeprom_write 001C                       __CFG_SCANE$available 0000  
                  __size_of_TMR4_StopTimer 0001                            __size_of___bmul 000C  
                         _WiFly_CheckInCMD 0BAD                            __size_of___wmul 0015  
                                  ___lwdiv 0E59                                    ___lwmod 0EBE  
                       ??i1_TMR4_StopTimer 0070                             ??_send_message 007C  
                       __end_of_TMR2_Start 0F36                         __end_of_TMR4_Start 0F0A  
                                  __ptext1 0F19                                    __ptext2 0F10  
                                  __ptext3 08AA                                    __ptext4 0911  
                                  __ptext5 0870                                    __ptext6 0E85  
                                  __ptext7 0EAB                                    __ptext8 0896  
                                  __ptext9 0A16                   __size_of_Clear_RX_Buffer 000B  
                          __size_of_strlen 0016                          __end_of_hexpowers 12B6  
                                  _dpowers 127E                      _OSCILLATOR_Initialize 0BE5  
                                _T2CONbits 028E                                    _isdigit 0E4B  
                    __end_of_softRebootStr 12C5                    __size_of_WiFly_ReadChar 000D  
                                  _setFlag 010C                                  _T4CONbits 0294  
                        __end_of_goto_mode 0A15                   ??_PIN_MANAGER_Initialize 0071  
        __size_of_TMR4_SetInterruptHandler 0006                      __size_of_get_response 0018  
                                  _openStr 12F4                  ?_TMR4_SetInterruptHandler 0071  
               __size_of_SYSTEM_Initialize 000B                                    _sprintf 0C2D  
                                  clrloop0 011D                 __end_of_WiFly_FactoryReset 0896  
                         ?_TMR4_StartTimer 0070                         i1SetIndication@set 0070  
                     end_of_initialization 0843                             ?_SetIndication 0070  
                  _WiFly_SendCMD_SingleArg 0911             ??_TMR4_DefaultInterruptHandler 0070  
                                  init_ram 0116                  __size_of_RELAY_RL1_Engage 0002  
                             _eeprom_write 0BB2                                    initloop 0117  
                         ?_WiFly_CheckRecv 0076                          _EUSART_Initialize 0036  
                            WaitResponse@i 0022                         ?_EUSART_Initialize 0070  
                       _EUSART_is_rx_ready 0AB6                         _EUSART_is_tx_ready 0000  
                        WiFly_Send@command 0072                      __CFG_WDTCPS$WDTCPS_18 0000  
                             _get_response 0A46                                    strlen@s 0071  
                      ??_EUSART_Initialize 0073             ??_EUSART_SetTxInterruptHandler 0073  
                                _PORTBbits 000D                        ?_EUSART_is_rx_ready 0070  
                                _PORTCbits 000E                                  _TMR2_Stop 0F36  
                                _TMR4_Stop 0F39                      WiFly_CheckRecv@length 0020  
                     __CFG_WDTCCS$LFINTOSC 0000                      __size_of_EUSART_Write 001C  
                          ??_WiFly_SendCMD 007B                           __CFG_FEXTOSC$OFF 0000  
                          ??_CheckResponse 007A                                  _RXPPSbits 0ECB  
                  __end_of_WWDT_Initialize 0F10                  __end_of_EUSART_Initialize 005D  
                     ??_EUSART_is_rx_ready 0071                           ?_WiFly_RebootCMD 0070  
                            ??_eeprom_read 0071                  ??_WiFly_SendCMD_DoubleArg 007C  
                          i1_SetIndication 0FD8       __end_of_TMR2_DefaultInterruptHandler 0124  
    __size_of_TMR2_DefaultInterruptHandler 0001               _TMR2_DefaultInterruptHandler 0123  
                           __end_of___bmul 0EBE                           _WiFly_SaveConfig 0EAB  
                           __end_of___wmul 0EF3                             __end_of_cmdStr 1310  
                           __end_of_aokStr 130C                             __end_of_endStr 12FE  
                             _EUSART_Write 0086                          __size_of_TMR2_ISR 000C  
                        __size_of_TMR4_ISR 000C                   __size_of_connect_network 0009  
                               ?_TMR2_Stop 0070                           _WiFly_SendString 0E7E  
                   ?_OSCILLATOR_Initialize 0070                                 ?_TMR4_Stop 0070  
                        ??_ClearIndicators 0071                             __end_of_strlen 0B76  
                              __end_ofPL10 0F8F                                __end_ofPL20 0FB4  
                              __end_ofPL12 0F95                                __end_ofPL30 0FCB  
                              __end_ofPL22 0FBA                                __end_ofPL14 0F9F  
                              __end_ofPL32 0FD0                                __end_ofPL24 1000  
                              __end_ofPL16 0FA6                                __end_ofPL26 0FC0  
                              __end_ofPL18 0FAE                                __end_ofPL28 0FC6  
                      start_initialization 0820                               ??_WiFly_Send 0074  
                     __end_of_WaitResponse 0AB3            __size_of_PIN_MANAGER_Initialize 003F  
                ??_WiFly_SendCMD_SingleArg 007C                             _TMR2_StopTimer 0A15  
                            ??_EUSART_Read 0071                            ??_SetIndication 0071  
                        ??_Clear_RX_Buffer 0072                          Validate@valString 00D3  
                     __end_of_send_message 0A8A                          Validate@returnVal 00E0  
                      connect_network@ssid 006A                           __CFG_LPBOREN$OFF 0000  
                           _TMR4_StopTimer 0A8A                                   ??___bmul 0072  
                                 ??___wmul 0075                         __end_of_WiFly_Send 0EAB  
                      __end_of_eeprom_read 0F28                          __size_of_Validate 0030  
                              __pdataBANK1 00A0                                __pdataBANK2 0120  
            ?_TMR2_DefaultInterruptHandler 0070                                   ??_strlen 0073  
                           _WiFly_ReadChar 0A5E                __end_of_EUSART_Transmit_ISR 00BA  
                   __end_of_TMR2_StopTimer 0A16                                __pbssCOMMON 007C  
                                ___latbits 0002                              __pcstackBANK0 0020  
                            __pcstackBANK1 00D3                 __end_of_WiFly_EnterCMDMode 0870  
                 __size_of_TMR2_Initialize 0013                __end_of_RELAY_RL1_Disengage 0F2B  
                             _isdigit$1889 0071                   __end_of_WiFly_CheckInCMD 0BB2  
                  __end_ofi1_SetIndication 0FFA                             Validate@F15444 0120  
                         eeprom_write@addr 0072                 __end_of_EUSART_Receive_ISR 00E7  
               __size_of_EUSART_Initialize 0027                           ?_WWDT_Initialize 0070  
                              sprintf@flag 0034                           _RELAY_RL1_Engage 0AB4  
                              sprintf@prec 0033           _EUSART_RxDefaultInterruptHandler 00E3  
                      __end_of_EUSART_Read 00D1                                  __pnvBANK1 00E1  
                          CheckResponse@i1 0029                            CheckResponse@i2 002B  
                          CheckResponse@i3 0026                             Pair@pairString 00D3  
                   __end_of_TMR4_StopTimer 0A8B                                  _failedStr 00B3  
                         ___lwdiv@dividend 0073                     _PIN_MANAGER_Initialize 0BEE  
                     EUSART_Read@readValue 0071                              ??i1_TMR4_Stop 0070  
         __end_of_TMR4_SetInterruptHandler 0BDA                                   ?___lwdiv 0071  
                                 ?___lwmod 0078                               _eusartRxHead 006E  
                             _eusartTxHead 007C                               _eusartRxTail 00D2  
                             _eusartTxTail 006F               ??_INTERRUPT_InterruptManager 0071  
                   __end_of_WiFly_ReadChar 0A6B                                ??_TMR2_Stop 0071  
                              ??_TMR4_Stop 0071                    _eusartTxBufferRemaining 00EB  
                                _indStatus 00CE                                   _BAUD1CON 011F  
                                 ?_isdigit 0070                            ?_TMR2_StopTimer 0070  
                      send_message@message 006C                                   ?_setFlag 0070  
                __size_ofi1_TMR4_StopTimer 0002                             __size_of_Knock 0043  
                 __size_of_TMR4_Initialize 0014                                  _hexpowers 12AE  
                        ??_connect_network 007C                           __CFG_WDTE$SWDTEN 0000  
                         ___lwdiv@quotient 0075                             __size_of_blink 0008  
                                 ?_sprintf 0021                                   _T2CLKCON 0290  
                                _goto_mode 09F3                                   _T4CLKCON 0296  
                           _eusartRxBuffer 00BE                             _eusartTxBuffer 00C6  
                           ___wmul@product 0075                                   _LATAbits 0016  
                                 _LATCbits 0018                                   _LATDbits 0019  
                                clear_ram0 011C                                _eeprom_read 0F19  
                                 _PIE3bits 0719                                   _PIE4bits 071A  
                 __size_of_TMR2_StartTimer 0001                            ?_TMR4_StopTimer 0070  
      __size_of_INTERRUPT_InterruptManager 0030                                   _PIR3bits 070F  
                                 _PIR4bits 0710                         _WiFly_FactoryReset 0870  
                        _EUSART_is_tx_done 0000                WiFly_SendCMD_DoubleArg@arg1 003C  
              WiFly_SendCMD_DoubleArg@arg2 003E                                   _TMR2_ISR 0100  
                                 _TMR4_ISR 00F4                              _hardRebootStr 12E8  
                    __size_of_WaitResponse 0028                        ?_WiFly_FactoryReset 0070  
                          ?_WiFly_ReadChar 0070                          ___wmul@multiplier 0071  
                      __end_ofi1_TMR4_Stop 0116             ??_TMR2_DefaultInterruptHandler 0070  
        __size_of_TMR2_SetInterruptHandler 0006                  ?_TMR2_SetInterruptHandler 0071  
                    __size_of_send_message 001F                                _EUSART_Read 00BA  
                               ?_goto_mode 0070                   __end_of_WiFly_SaveConfig 0EB2  
                  __size_of_connect_socket 001E                           ?i1_SetIndication 0070  
                     ??_WiFly_FactoryReset 0026                          ??_TMR2_Initialize 0073  
                 __end_of_WiFly_SendString 0E85                   __size_of_TMR4_StartTimer 0001  
                          _ClearIndicators 0F2B                                   _Validate 0A16  
                             _WaitResponse 0A8B                    ??_OSCILLATOR_Initialize 0071  
               WiFly_SendCMD_SingleArg@arg 003C                   __size_of_WiFly_CheckRecv 0036  
                         __size_of___lwdiv 0025                            _Clear_RX_Buffer 0ADD  
                         __size_of___lwmod 0020                               _send_message 0A6B  
                 _TMR4_SetInterruptHandler 0BD4                                 sprintf@idx 002B  
                               sprintf@len 002F                                 sprintf@val 0031  
                         __size_of_isdigit 000E                            ___lwdiv@divisor 0071  
                         __size_of_setFlag 0005                            ___lwdiv@counter 0077  
                                 __ptext10 0BDA                                   __ptext11 0F0A  
                                 __ptext20 0063                                   __ptext12 0EF3  
                                 __ptext21 09C1                                   __ptext13 0BD4  
                                 __ptext30 0EBE                                   __ptext22 0BB2  
                                 __ptext14 0F3C                                   __ptext31 0E59  
                                 __ptext23 092A                                   __ptext15 0BCE  
                                 __ptext40 0ADD                                   __ptext32 0EB2  
                                 __ptext24 0A6B                                   __ptext16 0BEE  
                                 __ptext41 0A46                                   __ptext33 0BAD  
                                 __ptext25 0B76                                   __ptext17 0BE5  
                                 __ptext50 0F33                                   __ptext42 09F3  
                                 __ptext34 0846                                   __ptext26 0B94  
                                 __ptext18 0036                                   __ptext51 0AB9  
                                 __ptext43 0A8A                                   __ptext35 08DB  
                                 __ptext27 0C2D                                   __ptext19 005D  
                                 __ptext52 0F2B                                   __ptext44 0F39  
                                 __ptext36 0AE8                                   __ptext28 0E4B  
                                 __ptext61 00F4                                   __ptext53 0A8B  
                                 __ptext45 0ADC                                   __ptext37 0E7E  
                                 __ptext29 0EDE                                   __ptext70 00A2  
                                 __ptext62 0122                                   __ptext54 0B60  
                                 __ptext46 0F07                                   __ptext38 0E91  
                                 __ptext71 00D1                                   __ptext63 010C  
                                 __ptext55 0A5E                                   __ptext47 0A15  
                                 __ptext39 0086                                   __ptext64 0111  
                                 __ptext56 0AB6                                   __ptext48 0F36  
                                 __ptext65 0113                                   __ptext57 00BA  
                                 __ptext49 0AB3                                   __ptext66 0100  
                                 __ptext58 0AB4                                   __ptext67 0123  
                                 __ptext59 0F28                                   __ptext68 0FD0  
                                 __ptext69 0FD8                           __size_of_sprintf 021E  
                    __end_of_WiFly_SendCMD 0E91                              __size_of_Pair 0032  
                       connect_socket@addr 0068                      __end_of_CheckResponse 0B60  
                        ??_TMR4_Initialize 0073                __size_of_EUSART_is_rx_ready 0003  
                       connect_socket@port 006A                              __size_of_main 0054  
                     __CFG_WDTCWS$WDTCWS_7 0000                                   _pingTime 00CF  
                               _RC1STAbits 011D                   WiFly_CheckRecv@chkString 0076  
                              i1_TMR4_Stop 0113                   __size_of_WiFly_RebootCMD 0014  
                                 int$flags 007E                          ??_TMR2_StartTimer 0071  
       __end_of_INTERRUPT_InterruptManager 0034                 _INTERRUPT_InterruptManager 0004  
              PIN_MANAGER_Initialize@state 0071                   __end_of_RELAY_RL1_Engage 0AB6  
          WiFly_SendCMD_SingleArg@txBuffer 003E                                 _INTCONbits 000B  
                              _NVMCON1bits 081E                              _softRebootStr 12BE  
                         i1_TMR4_StopTimer 0111                             __pstringtext10 1000  
                           __pstringtext11 1183                             __pstringtext20 123E  
                           __pstringtext12 119C                             __pstringtext21 124C  
                           __pstringtext13 11B1                             __pstringtext30 12C5  
                           __pstringtext22 125A                             __pstringtext14 11DA  
                           __pstringtext31 12CC                             __pstringtext23 1267  
                           __pstringtext15 11ED                             __pstringtext32 12D3  
                           __pstringtext24 1273                             __pstringtext16 11FF  
                           __pstringtext33 12DA                             __pstringtext25 1288  
                           __pstringtext17 1210                             __pstringtext34 12E1  
                           __pstringtext26 1292                             __pstringtext18 1220  
                           __pstringtext35 12EE                             __pstringtext27 129C  
                           __pstringtext19 1230                             __pstringtext36 12FE  
                           __pstringtext28 12A5                             __pstringtext37 1303  
                           __pstringtext29 12B6                             __pstringtext38 1310  
                           __pstringtext39 0000                            goto_mode@target 0072  
                                 isdigit@c 0072   __end_of_WiFly_Example_InitializeAsClient 08DB  
__size_of_WiFly_Example_InitializeAsClient 0031          ?_WiFly_Example_InitializeAsClient 0066  
       ??_WiFly_Example_InitializeAsClient 007C           _WiFly_Example_InitializeAsClient 08AA  
                              ??_goto_mode 0072                      __end_of_SetIndication 0ADC  
                 ?_WiFly_SendCMD_DoubleArg 003A                          ?_WiFly_CheckInCMD 0070  
                                 intlevel1 0000                                  sprintf@ap 002E  
                                sprintf@cp 002C                                  sprintf@sp 0036  
                  __end_of_ClearIndicators 0F33                           ___lwmod@dividend 007A  
                       ??_WiFly_CheckInCMD 007B                    ?_PIN_MANAGER_Initialize 0070  
                        __CFG_CLKOUTEN$OFF 0000                                _PPSLOCKbits 0E8F  
                              _WDTCON0bits 080C                         _WiFly_EnterCMDMode 0846  
                       WaitResponse@length 0020       __end_of_EUSART_SetRxInterruptHandler 0068  
    __size_of_EUSART_SetRxInterruptHandler 0005               _EUSART_SetRxInterruptHandler 0063  
                  __end_of_Clear_RX_Buffer 0AE8                         _EUSART_Receive_ISR 00D1  
                      ?_WiFly_EnterCMDMode 0070                          ??_TMR4_StartTimer 0071  
                         ??_TMR2_StopTimer 0071                            _connect_network 0F10  
                            __pstringtext1 11C6                              __pstringtext2 127E  
                            __pstringtext3 12AE                              __pstringtext4 12BE  
                            __pstringtext5 12E8                              __pstringtext6 12F4  
                            __pstringtext7 12F9                              __pstringtext8 1308  
                            __pstringtext9 130C                                   sprintf@c 0039  
                                 sprintf@f 0021                   ?_WiFly_SendCMD_SingleArg 003A  
                      ?_EUSART_Receive_ISR 0070                            ___lwmod@divisor 0078  
                        ??_WiFly_CheckRecv 0078                                   strlen@cp 0074  
                          ___lwmod@counter 0020                                 _TX1STAbits 011E  
                               _TMR2_Start 0F33                       ??_WiFly_EnterCMDMode 0079  
                               _TMR4_Start 0F07                             _connect_socket 0B76  
                       EUSART_Write@txData 0071               __size_of_EUSART_Transmit_ISR 0018  
           __end_of_PIN_MANAGER_Initialize 0C2D                           ??_TMR4_StopTimer 0071  
                         WiFly_CheckRecv@i 0022                              ?_eeprom_write 0071  
             __size_of_RELAY_RL1_Disengage 0003                                 _STATUSbits 0003  
                     ??_EUSART_Receive_ISR 0070                               ?_eeprom_read 0070  
                    _TMR2_InterruptHandler 00E1                                 Pair@F15440 00AA  
 WiFly_Example_InitializeAsClient@password 0068  
